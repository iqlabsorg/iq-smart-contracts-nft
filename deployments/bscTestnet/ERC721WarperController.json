{
  "address": "0xE527A38f2C481AFc6F5673Ad33e3b0df88b42BEe",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyRented",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "provided",
          "type": "bytes4"
        },
        {
          "internalType": "bytes4",
          "name": "required",
          "type": "bytes4"
        }
      ],
      "name": "AssetClassMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "AssetIsNotRentable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FunctionMustBeCalledThroughDelegatecall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncompatibleWarperInterface",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "warper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "InvalidAssetForWarper",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "InvalidERC721Value",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "RentingHookError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentTime",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "availabilityPeriodStart",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "availabilityPeriodEnd",
          "type": "uint32"
        }
      ],
      "name": "WarperIsNotAvailableForRenting",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "requestedRentalPeriod",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "minRentalPeriod",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "maxRentalPeriod",
          "type": "uint32"
        }
      ],
      "name": "WarperRentalPeriodIsOutOfRange",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes4",
                  "name": "class",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Assets.AssetId",
              "name": "id",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct Assets.Asset",
          "name": "asset",
          "type": "tuple"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "AssetTransfer",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "assetClass",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes4",
                  "name": "class",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Assets.AssetId",
              "name": "id",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Assets.Asset",
          "name": "asset",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "listingId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "warper",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "renter",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "rentalPeriod",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            }
          ],
          "internalType": "struct Rentings.Params",
          "name": "rentingParams",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "universeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listerFee",
          "type": "uint256"
        }
      ],
      "name": "calculatePremiums",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "universePremium",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "listerPremium",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "warper",
          "type": "address"
        }
      ],
      "name": "checkCompatibleWarper",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "class",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Assets.AssetId",
          "name": "assetId",
          "type": "tuple"
        }
      ],
      "name": "collectionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rentalId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes4",
                      "name": "class",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "data",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct Assets.AssetId",
                  "name": "id",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Assets.Asset",
              "name": "warpedAsset",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "collectionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "listingId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "renter",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "startTime",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "endTime",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "bytes4",
                  "name": "strategy",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Listings.Params",
              "name": "listingParams",
              "type": "tuple"
            }
          ],
          "internalType": "struct Rentings.Agreement",
          "name": "rentalAgreement",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "enum IPaymentManager.EarningType",
                  "name": "earningType",
                  "type": "uint8"
                },
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                }
              ],
              "internalType": "struct Accounts.UserEarning[]",
              "name": "userEarnings",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "universeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "universeEarningValue",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "universeEarningToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "protocolEarningValue",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "protocolEarningToken",
              "type": "address"
            }
          ],
          "internalType": "struct Accounts.RentalEarnings",
          "name": "rentalEarnings",
          "type": "tuple"
        }
      ],
      "name": "executeRentingHooks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "warper",
          "type": "address"
        }
      ],
      "name": "isCompatibleWarper",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metahub",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "warper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "renter",
          "type": "address"
        }
      ],
      "name": "rentalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metahub",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "warper",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "rentalStatus",
      "outputs": [
        {
          "internalType": "enum Rentings.RentalStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes4",
                  "name": "class",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Assets.AssetId",
              "name": "id",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Assets.Asset",
          "name": "asset",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "returnAssetFromVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes4",
                  "name": "class",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Assets.AssetId",
              "name": "id",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Assets.Asset",
          "name": "asset",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes4",
                  "name": "class",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Assets.AssetId",
              "name": "id",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Assets.Asset",
          "name": "asset",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "assetOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "transferAssetToVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes4",
                  "name": "class",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Assets.AssetId",
              "name": "id",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Assets.Asset",
          "name": "asset",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "listingId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "warper",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "renter",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "rentalPeriod",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "paymentToken",
              "type": "address"
            }
          ],
          "internalType": "struct Rentings.Params",
          "name": "rentingParams",
          "type": "tuple"
        }
      ],
      "name": "validateRentingParams",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes4",
                  "name": "class",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Assets.AssetId",
              "name": "id",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Assets.Asset",
          "name": "asset",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "warper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "warp",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "warpedCollectionId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes4",
                  "name": "class",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Assets.AssetId",
              "name": "id",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct Assets.Asset",
          "name": "warpedAsset",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5e25c2178c7a76d2caddbb607bcaf15ae14e8b073088d463ce37f6da70561028",
  "receipt": {
    "to": null,
    "from": "0xa944195A4a0c3a679Bea853579126c308b34c8D4",
    "contractAddress": "0xE527A38f2C481AFc6F5673Ad33e3b0df88b42BEe",
    "transactionIndex": 0,
    "gasUsed": "1850052",
    "logsBloom": "0x
    "blockHash": "0x102338e339dd4cbd5a484b823cfb748ca112a2f4e9469a914f342df5fe10623d",
    "transactionHash": "0x5e25c2178c7a76d2caddbb607bcaf15ae14e8b073088d463ce37f6da70561028",
    "logs": [],
    "blockNumber": 21226330,
    "cumulativeGasUsed": "1850052",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fb9c58b7901af5838d59c545c334f975",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyRented\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"provided\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"required\",\"type\":\"bytes4\"}],\"name\":\"AssetClassMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"AssetIsNotRentable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FunctionMustBeCalledThroughDelegatecall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncompatibleWarperInterface\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"warper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"InvalidAssetForWarper\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InvalidERC721Value\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"RentingHookError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"availabilityPeriodStart\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"availabilityPeriodEnd\",\"type\":\"uint32\"}],\"name\":\"WarperIsNotAvailableForRenting\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"requestedRentalPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minRentalPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxRentalPeriod\",\"type\":\"uint32\"}],\"name\":\"WarperRentalPeriodIsOutOfRange\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"class\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Assets.AssetId\",\"name\":\"id\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Assets.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"AssetTransfer\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"assetClass\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"class\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Assets.AssetId\",\"name\":\"id\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Assets.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"warper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"renter\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"rentalPeriod\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"internalType\":\"struct Rentings.Params\",\"name\":\"rentingParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"universeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listerFee\",\"type\":\"uint256\"}],\"name\":\"calculatePremiums\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"universePremium\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"listerPremium\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"warper\",\"type\":\"address\"}],\"name\":\"checkCompatibleWarper\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"class\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Assets.AssetId\",\"name\":\"assetId\",\"type\":\"tuple\"}],\"name\":\"collectionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rentalId\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"class\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Assets.AssetId\",\"name\":\"id\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Assets.Asset\",\"name\":\"warpedAsset\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"collectionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"renter\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"strategy\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Listings.Params\",\"name\":\"listingParams\",\"type\":\"tuple\"}],\"internalType\":\"struct Rentings.Agreement\",\"name\":\"rentalAgreement\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"enum IPaymentManager.EarningType\",\"name\":\"earningType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"internalType\":\"struct Accounts.UserEarning[]\",\"name\":\"userEarnings\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"universeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"universeEarningValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"universeEarningToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protocolEarningValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"protocolEarningToken\",\"type\":\"address\"}],\"internalType\":\"struct Accounts.RentalEarnings\",\"name\":\"rentalEarnings\",\"type\":\"tuple\"}],\"name\":\"executeRentingHooks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"warper\",\"type\":\"address\"}],\"name\":\"isCompatibleWarper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metahub\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"warper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"renter\",\"type\":\"address\"}],\"name\":\"rentalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metahub\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"warper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"rentalStatus\",\"outputs\":[{\"internalType\":\"enum Rentings.RentalStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"class\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Assets.AssetId\",\"name\":\"id\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Assets.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"returnAssetFromVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"class\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Assets.AssetId\",\"name\":\"id\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Assets.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"class\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Assets.AssetId\",\"name\":\"id\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Assets.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"assetOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"transferAssetToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"class\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Assets.AssetId\",\"name\":\"id\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Assets.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"warper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"renter\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"rentalPeriod\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"internalType\":\"struct Rentings.Params\",\"name\":\"rentingParams\",\"type\":\"tuple\"}],\"name\":\"validateRentingParams\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"class\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Assets.AssetId\",\"name\":\"id\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Assets.Asset\",\"name\":\"asset\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"warper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"warp\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"warpedCollectionId\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"class\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Assets.AssetId\",\"name\":\"id\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Assets.Asset\",\"name\":\"warpedAsset\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AlreadyRented()\":[{\"details\":\"Thrown upon attempting to rent a warped asset which is already rented.\"}],\"AssetClassMismatch(bytes4,bytes4)\":[{\"details\":\"Thrown when the asset has invalid class for specific operation.\",\"params\":{\"provided\":\"Provided class ID.\",\"required\":\"Required class ID.\"}}],\"AssetIsNotRentable(string)\":[{\"details\":\"Thrown when the asset renting is rejected by warper due to the `reason`.\"}],\"FunctionMustBeCalledThroughDelegatecall()\":[{\"details\":\"Thrown when a function is called directly and not through a delegatecall.\"}],\"IncompatibleWarperInterface()\":[{\"details\":\"Thrown if warper interface is not compatible with the controller.\"}],\"InvalidAssetForWarper(address,address)\":[{\"details\":\"Thrown upon attempting to use the warper with an asset different from the one expected by the warper.\"}],\"InvalidERC721Value(uint256)\":[{\"details\":\"Thrown when the asset value is invalid for ERC721 token standard.\"}],\"RentingHookError(string)\":[{\"details\":\"Thrown when the renting hook execution failed due to the `reason`.\"}],\"WarperIsNotAvailableForRenting(uint256,uint32,uint32)\":[{\"details\":\"Thrown when the current time is not withing the warper availability period.\"}],\"WarperRentalPeriodIsOutOfRange(uint32,uint32,uint32)\":[{\"details\":\"Thrown when the requested rental period is not withing the warper allowed rental period range.\"}]},\"kind\":\"dev\",\"methods\":{\"assetClass()\":{\"details\":\"Returns controller asset class.\",\"returns\":{\"_0\":\"Asset class ID.\"}},\"calculatePremiums(((bytes4,bytes),uint256),(uint256,address,address,uint32,address),uint256,uint256)\":{\"details\":\"Calculates the universe and/or lister premiums. Those are extra amounts that should be added the the resulting rental fee paid by renter.\",\"params\":{\"asset\":\"Asset being rented.\",\"listerFee\":\"The current value of the lister fee component.\",\"rentingParams\":\"Renting parameters.\",\"universeFee\":\"The current value of the universe fee component.\"},\"returns\":{\"listerPremium\":\"The lister premium amount.\",\"universePremium\":\"The universe premium amount.\"}},\"checkCompatibleWarper(address)\":{\"details\":\"Reverts if provided warper is not compatible with the controller.\"},\"collectionId((bytes4,bytes))\":{\"details\":\"Decodes asset ID structure and returns collection identifier. The collection ID is byte32 value which is calculated based on the asset class. For example, ERC721 collection can be identified by address only, but for ERC1155 it should be calculated based on address and token ID.\",\"returns\":{\"_0\":\"Collection ID.\"}},\"executeRentingHooks(uint256,(((bytes4,bytes),uint256),bytes32,uint256,address,uint32,uint32,(bytes4,bytes)),((uint8,address,uint256,address)[],uint256,uint256,address,uint256,address))\":{\"details\":\"Executes warper rental hook.\",\"params\":{\"rentalAgreement\":\"Newly registered rental agreement details.\",\"rentalEarnings\":\"The rental earnings breakdown.\",\"rentalId\":\"Rental agreement ID.\"}},\"isCompatibleWarper(address)\":{\"details\":\"Validates that the warper interface is supported by the current WarperController.\",\"params\":{\"warper\":\"Warper whose interface we must validate.\"},\"returns\":{\"_0\":\"bool - `true` if warper is supported.\"}},\"rentalBalance(address,address,address)\":{\"details\":\"Get the active rental balance for a given warper and a renter.      Used in Warper->Metahub communication.\",\"params\":{\"metahub\":\"Address of the metahub.\",\"renter\":\"Address of the renter whose active rental counts we need to fetch.\",\"warper\":\"Address of the warper.\"}},\"rentalStatus(address,address,uint256)\":{\"details\":\"Get the rental status of a specific token.      Used in Warper->Metahub communication.\",\"params\":{\"metahub\":\"Address of the metahub.\",\"tokenId\":\"The token ID to be checked for status.\",\"warper\":\"Address of the warper.\"}},\"returnAssetFromVault(((bytes4,bytes),uint256),address)\":{\"details\":\"Transfers asset from the vault contract to the original owner.\",\"params\":{\"asset\":\"Asset being transferred.\",\"vault\":\"Asset vault contract address.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transfer(((bytes4,bytes),uint256),address,address,bytes)\":{\"details\":\"Transfers asset. Emits a {AssetTransfer} event.\",\"params\":{\"asset\":\"Asset being transferred.\",\"data\":\"Auxiliary data.\",\"from\":\"Asset sender.\",\"to\":\"Asset recipient.\"}},\"transferAssetToVault(((bytes4,bytes),uint256),address,address)\":{\"details\":\"Transfers asset from owner to the vault contract.\",\"params\":{\"asset\":\"Asset being transferred.\",\"assetOwner\":\"Original asset owner address.\",\"vault\":\"Asset vault contract address.\"}},\"validateRentingParams(((bytes4,bytes),uint256),(uint256,address,address,uint32,address))\":{\"details\":\"Validates renting params taking into account various warper mechanics. Throws an error if the specified asset cannot be rented with particular renting parameters.\",\"params\":{\"asset\":\"Asset being rented.\",\"rentingParams\":\"Renting parameters.\"}},\"warp(((bytes4,bytes),uint256),address,address)\":{\"details\":\"Needs to be called with `delegatecall` from Metahub, otherwise warpers will reject the call.\",\"params\":{\"asset\":\"The asset that must be warped.\",\"to\":\"The account which will receive the warped asset.\",\"warper\":\"Warper contract to used for warping.\"},\"returns\":{\"warpedAsset\":\"Warper asset structure.\",\"warpedCollectionId\":\"Warped collection ID.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/warper/ERC721/ERC721WarperController.sol\":\"ERC721WarperController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7acbc538aad6eb4614e26612a8c5c0149bb8808db95e2638d245a8365f63e572\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165CheckerUpgradeable {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165Upgradeable).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165Upgradeable.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0x5fbd456efb10b8fdc4bd931e69d6e905ca43125c84781a729bc1a271e1839c3b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableMapUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableMap.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSetUpgradeable.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32`) since v4.6.0\\n */\\nlibrary EnumerableMapUpgradeable {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSetUpgradeable.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function get(\\n        Bytes32ToBytes32Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        address value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToAddressMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key), errorMessage))));\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        AddressToUintMap storage map,\\n        address key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        AddressToUintMap storage map,\\n        address key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key))), errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x44183e3aa61358ae381c27fa837010552ba90f66d620cf1ba6544f567caa7f3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1976ce0aadaa551a0fecab9930a7f4956252fa40594c8d165f682020f0e826c0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721Receiver.sol\\\";\\n\",\"keccak256\":\"0x7bd5dc796c245d4c52836610455d172cdfcc1f8dcf0d9b1c4cbde212fde02965\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/accounting/Accounts.sol\":{\"content\":\"// solhint-disable private-vars-leading-underscore\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableMapUpgradeable.sol\\\";\\nimport \\\"../renting/Rentings.sol\\\";\\nimport \\\"../universe/IUniverseRegistry.sol\\\";\\nimport \\\"../listing/Listings.sol\\\";\\nimport \\\"./IPaymentManager.sol\\\";\\n\\nlibrary Accounts {\\n    using Accounts for Account;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using EnumerableMapUpgradeable for EnumerableMapUpgradeable.AddressToUintMap;\\n\\n    /**\\n     * @dev Thrown when the estimated rental fee calculated upon renting\\n     * is higher than maximal payment amount the renter is willing to pay.\\n     */\\n    error RentalFeeSlippage();\\n\\n    /**\\n     * @dev Thrown when the amount requested to be paid out is not valid.\\n     */\\n    error InvalidWithdrawalAmount(uint256 amount);\\n\\n    /**\\n     * @dev Thrown when the amount requested to be paid out is larger than available balance.\\n     */\\n    error InsufficientBalance(uint256 balance);\\n\\n    /**\\n     * @dev A structure that describes account balance in ERC20 tokens.\\n     */\\n    struct Balance {\\n        address token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * @dev Describes an account state.\\n     * @param tokenBalances Mapping from an ERC20 token address to the amount.\\n     */\\n    struct Account {\\n        EnumerableMapUpgradeable.AddressToUintMap tokenBalances;\\n    }\\n\\n    /**\\n     * @dev Transfers funds from the account balance to the specific address after validating balance sufficiency.\\n     */\\n    function withdraw(\\n        Account storage self,\\n        address token,\\n        uint256 amount,\\n        address to\\n    ) external {\\n        if (amount == 0) revert InvalidWithdrawalAmount(amount);\\n        uint256 currentBalance = self.balance(token);\\n        if (amount > currentBalance) revert InsufficientBalance(currentBalance);\\n        unchecked {\\n            self.tokenBalances.set(token, currentBalance - amount);\\n        }\\n        IERC20Upgradeable(token).safeTransfer(to, amount);\\n    }\\n\\n    struct UserEarning {\\n        IPaymentManager.EarningType earningType;\\n        address account;\\n        uint256 value;\\n        address token;\\n    }\\n\\n    struct RentalEarnings {\\n        UserEarning[] userEarnings;\\n        // Universe\\n        uint256 universeId;\\n        uint256 universeEarningValue;\\n        address universeEarningToken;\\n        // Protocol\\n        uint256 protocolEarningValue;\\n        address protocolEarningToken;\\n    }\\n\\n    function handleRentalPayment(\\n        Accounts.Registry storage self,\\n        Rentings.Params calldata rentingParams,\\n        Rentings.RentalFees calldata fees,\\n        address payer,\\n        uint256 maxPaymentAmount,\\n        IWarperManager warperManager,\\n        Listings.Registry storage listingRegistry\\n    ) external returns (RentalEarnings memory earnings) {\\n        // Ensure no rental fee payment slippage.\\n        if (fees.total > maxPaymentAmount) revert RentalFeeSlippage();\\n\\n        // The amount of payment tokens to be accumulated on the Metahub for future payouts.\\n        // This will include all fees which are not being paid out immediately.\\n        uint256 accumulatedTokens = 0;\\n\\n        // Initialize user earnings array. Currently we only support earnings for single user, who is the lister.\\n        earnings.userEarnings = new UserEarning[](1);\\n\\n        // Handle lister fee component.\\n        Listings.Listing storage listing = listingRegistry.listings[rentingParams.listingId];\\n        UserEarning memory listerEarning = UserEarning({\\n            earningType: IPaymentManager.EarningType.LISTER_FEE,\\n            account: listing.lister,\\n            value: fees.listerBaseFee + fees.listerPremium,\\n            token: rentingParams.paymentToken\\n        });\\n        earnings.userEarnings[0] = listerEarning;\\n\\n        // If the lister has not requested immediate payout, the earned amount is added to the lister balance.\\n        // The direct payout case is handled along with other transfers later.\\n        if (!listing.immediatePayout) {\\n            self.users[listerEarning.account].increaseBalance(listerEarning.token, listerEarning.value);\\n            accumulatedTokens += listerEarning.value;\\n        }\\n\\n        // Handle universe fee component.\\n        earnings.universeId = warperManager.warperInfo(rentingParams.warper).universeId;\\n        earnings.universeEarningValue = fees.universeBaseFee + fees.universePremium;\\n        earnings.universeEarningToken = rentingParams.paymentToken;\\n        // Increase universe balance.\\n        self.universes[earnings.universeId].increaseBalance(\\n            earnings.universeEarningToken,\\n            earnings.universeEarningValue\\n        );\\n        accumulatedTokens += earnings.universeEarningValue;\\n\\n        // Handle protocol fee component.\\n        earnings.protocolEarningValue = fees.protocolFee;\\n        earnings.protocolEarningToken = rentingParams.paymentToken;\\n        self.protocol.increaseBalance(earnings.protocolEarningToken, earnings.protocolEarningValue);\\n        accumulatedTokens += earnings.protocolEarningValue;\\n\\n        // Proceed with transfers.\\n        // If immediate payout requested, transfer the lister earnings directly to the lister account.\\n        if (listing.immediatePayout && listerEarning.value > 0) {\\n            IERC20Upgradeable(listerEarning.token).safeTransferFrom(payer, listerEarning.account, listerEarning.value);\\n        }\\n\\n        // Transfer the accumulated token amount from payer to the metahub.\\n        if (accumulatedTokens > 0) {\\n            IERC20Upgradeable(rentingParams.paymentToken).safeTransferFrom(payer, address(this), accumulatedTokens);\\n        }\\n    }\\n\\n    /**\\n     * @dev Increments value of the particular account balance.\\n     */\\n    function increaseBalance(\\n        Account storage self,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        uint256 currentBalance = self.balance(token);\\n        self.tokenBalances.set(token, currentBalance + amount);\\n    }\\n\\n    /**\\n     * @dev Returns account current balance.\\n     * Does not revert if `token` is not in the map.\\n     */\\n    function balance(Account storage self, address token) internal view returns (uint256) {\\n        (, uint256 value) = self.tokenBalances.tryGet(token);\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Returns the list of account balances in various tokens.\\n     */\\n    function balances(Account storage self) internal view returns (Balance[] memory) {\\n        uint256 length = self.tokenBalances.length();\\n        Balance[] memory allBalances = new Balance[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            (address token, uint256 amount) = self.tokenBalances.at(i);\\n            allBalances[i] = Balance({token: token, amount: amount});\\n        }\\n        return allBalances;\\n    }\\n\\n    /**\\n     * @dev Account registry.\\n     * @param protocol The protocol account state.\\n     * @param universes Mapping from a universe ID to the universe account state.\\n     * @param users Mapping from a user address to the account state.\\n     */\\n    struct Registry {\\n        Account protocol;\\n        mapping(uint256 => Account) universes;\\n        mapping(address => Account) users;\\n    }\\n}\\n\",\"keccak256\":\"0x460027d1983a40287ed39e5230c72da058198ef6cb75bc6bb56fc1b43b380cfc\",\"license\":\"MIT\"},\"contracts/accounting/IPaymentManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Accounts.sol\\\";\\n\\ninterface IPaymentManager {\\n    /**\\n     * @notice Describes the earning type.\\n     */\\n    enum EarningType {\\n        LISTER_FEE\\n    }\\n\\n    /**\\n     * @dev Emitted when a user has earned some amount tokens.\\n     * @param user Address of the user that earned some amount.\\n     * @param earningType Describes the type of the user.\\n     * @param paymentToken The currency that the user has earned.\\n     * @param amount The amount of tokens that the user has earned.\\n     */\\n    event UserEarned(\\n        address indexed user,\\n        EarningType indexed earningType,\\n        address indexed paymentToken,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted when the universe has earned some amount of tokens.\\n     * @param universeId ID of the universe that earned the tokens.\\n     * @param paymentToken The currency that the user has earned.\\n     * @param amount The amount of tokens that the user has earned.\\n     */\\n    event UniverseEarned(uint256 indexed universeId, address indexed paymentToken, uint256 amount);\\n\\n    /**\\n     * @dev Emitted when the protocol has earned some amount of tokens.\\n     * @param paymentToken The currency that the user has earned.\\n     * @param amount The amount of tokens that the user has earned.\\n     */\\n    event ProtocolEarned(address indexed paymentToken, uint256 amount);\\n\\n    /**\\n     * @dev Transfers the specific `amount` of `token` from a protocol balance to an arbitrary address.\\n     * @param token The token address.\\n     * @param amount The amount to be withdrawn.\\n     * @param to The payee address.\\n     */\\n    function withdrawProtocolFunds(\\n        address token,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    /**\\n     * @dev Transfers the specific `amount` of `token` from a universe balance to an arbitrary address.\\n     * @param universeId The universe ID.\\n     * @param token The token address.\\n     * @param amount The amount to be withdrawn.\\n     * @param to The payee address.\\n     */\\n    function withdrawUniverseFunds(\\n        uint256 universeId,\\n        address token,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    /**\\n     * @dev Transfers the specific `amount` of `token` from a user balance to an arbitrary address.\\n     * @param token The token address.\\n     * @param amount The amount to be withdrawn.\\n     * @param to The payee address.\\n     */\\n    function withdrawFunds(\\n        address token,\\n        uint256 amount,\\n        address to\\n    ) external;\\n\\n    /**\\n     * @dev Returns the amount of `token`, currently accumulated by the protocol.\\n     * @param token The token address.\\n     * @return Balance of `token`.\\n     */\\n    function protocolBalance(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the list of protocol balances in various tokens.\\n     * @return List of balances.\\n     */\\n    function protocolBalances() external view returns (Accounts.Balance[] memory);\\n\\n    /**\\n     * @dev Returns the amount of `token`, currently accumulated by the universe.\\n     * @param universeId The universe ID.\\n     * @param token The token address.\\n     * @return Balance of `token`.\\n     */\\n    function universeBalance(uint256 universeId, address token) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the list of universe balances in various tokens.\\n     * @param universeId The universe ID.\\n     * @return List of balances.\\n     */\\n    function universeBalances(uint256 universeId) external view returns (Accounts.Balance[] memory);\\n\\n    /**\\n     * @dev Returns the amount of `token`, currently accumulated by the user.\\n     * @param account The account to query the balance for.\\n     * @param token The token address.\\n     * @return Balance of `token`.\\n     */\\n    function balance(address account, address token) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the list of user balances in various tokens.\\n     * @param account The account to query the balance for.\\n     * @return List of balances.\\n     */\\n    function balances(address account) external view returns (Accounts.Balance[] memory);\\n}\\n\",\"keccak256\":\"0x1bbd8f9c7be6d69c6489a3a71a25acaddf18d68c13398bafdafd9c7731f328fc\",\"license\":\"MIT\"},\"contracts/acl/AccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"./Roles.sol\\\";\\nimport \\\"./IACL.sol\\\";\\n\\n/**\\n * @title Modifier provider for contracts that want to interact with the ACL contract.\\n */\\nabstract contract AccessControlled is Context {\\n    /**\\n     * @dev Modifier to make a function callable by the admin account.\\n     */\\n    modifier onlyAdmin() {\\n        _acl().checkRole(Roles.ADMIN, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable by a supervisor account.\\n     */\\n    modifier onlySupervisor() {\\n        _acl().checkRole(Roles.SUPERVISOR, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev return the IACL address\\n     */\\n    function _acl() internal view virtual returns (IACL);\\n}\\n\",\"keccak256\":\"0x94155da371bce06356928d63a76ed755b637dfc6b8b555bcb7394a6cf2ef0889\",\"license\":\"MIT\"},\"contracts/acl/IACL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol\\\";\\n\\n/**\\n * @title Access Control List contract interface.\\n */\\ninterface IACL is IAccessControlEnumerableUpgradeable {\\n    /**\\n     * @dev Thrown when the Admin roles bytes is incorrectly formatted.\\n     */\\n    error RolesContractIncorrectlyConfigured();\\n\\n    /**\\n     * @dev Thrown when the attempting to remove the very last admin from ACL.\\n     */\\n    error CannotRemoveLastAdmin();\\n\\n    /**\\n     * @notice revert if the `account` does not have the specified role.\\n     * @param role the role specifier.\\n     * @param account the address to check the role for.\\n     */\\n    function checkRole(bytes32 role, address account) external view;\\n\\n    /**\\n     * @notice Get the admin role describing bytes\\n     * return role bytes\\n     */\\n    function adminRole() external pure returns (bytes32);\\n\\n    /**\\n     * @notice Get the supervisor role describing bytes\\n     * return role bytes\\n     */\\n    function supervisorRole() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xced8912e2adf5d7e516aedf45220318e735e60cb6bb8b640813109221a541e70\",\"license\":\"MIT\"},\"contracts/acl/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title Different role definitions used by the ACL contract.\\n */\\nlibrary Roles {\\n    /**\\n     * @dev This maps directly to the OpenZeppelins AccessControl DEFAULT_ADMIN\\n     */\\n    bytes32 public constant ADMIN = 0x00;\\n    bytes32 public constant SUPERVISOR = keccak256(\\\"SUPERVISOR_ROLE\\\");\\n}\\n\",\"keccak256\":\"0x0fddf288e2709a1e4b0dc19eced49e232cb28be830dfa398dc5d60cb8786695f\",\"license\":\"MIT\"},\"contracts/asset/AssetController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"./IAssetController.sol\\\";\\n\\nabstract contract AssetController is IAssetController, ERC165 {\\n    /**\\n     * The fallback function is needed to ensure forward compatibility with Metahub.\\n     * When introducing a new version of controller with additional external functions,\\n     * it must be safe to call the those new functions on previous generation of controllers and it must not cause\\n     * the transaction revert.\\n     */\\n    fallback() external {\\n        // solhint-disable-previous-line no-empty-blocks, payable-fallback\\n    }\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IAssetController).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2bcba23bdfa21f6c2b56fc2c65eccb1a5690635c5c3c91cd406413bc93fcc17a\",\"license\":\"MIT\"},\"contracts/asset/AssetVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../acl/AccessControlled.sol\\\";\\nimport \\\"./IAssetVault.sol\\\";\\n\\n/**\\n * @dev During the normal operation time, only Metahub contract is allowed to initiate asset return to the original\\n * asset owner. In case of emergency, the vault admin can switch vault to recovery mode, therefore allowing anyone to\\n * initiate asset return.\\n *\\n * NOTE: There is no way to transfer asset from the vault to an arbitrary address. The asset can only be returned to\\n * the rightful owner.\\n *\\n * Warning: All tokens transferred to the vault contract directly (not by Metahub contract) will be lost forever!!!\\n *\\n */\\nabstract contract AssetVault is IAssetVault, AccessControlled, Pausable, ERC165 {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev Vault recovery mode state.\\n     */\\n    bool private _recovery;\\n\\n    /**\\n     * @dev Metahub address.\\n     */\\n    address private _metahub;\\n\\n    /**\\n     * @dev ACL contract.\\n     */\\n    IACL private _aclContract;\\n\\n    /**\\n     * @dev Modifier to check asset deposit possibility.\\n     */\\n    modifier whenAssetDepositAllowed(address operator) {\\n        if (operator == _metahub && !paused() && !_recovery) _;\\n        else revert AssetDepositIsNotAllowed();\\n    }\\n\\n    /**\\n     * @dev Modifier to check asset return possibility.\\n     */\\n    modifier whenAssetReturnAllowed() {\\n        if ((_msgSender() == _metahub && !paused()) || _recovery) _;\\n        else revert AssetReturnIsNotAllowed();\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the vault is not in recovery mode.\\n     */\\n    modifier whenNotRecovery() {\\n        if (_recovery) revert VaultIsInRecoveryMode();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor.\\n     * @param metahubContract Metahub contract address.\\n     * @param aclContract ACL contract address.\\n     */\\n    constructor(address metahubContract, address aclContract) {\\n        _recovery = false;\\n\\n        _metahub = metahubContract;\\n        _aclContract = IACL(aclContract);\\n    }\\n\\n    /**\\n     * @inheritdoc IAssetVault\\n     */\\n    function pause() external onlySupervisor whenNotRecovery {\\n        _pause();\\n    }\\n\\n    /**\\n     * @inheritdoc IAssetVault\\n     */\\n    function unpause() external onlySupervisor whenNotRecovery {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @inheritdoc IAssetVault\\n     */\\n    function switchToRecoveryMode() external onlyAdmin whenNotRecovery {\\n        _recovery = true;\\n        emit RecoveryModeActivated(_msgSender());\\n    }\\n\\n    /**\\n     * @inheritdoc IAssetVault\\n     */\\n    function withdrawERC20Tokens(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) external override onlyAdmin {\\n        token.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @inheritdoc IAssetVault\\n     */\\n    function metahub() external view returns (address) {\\n        return _metahub;\\n    }\\n\\n    /**\\n     * @inheritdoc IAssetVault\\n     */\\n    function isRecovery() external view returns (bool) {\\n        return _recovery;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IAssetVault).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc AccessControlled\\n     */\\n    function _acl() internal view override returns (IACL) {\\n        return _aclContract;\\n    }\\n}\\n\",\"keccak256\":\"0xe8dbb381daaf2a4f6d3f30cea36f0c1be0bb4efdaad7f9c11939b44034c6b7fc\",\"license\":\"MIT\"},\"contracts/asset/Assets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./IAssetController.sol\\\";\\nimport \\\"./IAssetVault.sol\\\";\\nimport \\\"./IAssetClassRegistry.sol\\\";\\n\\nlibrary Assets {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using Address for address;\\n    using Assets for Registry;\\n    using Assets for Asset;\\n\\n    /*\\n     * @dev This is the list of asset class identifiers to be used across the system.\\n     */\\n    bytes4 public constant ERC721 = bytes4(keccak256(\\\"ERC721\\\"));\\n    bytes4 public constant ERC1155 = bytes4(keccak256(\\\"ERC1155\\\"));\\n\\n    bytes32 public constant ASSET_ID_TYPEHASH = keccak256(\\\"AssetId(bytes4 class,bytes data)\\\");\\n\\n    bytes32 public constant ASSET_TYPEHASH =\\n        keccak256(\\\"Asset(AssetId id,uint256 value)AssetId(bytes4 class,bytes data)\\\");\\n\\n    /**\\n     * @dev Thrown upon attempting to register an asset twice.\\n     * @param asset Duplicate asset address.\\n     */\\n    error AssetIsAlreadyRegistered(address asset);\\n\\n    /**\\n     * @dev Communicates asset identification information.\\n     * The structure designed to be token-standard agnostic,\\n     * so the layout of `data` might vary for different token standards.\\n     * For example, in case of ERC721 token, the `data` will contain contract address and tokenId.\\n     * @param class Asset class ID\\n     * @param data Asset identification data.\\n     */\\n    struct AssetId {\\n        bytes4 class;\\n        bytes data;\\n    }\\n\\n    /**\\n     * @dev Calculates Asset ID hash\\n     */\\n    function hash(AssetId memory assetId) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_ID_TYPEHASH, assetId.class, keccak256(assetId.data)));\\n    }\\n\\n    /**\\n     * @dev Extracts token contract address from the Asset ID structure.\\n     * The address is the common attribute for all assets regardless of their asset class.\\n     */\\n    function token(AssetId memory self) internal pure returns (address) {\\n        return abi.decode(self.data, (address));\\n    }\\n\\n    /**\\n     * @dev Uniformed structure to describe arbitrary asset (token) and its value.\\n     * @param id Asset ID structure.\\n     * @param value Asset value (amount).\\n     */\\n    struct Asset {\\n        AssetId id;\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Calculates Asset hash\\n     */\\n    function hash(Asset memory asset) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ASSET_TYPEHASH, hash(asset.id), asset.value));\\n    }\\n\\n    /**\\n     * @dev Extracts token contract address from the Asset structure.\\n     * The address is the common attribute for all assets regardless of their asset class.\\n     */\\n    function token(Asset memory self) internal pure returns (address) {\\n        return abi.decode(self.id.data, (address));\\n    }\\n\\n    /**\\n     * @dev Original asset data.\\n     * @param controller Asset controller.\\n     * @param assetClass The asset class identifier.\\n     * @param vault Asset vault.\\n     */\\n    struct AssetConfig {\\n        IAssetController controller;\\n        bytes4 assetClass;\\n        IAssetVault vault;\\n    }\\n\\n    /**\\n     * @dev Asset registry.\\n     * @param classRegistry Asset class registry contract.\\n     * @param assetIndex Set of registered asset addresses.\\n     * @param assets Mapping from asset address to the asset configuration.\\n     */\\n    struct Registry {\\n        IAssetClassRegistry classRegistry;\\n        EnumerableSetUpgradeable.AddressSet assetIndex;\\n        mapping(address => AssetConfig) assets;\\n    }\\n\\n    /**\\n     * @dev Registers new asset.\\n     */\\n    function registerAsset(\\n        Registry storage self,\\n        bytes4 assetClass,\\n        address asset\\n    ) external {\\n        if (!self.assetIndex.add(asset)) revert AssetIsAlreadyRegistered(asset);\\n\\n        IAssetClassRegistry.ClassConfig memory assetClassConfig = self.classRegistry.assetClassConfig(assetClass);\\n        self.assets[asset] = AssetConfig({\\n            controller: IAssetController(assetClassConfig.controller),\\n            assetClass: assetClass,\\n            vault: IAssetVault(assetClassConfig.vault)\\n        });\\n    }\\n\\n    /**\\n     * @dev Returns the paginated list of currently registered listings and their corresponding asset configs.\\n     */\\n    function supportedAssets(\\n        Registry storage self,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory, AssetConfig[] memory) {\\n        uint256 indexSize = self.assetIndex.length();\\n        if (offset >= indexSize) return (new address[](0), new AssetConfig[](0));\\n\\n        if (limit > indexSize - offset) {\\n            limit = indexSize - offset;\\n        }\\n\\n        AssetConfig[] memory assetConfigs = new AssetConfig[](limit);\\n        address[] memory assetAddresses = new address[](limit);\\n        for (uint256 i = 0; i < limit; i++) {\\n            assetAddresses[i] = self.assetIndex.at(offset + i);\\n            assetConfigs[i] = self.assets[assetAddresses[i]];\\n        }\\n        return (assetAddresses, assetConfigs);\\n    }\\n\\n    /**\\n     * @dev Transfers an asset to the vault using associated controller.\\n     */\\n    function transferAssetToVault(\\n        Registry storage self,\\n        Assets.Asset memory asset,\\n        address from\\n    ) external {\\n        // Extract token address from asset struct and check whether the asset is supported.\\n        address assetToken = asset.token();\\n\\n        // Transfer asset to the class asset specific vault.\\n        address assetController = address(self.assets[assetToken].controller);\\n        address assetVault = address(self.assets[assetToken].vault);\\n        assetController.functionDelegateCall(\\n            abi.encodeWithSelector(IAssetController.transferAssetToVault.selector, asset, from, assetVault)\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfers an asset from the vault using associated controller.\\n     */\\n    function returnAssetFromVault(Registry storage self, Assets.Asset memory asset) external {\\n        address assetToken = asset.token();\\n        address assetController = address(self.assets[assetToken].controller);\\n        address assetVault = address(self.assets[assetToken].vault);\\n\\n        assetController.functionDelegateCall(\\n            abi.encodeWithSelector(IAssetController.returnAssetFromVault.selector, asset, assetVault)\\n        );\\n    }\\n\\n    function assetCount(Registry storage self) internal view returns (uint256) {\\n        return self.assetIndex.length();\\n    }\\n\\n    /**\\n     * @dev Checks asset registration by address.\\n     */\\n    function isRegisteredAsset(Registry storage self, address asset) internal view returns (bool) {\\n        return self.assetIndex.contains(asset);\\n    }\\n\\n    /**\\n     * @dev Returns controller for asset class.\\n     * @param assetClass Asset class ID.\\n     */\\n    function assetClassController(Registry storage self, bytes4 assetClass) internal view returns (address) {\\n        return self.classRegistry.assetClassConfig(assetClass).controller;\\n    }\\n}\\n\",\"keccak256\":\"0x0b1fb3edaeb4dc3ae8ba1eafa5e3571b4842a67440a57e52353e183868010689\",\"license\":\"MIT\"},\"contracts/asset/ERC721/ERC721AssetController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\n\\nimport \\\"../Assets.sol\\\";\\nimport \\\"../utils/DelegateContext.sol\\\";\\nimport \\\"./ERC721AssetVault.sol\\\";\\nimport \\\"../AssetController.sol\\\";\\n\\n/**\\n * @title Asset controller for the ERC721 tokens\\n */\\ncontract ERC721AssetController is AssetController, DelegateContext {\\n    using Assets for Assets.AssetId;\\n\\n    /**\\n     * @dev Thrown when the asset value is invalid for ERC721 token standard.\\n     */\\n    error InvalidERC721Value(uint256 value);\\n\\n    /**\\n     * @inheritdoc IAssetController\\n     */\\n    function assetClass() public pure returns (bytes4) {\\n        return Assets.ERC721;\\n    }\\n\\n    /**\\n     * @inheritdoc IAssetController\\n     */\\n    function transferAssetToVault(\\n        Assets.Asset memory asset,\\n        address assetOwner,\\n        address vault\\n    ) external onlyDelegatecall {\\n        _transferAsset(asset, assetOwner, vault, \\\"\\\");\\n    }\\n\\n    /**\\n     * @inheritdoc IAssetController\\n     */\\n    function returnAssetFromVault(Assets.Asset memory asset, address vault) external onlyDelegatecall {\\n        _validateAsset(asset);\\n        // Decode asset ID to extract identification data.\\n        (address token, uint256 tokenId) = _decodeAssetId(asset.id);\\n        IERC721AssetVault(vault).returnToOwner(token, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IAssetController\\n     */\\n    function transfer(\\n        Assets.Asset memory asset,\\n        address from,\\n        address to,\\n        bytes memory data\\n    ) external onlyDelegatecall {\\n        _transferAsset(asset, from, to, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IAssetController\\n     */\\n    function collectionId(Assets.AssetId memory assetId) external pure returns (bytes32) {\\n        if (assetId.class != assetClass()) revert AssetClassMismatch(assetId.class, assetClass());\\n        return _collectionId(assetId.token());\\n    }\\n\\n    /**\\n     * @dev Calculates collection ID.\\n     * Foe ERC721 tokens, the collection ID is calculated by hashing the contract address itself.\\n     */\\n    function _collectionId(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(token));\\n    }\\n\\n    /**\\n     * @dev Executes asset transfer.\\n     */\\n    function _transferAsset(\\n        Assets.Asset memory asset,\\n        address from,\\n        address to,\\n        bytes memory data\\n    ) internal {\\n        // Make user the asset is valid before decoding and transferring.\\n        _validateAsset(asset);\\n\\n        // Decode asset ID to extract identification data, required for transfer.\\n        (address token, uint256 tokenId) = _decodeAssetId(asset.id);\\n\\n        // Execute safe transfer.\\n        IERC721(token).safeTransferFrom(from, to, tokenId, data);\\n        emit AssetTransfer(asset, from, to, data);\\n    }\\n\\n    /**\\n     * @dev Decodes asset ID and extracts identification data.\\n     * @param id Asset ID structure.\\n     * @return token Token contract address.\\n     * @return tokenId Token ID.\\n     */\\n    function _decodeAssetId(Assets.AssetId memory id) internal pure returns (address token, uint256 tokenId) {\\n        return abi.decode(id.data, (address, uint256));\\n    }\\n\\n    /**\\n     * @dev Encodes asset ID.\\n     * @param token Token contract address.\\n     * @param tokenId Token ID.\\n     * @return Asset ID structure.\\n     */\\n    function _encodeAssetId(address token, uint256 tokenId) internal pure returns (Assets.AssetId memory) {\\n        return Assets.AssetId(assetClass(), abi.encode(token, tokenId));\\n    }\\n\\n    /**\\n     * @dev Reverts if the asset params are not valid.\\n     * @param asset Asset structure.\\n     */\\n    function _validateAsset(Assets.Asset memory asset) internal pure {\\n        // Ensure correct class.\\n        if (asset.id.class != assetClass()) revert AssetClassMismatch(asset.id.class, assetClass());\\n        // Ensure correct value, must be 1 for NFT.\\n        if (asset.value != 1) revert InvalidERC721Value(asset.value);\\n    }\\n}\\n\",\"keccak256\":\"0x6772e5a9cf567867f790bb6f9de282f55aa2623363b57b7547cc7588d48f90cf\",\"license\":\"MIT\"},\"contracts/asset/ERC721/ERC721AssetVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"../AssetVault.sol\\\";\\nimport \\\"../Assets.sol\\\";\\nimport \\\"./IERC721AssetVault.sol\\\";\\n\\ncontract ERC721AssetVault is IERC721AssetVault, AssetVault {\\n    /**\\n     * @dev Vault inventory\\n     * Mapping token address -> token ID -> owner.\\n     */\\n    mapping(address => mapping(uint256 => address)) private _inventory;\\n\\n    /**\\n     * @dev Constructor.\\n     * @param operator First operator account.\\n     * @param acl ACL contract address\\n     */\\n    constructor(address operator, address acl) AssetVault(operator, acl) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721Receiver\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata\\n    ) external whenAssetDepositAllowed(operator) returns (bytes4) {\\n        // Associate received asset with the original owner address.\\n        // Here message sender is a token address.\\n        _inventory[_msgSender()][tokenId] = from;\\n\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721AssetVault\\n     */\\n    function returnToOwner(address token, uint256 tokenId) external whenAssetReturnAllowed {\\n        // Check if the asset is registered and the original asset owner is known.\\n        address owner = _inventory[token][tokenId];\\n        if (owner == address(0)) revert AssetNotFound();\\n\\n        // Return asset to the owner.\\n        delete _inventory[token][tokenId];\\n        IERC721(token).transferFrom(address(this), owner, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc IAssetVault\\n     */\\n    function assetClass() external pure returns (bytes4) {\\n        return Assets.ERC721;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AssetVault, IERC165) returns (bool) {\\n        return interfaceId == type(IERC721AssetVault).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xed615ddcc4a7acc196b11e39a9bcdd634629dee4345c025e81a0b0e1d59e7a23\",\"license\":\"MIT\"},\"contracts/asset/ERC721/IERC721AssetVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721Receiver.sol\\\";\\nimport \\\"../IAssetVault.sol\\\";\\n\\ninterface IERC721AssetVault is IAssetVault, IERC721Receiver {\\n    /**\\n     * @dev Transfers the asset to the original owner, registered upon deposit.\\n     * NOTE: The asset is always returns to the owner. There is no way to send the `asset` to an arbitrary address.\\n     * @param token Token address.\\n     * @param tokenId Token ID.\\n     */\\n    function returnToOwner(address token, uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0xdfd3f677ca83c3aba67e81c8a7266b4b71841ce54560846a08d019ead778f4c8\",\"license\":\"MIT\"},\"contracts/asset/IAssetClassRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./IAssetController.sol\\\";\\nimport \\\"./IAssetVault.sol\\\";\\n\\ninterface IAssetClassRegistry {\\n    /**\\n     * @dev Thrown when the asset class supported by contract does not match the required one.\\n     * @param provided Provided class ID.\\n     * @param required Required class ID.\\n     */\\n    error AssetClassMismatch(bytes4 provided, bytes4 required);\\n\\n    /**\\n     * @dev Thrown upon attempting to register an asset class twice.\\n     * @param assetClass Duplicate asset class ID.\\n     */\\n    error AssetClassIsAlreadyRegistered(bytes4 assetClass);\\n\\n    /**\\n     * @dev Thrown upon attempting to work with unregistered asset class.\\n     * @param assetClass Asset class ID.\\n     */\\n    error UnregisteredAssetClass(bytes4 assetClass);\\n\\n    /**\\n     * @dev Thrown when the asset controller contract does not implement the required interface.\\n     */\\n    error InvalidAssetControllerInterface();\\n\\n    /**\\n     * @dev Thrown when the vault contract does not implement the required interface.\\n     */\\n    error InvalidAssetVaultInterface();\\n\\n    /**\\n     * @dev Emitted when the new asset class is registered.\\n     * @param assetClass Asset class ID.\\n     * @param controller Controller address.\\n     * @param vault Vault address.\\n     */\\n    event AssetClassRegistered(bytes4 indexed assetClass, address indexed controller, address indexed vault);\\n\\n    /**\\n     * @dev Emitted when the asset class controller is changed.\\n     * @param assetClass Asset class ID.\\n     * @param newController New controller address.\\n     */\\n    event AssetClassControllerChanged(bytes4 indexed assetClass, address indexed newController);\\n\\n    /**\\n     * @dev Emitted when the asset class vault is changed.\\n     * @param assetClass Asset class ID.\\n     * @param newVault New vault address.\\n     */\\n    event AssetClassVaultChanged(bytes4 indexed assetClass, address indexed newVault);\\n\\n    /**\\n     * @dev Asset class configuration.\\n     * @param vault Asset class vault.\\n     * @param controller Asset class controller.\\n     */\\n    struct ClassConfig {\\n        address vault;\\n        address controller;\\n    }\\n\\n    /**\\n     * @dev Registers new asset class.\\n     * @param assetClass Asset class ID.\\n     * @param config Asset class initial configuration.\\n     */\\n    function registerAssetClass(bytes4 assetClass, ClassConfig calldata config) external;\\n\\n    /**\\n     * @dev Sets asset class vault.\\n     * @param assetClass Asset class ID.\\n     * @param vault Asset class vault address.\\n     */\\n    function setAssetClassVault(bytes4 assetClass, address vault) external;\\n\\n    /**\\n     * @dev Sets asset class controller.\\n     * @param assetClass Asset class ID.\\n     * @param controller Asset class controller address.\\n     */\\n    function setAssetClassController(bytes4 assetClass, address controller) external;\\n\\n    /**\\n     * @dev Returns asset class configuration.\\n     * @param assetClass Asset class ID.\\n     * @return Asset class configuration.\\n     */\\n    function assetClassConfig(bytes4 assetClass) external view returns (ClassConfig memory);\\n\\n    /**\\n     * @dev Checks asset class registration.\\n     * @param assetClass Asset class ID.\\n     */\\n    function isRegisteredAssetClass(bytes4 assetClass) external view returns (bool);\\n\\n    /**\\n     * @dev Reverts if asset class is not registered.\\n     * @param assetClass Asset class ID.\\n     */\\n    function checkRegisteredAssetClass(bytes4 assetClass) external view;\\n}\\n\",\"keccak256\":\"0x4b99f467cb9759e776d68742f7c951ed10d8543e1d5ce5c1978948f56abaca98\",\"license\":\"MIT\"},\"contracts/asset/IAssetController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"./Assets.sol\\\";\\n\\ninterface IAssetController is IERC165 {\\n    /**\\n     * @dev Thrown when the asset has invalid class for specific operation.\\n     * @param provided Provided class ID.\\n     * @param required Required class ID.\\n     */\\n    error AssetClassMismatch(bytes4 provided, bytes4 required);\\n\\n    /**\\n     * @dev Emitted when asset is transferred.\\n     * @param asset Asset being transferred.\\n     * @param from Asset sender.\\n     * @param to Asset recipient.\\n     * @param data Auxiliary data.\\n     */\\n    event AssetTransfer(Assets.Asset asset, address indexed from, address indexed to, bytes data);\\n\\n    /**\\n     * @dev Returns controller asset class.\\n     * @return Asset class ID.\\n     */\\n    function assetClass() external pure returns (bytes4);\\n\\n    /**\\n     * @dev Transfers asset.\\n     * Emits a {AssetTransfer} event.\\n     * @param asset Asset being transferred.\\n     * @param from Asset sender.\\n     * @param to Asset recipient.\\n     * @param data Auxiliary data.\\n     */\\n    function transfer(\\n        Assets.Asset memory asset,\\n        address from,\\n        address to,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @dev Transfers asset from owner to the vault contract.\\n     * @param asset Asset being transferred.\\n     * @param assetOwner Original asset owner address.\\n     * @param vault Asset vault contract address.\\n     */\\n    function transferAssetToVault(\\n        Assets.Asset memory asset,\\n        address assetOwner,\\n        address vault\\n    ) external;\\n\\n    /**\\n     * @dev Transfers asset from the vault contract to the original owner.\\n     * @param asset Asset being transferred.\\n     * @param vault Asset vault contract address.\\n     */\\n    function returnAssetFromVault(Assets.Asset memory asset, address vault) external;\\n\\n    /**\\n     * @dev Decodes asset ID structure and returns collection identifier.\\n     * The collection ID is byte32 value which is calculated based on the asset class.\\n     * For example, ERC721 collection can be identified by address only,\\n     * but for ERC1155 it should be calculated based on address and token ID.\\n     * @return Collection ID.\\n     */\\n    function collectionId(Assets.AssetId memory assetId) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x969de0db075f8ef647225e280bf0d4e8d6c09bf003666e00234379883b739c21\",\"license\":\"MIT\"},\"contracts/asset/IAssetVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IAssetVault is IERC165 {\\n    /**\\n     * @dev Thrown when the asset is not is found among vault inventory.\\n     */\\n    error AssetNotFound();\\n\\n    /**\\n     * @dev Thrown when the function is called on the vault in recovery mode.\\n     */\\n    error VaultIsInRecoveryMode();\\n\\n    /**\\n     * @dev Thrown when the asset return is not allowed, due to the vault state or the caller permissions.\\n     */\\n    error AssetReturnIsNotAllowed();\\n\\n    /**\\n     * @dev Thrown when the asset deposit is not allowed, due to the vault state or the caller permissions.\\n     */\\n    error AssetDepositIsNotAllowed();\\n\\n    /**\\n     * @dev Emitted when the vault is switched to recovery mode by `account`.\\n     */\\n    event RecoveryModeActivated(address account);\\n\\n    /**\\n     * @dev Activates asset recovery mode.\\n     * Emits a {RecoveryModeActivated} event.\\n     */\\n    function switchToRecoveryMode() external;\\n\\n    /**\\n     * @notice Send ERC20 tokens to an address.\\n     */\\n    function withdrawERC20Tokens(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @dev Pauses the vault.\\n     */\\n    function pause() external;\\n\\n    /**\\n     * @dev Unpauses the vault.\\n     */\\n    function unpause() external;\\n\\n    /**\\n     * @dev Returns vault asset class.\\n     * @return Asset class ID.\\n     */\\n    function assetClass() external pure returns (bytes4);\\n\\n    /**\\n     * @dev Returns the Metahub address.\\n     */\\n    function metahub() external view returns (address);\\n\\n    /**\\n     * @dev Returns vault recovery mode flag state.\\n     * @return True when the vault is in recovery mode.\\n     */\\n    function isRecovery() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xccd3b4cfc09ad99705906d474e6147ddd18b0ebb4b9dd397c6b5979b72c4da45\",\"license\":\"MIT\"},\"contracts/asset/utils/DelegateContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nabstract contract DelegateContext {\\n    /**\\n     * @dev Thrown when a function is called directly and not through a delegatecall.\\n     */\\n    error FunctionMustBeCalledThroughDelegatecall();\\n\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call.\\n     */\\n    modifier onlyDelegatecall() {\\n        if (address(this) == __self) revert FunctionMustBeCalledThroughDelegatecall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xd6a19f3cb76cb636655ad82a8c7f7d25934620e47d4956efbfaf17b3d0d2c42d\",\"license\":\"MIT\"},\"contracts/listing/IListingController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\nimport \\\"./Listings.sol\\\";\\nimport \\\"../renting/Rentings.sol\\\";\\n\\ninterface IListingController is IERC165 {\\n    /**\\n     * @dev Thrown when the listing strategy ID does not match the required one.\\n     * @param provided Provided listing strategy ID.\\n     * @param required Required listing strategy ID.\\n     */\\n    error ListingStrategyMismatch(bytes4 provided, bytes4 required);\\n\\n    /**\\n     * @dev Returns implemented strategy ID.\\n     * @return Listing strategy ID.\\n     */\\n    function strategyId() external pure returns (bytes4);\\n\\n    /**\\n     * @dev Calculates rental fee based on renting params and implemented listing strategy.\\n     * @param listingParams Listing strategy params.\\n     * @param rentingParams Renting params.\\n     * @return Asset rental fee (base tokens per second).\\n     */\\n    function calculateRentalFee(Listings.Params calldata listingParams, Rentings.Params calldata rentingParams)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x450df21410d0282e10e92882d8590e48a73c22057025ed557f3bd90cfc4c71b8\",\"license\":\"MIT\"},\"contracts/listing/IListingStrategyRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Listings.sol\\\";\\nimport \\\"./IListingController.sol\\\";\\n\\ninterface IListingStrategyRegistry {\\n    /**\\n     * @dev Thrown when listing controller does not implement the required interface.\\n     */\\n    error InvalidListingControllerInterface();\\n\\n    /**\\n     * @dev Thrown when the listing cannot be processed by the specific controller due to the listing strategy ID\\n     * mismatch.\\n     * @param provided Provided listing strategy ID.\\n     * @param required Required listing strategy ID.\\n     */\\n    error ListingStrategyMismatch(bytes4 provided, bytes4 required);\\n\\n    /**\\n     * @dev Thrown upon attempting to register a listing strategy twice.\\n     * @param strategyId Duplicate listing strategy ID.\\n     */\\n    error ListingStrategyIsAlreadyRegistered(bytes4 strategyId);\\n\\n    /**\\n     * @dev Thrown upon attempting to work with unregistered listing strategy.\\n     * @param strategyId Listing strategy ID.\\n     */\\n    error UnregisteredListingStrategy(bytes4 strategyId);\\n\\n    /**\\n     * @dev Emitted when the new listing strategy is registered.\\n     * @param strategyId Listing strategy ID.\\n     * @param controller Controller address.\\n     */\\n    event ListingStrategyRegistered(bytes4 indexed strategyId, address indexed controller);\\n\\n    /**\\n     * @dev Emitted when the listing strategy controller is changed.\\n     * @param strategyId Listing strategy ID.\\n     * @param newController Controller address.\\n     */\\n    event ListingStrategyControllerChanged(bytes4 indexed strategyId, address indexed newController);\\n\\n    /**\\n     * @dev Listing strategy information.\\n     * @param controller Listing controller address.\\n     */\\n    struct StrategyConfig {\\n        address controller;\\n    }\\n\\n    /**\\n     * @dev Registers new listing strategy.\\n     * @param strategyId Listing strategy ID.\\n     * @param config Listing strategy configuration.\\n     */\\n    function registerListingStrategy(bytes4 strategyId, StrategyConfig calldata config) external;\\n\\n    /**\\n     * @dev Sets listing strategy controller.\\n     * @param strategyId Listing strategy ID.\\n     * @param controller Listing controller address.\\n     */\\n    function setListingController(bytes4 strategyId, address controller) external;\\n\\n    /**\\n     * @dev Returns listing strategy configuration.\\n     * @param strategyId Listing strategy ID.\\n     * @return Listing strategy information.\\n     */\\n    function listingStrategy(bytes4 strategyId) external view returns (StrategyConfig memory);\\n\\n    /**\\n     * @dev Returns listing strategy controller.\\n     * @param strategyId Listing strategy ID.\\n     * @return Listing controller address.\\n     */\\n    function listingController(bytes4 strategyId) external view returns (address);\\n\\n    /**\\n     * @dev Checks listing strategy registration.\\n     * @param strategyId Listing strategy ID.\\n     */\\n    function isRegisteredListingStrategy(bytes4 strategyId) external view returns (bool);\\n\\n    /**\\n     * @dev Reverts if listing strategy is not registered.\\n     * @param strategyId Listing strategy ID.\\n     */\\n    function checkRegisteredListingStrategy(bytes4 strategyId) external view;\\n}\\n\",\"keccak256\":\"0x7c0a0d99b16f4686b522674d1976a4b4774fa888a94100195a3091237582f4bd\",\"license\":\"MIT\"},\"contracts/listing/Listings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\n\\nimport \\\"../asset/Assets.sol\\\";\\nimport \\\"./IListingController.sol\\\";\\nimport \\\"./IListingStrategyRegistry.sol\\\";\\n\\nlibrary Listings {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n    using Listings for Registry;\\n    using Listings for Listing;\\n    using Assets for Assets.Asset;\\n\\n    /**\\n     * @dev Thrown when the `listingId` is invalid or the asset has been delisted.\\n     */\\n    error NotListed(uint256 listingId);\\n\\n    /**\\n     * @dev Thrown when the `listingId` has never been registered.\\n     */\\n    error ListingIsNotRegistered(uint256 listingId);\\n\\n    /**\\n     * @dev Thrown when the operation is not allowed due to the listing being paused.\\n     */\\n    error ListingIsPaused();\\n\\n    /**\\n     * @dev Thrown when the operation is not allowed due to the listing not being paused.\\n     */\\n    error ListingIsNotPaused();\\n\\n    /**\\n     * @dev Thrown when attempting to lock the listed asset for the period longer than the lister allowed.\\n     */\\n    error InvalidLockPeriod(uint32 period);\\n\\n    /**\\n     * @dev Thrown when the listing strategy is not registered or deprecated.\\n     * @param strategyId Unsupported listing strategy ID.\\n     */\\n    error UnsupportedListingStrategy(bytes4 strategyId);\\n\\n    /**\\n     * @dev Thrown when the operation is not allowed due to the listing group being nonempty.\\n     * @param listingGroupId Listing group ID.\\n     */\\n    error ListingGroupIsNotEmpty(uint256 listingGroupId);\\n\\n    /**\\n     * @dev Thrown when the provided `account` doesn't match the listing group owner address.\\n     * @param listingGroupId Listing group ID.\\n     * @param account Invalid owner account.\\n     */\\n    error InvalidListingGroupOwner(uint256 listingGroupId, address account);\\n\\n    /*\\n     * @dev Listing strategy identifiers to be used across the system:\\n     */\\n    bytes4 public constant FIXED_PRICE = bytes4(keccak256(\\\"FIXED_PRICE\\\"));\\n    bytes4 public constant FIXED_PRICE_WITH_REWARD = bytes4(keccak256(\\\"FIXED_PRICE_WITH_REWARD\\\"));\\n\\n    /**\\n     * @dev Listing params.\\n     * The layout of `data` might vary for different listing strategies.\\n     * For example, in case of FIXED_PRICE strategy, the `data` might contain only base rate,\\n     * and for more advanced auction strategies it might include period, min bid step etc.\\n     * @param strategy Listing strategy ID\\n     * @param data Listing strategy data.\\n     */\\n    struct Params {\\n        bytes4 strategy;\\n        bytes data;\\n    }\\n\\n    /**\\n     * @dev Listing structure.\\n     * @param asset Listed asset structure.\\n     * @param params Listing strategy parameters.\\n     * @param lister Lister account address.\\n     * @param maxLockPeriod The maximum amount of time the asset owner can wait before getting the asset back.\\n     * @param lockedTill The earliest possible time when the asset can be returned to the owner.\\n     * @param immediatePayout Indicates whether the rental fee must be transferred to the lister on every renting.\\n     * If FALSE, the rental fees get accumulated until withdrawn manually.\\n     * @param delisted Indicates whether the asset is delisted.\\n     * @param paused Indicates whether the listing is paused.\\n     * @param groupId Listing group ID.\\n     */\\n    struct Listing {\\n        // slots 0-2\\n        Assets.Asset asset;\\n        // slot 3-4\\n        Params params;\\n        // slot 5 (1 byte)\\n        address lister;\\n        uint32 maxLockPeriod;\\n        uint32 lockedTill;\\n        bool immediatePayout;\\n        bool delisted;\\n        bool paused;\\n        // slot 6\\n        uint256 groupId;\\n    }\\n\\n    /**\\n     * @dev Listing related data associated with the specific account.\\n     * @param listingIndex The set of listing IDs.\\n     * @param listingGroupIndex The set of listing group IDs.\\n     */\\n    struct ListerInfo {\\n        EnumerableSetUpgradeable.UintSet listingIndex;\\n        EnumerableSetUpgradeable.UintSet listingGroupIndex;\\n    }\\n\\n    /**\\n     * @dev Listing related data associated with the specific account.\\n     * @param listingIndex The set of listing IDs.\\n     */\\n    struct AssetInfo {\\n        EnumerableSetUpgradeable.UintSet listingIndex;\\n    }\\n\\n    /**\\n     * @dev Listing group information.\\n     * @param name The listing group name.\\n     * @param owner The listing group owner address.\\n     * @param listingIndex The set of listing IDs which belong to the group.\\n     */\\n    struct ListingGroupInfo {\\n        string name;\\n        address owner;\\n        EnumerableSetUpgradeable.UintSet listingIndex;\\n    }\\n\\n    /**\\n     * @dev Listing registry.\\n     * @param idTracker Listing ID tracker (incremental counter).\\n     * @param strategyRegistry Listing strategy registry contract.\\n     * @param listingIndex The global set of registered listing IDs.\\n     * @param listings Mapping from listing ID to the listing info.\\n     * @param listers Mapping from lister address to the lister info.\\n     * @param assets Mapping from an asset address to the asset info.\\n     * @param listingGroups Mapping from listing group ID to the listing group info.\\n     */\\n    struct Registry {\\n        CountersUpgradeable.Counter listingIdTracker;\\n        IListingStrategyRegistry strategyRegistry;\\n        EnumerableSetUpgradeable.UintSet listingIndex;\\n        mapping(uint256 => Listing) listings;\\n        mapping(address => ListerInfo) listers;\\n        mapping(address => AssetInfo) assets;\\n        CountersUpgradeable.Counter listingGroupIdTracker;\\n        mapping(uint256 => ListingGroupInfo) listingGroups;\\n    }\\n\\n    /**\\n     * @dev Puts the listing on pause.\\n     */\\n    function pause(Listing storage self) internal {\\n        if (self.paused) revert ListingIsPaused();\\n\\n        self.paused = true;\\n    }\\n\\n    /**\\n     * @dev Lifts the listing pause.\\n     */\\n    function unpause(Listing storage self) internal {\\n        if (!self.paused) revert ListingIsNotPaused();\\n\\n        self.paused = false;\\n    }\\n\\n    /**\\n     * Determines whether the listing is active.\\n     */\\n    function listed(Listing storage self) internal view returns (bool) {\\n        return self.lister != address(0) && !self.delisted;\\n    }\\n\\n    /**\\n     * @dev Reverts if the listing is paused.\\n     */\\n    function checkNotPaused(Listing storage self) internal view {\\n        if (self.paused) revert ListingIsPaused();\\n    }\\n\\n    /*\\n     * @dev Validates lock period.\\n     */\\n    function isValidLockPeriod(Listing storage self, uint32 lockPeriod) internal view returns (bool) {\\n        return (lockPeriod > 0 && lockPeriod <= self.maxLockPeriod);\\n    }\\n\\n    /**\\n     * @dev Reverts if the lock period is not valid.\\n     */\\n    function checkValidLockPeriod(Listing storage self, uint32 lockPeriod) internal view {\\n        if (!self.isValidLockPeriod(lockPeriod)) revert InvalidLockPeriod(lockPeriod);\\n    }\\n\\n    /**\\n     * @dev Extends listing lock time.\\n     * Does not modify the state if current lock time is larger.\\n     */\\n    function addLock(Listing storage self, uint32 unlockTimestamp) internal {\\n        // Listing is already locked till later time, no need to extend locking period.\\n        if (self.lockedTill >= unlockTimestamp) return;\\n        // Extend listing lock.\\n        self.lockedTill = unlockTimestamp;\\n    }\\n\\n    /**\\n     * @dev Registers new listing group.\\n     * @param name The listing group name.\\n     * @param owner The listing group owner address.\\n     * @return listingGroupId New listing group ID.\\n     */\\n    function registerListingGroup(\\n        Registry storage self,\\n        string memory name,\\n        address owner\\n    ) external returns (uint256 listingGroupId) {\\n        listingGroupId = _registerListingGroup(self, name, owner);\\n    }\\n\\n    /**\\n     * @dev Removes listing group data.\\n     * @param listingGroupId The ID of the listing group to be deleted.\\n     */\\n    function removeListingGroup(Registry storage self, uint256 listingGroupId) external {\\n        ListingGroupInfo storage listingGroup = self.listingGroups[listingGroupId];\\n\\n        // Deleting nonempty listing groups is forbidden.\\n        if (listingGroup.listingIndex.length() > 0) revert ListingGroupIsNotEmpty(listingGroupId);\\n\\n        // Remove the listing group ID from the user account data.\\n        self.listers[listingGroup.owner].listingGroupIndex.remove(listingGroupId);\\n\\n        // Delete listing group.\\n        delete self.listingGroups[listingGroupId];\\n    }\\n\\n    /**\\n     * @dev Registers new listing.\\n     * @return listingId New listing ID.\\n     * @return listingGroupId Effective listing group ID.\\n     */\\n    function register(Registry storage self, Listing memory listing)\\n        external\\n        returns (uint256 listingId, uint256 listingGroupId)\\n    {\\n        // Generate new listing ID.\\n        self.listingIdTracker.increment();\\n        listingId = self.listingIdTracker.current();\\n\\n        // Listing is being added to an existing group.\\n        if (listing.groupId != 0) {\\n            listingGroupId = listing.groupId;\\n            self.checkListingGroupOwner(listingGroupId, listing.lister);\\n        } else {\\n            // Otherwise the new listing group is created and the listing is added to this group by default.\\n            listingGroupId = _registerListingGroup(self, \\\"\\\", listing.lister);\\n            listing.groupId = listingGroupId;\\n        }\\n\\n        // Add new listing ID to the global index.\\n        self.listingIndex.add(listingId);\\n        // Add new listing ID to the listing group index.\\n        self.listingGroups[listingGroupId].listingIndex.add(listingId);\\n        // Add user listing data.\\n        self.listers[listing.lister].listingIndex.add(listingId);\\n        // Add asset listing data.\\n        self.assets[listing.asset.token()].listingIndex.add(listingId);\\n        // Store new listing record.\\n        self.listings[listingId] = listing;\\n    }\\n\\n    /**\\n     * @dev Removes listing data.\\n     * @param listingId The ID of the listing to be deleted.\\n     */\\n    function remove(Registry storage self, uint256 listingId) external {\\n        address lister = self.listings[listingId].lister;\\n        address original = self.listings[listingId].asset.token();\\n        uint256 listingGroupId = self.listings[listingId].groupId;\\n\\n        // Remove the listing ID from the global index.\\n        self.listingIndex.remove(listingId);\\n        // Remove the listing ID from the group index.\\n        self.listingGroups[listingGroupId].listingIndex.remove(listingId);\\n        // Remove user listing data.\\n        self.listers[lister].listingIndex.remove(listingId);\\n        // Remove asset listing data.\\n        self.assets[original].listingIndex.remove(listingId);\\n        // Delete listing.\\n        delete self.listings[listingId];\\n    }\\n\\n    /**\\n     * @dev Returns the paginated list of currently registered listings.\\n     */\\n    function allListings(\\n        Registry storage self,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (uint256[] memory, Listing[] memory) {\\n        return self.paginateIndexedListings(self.listingIndex, offset, limit);\\n    }\\n\\n    /**\\n     * @dev Returns the paginated list of currently registered listings for the particular lister account.\\n     */\\n    function userListings(\\n        Registry storage self,\\n        address lister,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (uint256[] memory, Listing[] memory) {\\n        return self.paginateIndexedListings(self.listers[lister].listingIndex, offset, limit);\\n    }\\n\\n    /**\\n     * @dev Returns the paginated list of currently registered listings for the original asset.\\n     */\\n    function assetListings(\\n        Registry storage self,\\n        address original,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (uint256[] memory, Listing[] memory) {\\n        return self.paginateIndexedListings(self.assets[original].listingIndex, offset, limit);\\n    }\\n\\n    /**\\n     * @dev Reverts if listing has not been registered.\\n     * @param listingId Listing ID.\\n     */\\n    function checkRegisteredListing(Registry storage self, uint256 listingId) external view {\\n        if (!self.isRegisteredListing(listingId)) revert ListingIsNotRegistered(listingId);\\n    }\\n\\n    /**\\n     * @dev Reverts if the provided `account` doesn't match the listing group owner address.\\n     * @param listingGroupId Listing group ID.\\n     * @param account The account to check ownership for.\\n     */\\n    function checkListingGroupOwner(\\n        Registry storage self,\\n        uint256 listingGroupId,\\n        address account\\n    ) internal view {\\n        if (self.listingGroups[listingGroupId].owner != account)\\n            revert InvalidListingGroupOwner(listingGroupId, account);\\n    }\\n\\n    /**\\n     * @dev Checks listing registration by ID.\\n     * @param listingId Listing ID.\\n     */\\n    function isRegisteredListing(Registry storage self, uint256 listingId) internal view returns (bool) {\\n        return self.listings[listingId].lister != address(0);\\n    }\\n\\n    /**\\n     * @dev Reverts if listing strategy is not supported.\\n     * @param strategyId Listing strategy ID.\\n     */\\n    function checkSupportedListingStrategy(Registry storage self, bytes4 strategyId) internal view {\\n        if (!self.strategyRegistry.isRegisteredListingStrategy(strategyId))\\n            revert UnsupportedListingStrategy(strategyId);\\n    }\\n\\n    /**\\n     * @dev Returns listing controller for strategy.\\n     * @param strategyId Listing strategy ID.\\n     */\\n    function listingController(Registry storage self, bytes4 strategyId) internal view returns (IListingController) {\\n        return IListingController(self.strategyRegistry.listingController(strategyId));\\n    }\\n\\n    /**\\n     * @dev Reverts if listing is not registered or has been already delisted.\\n     * @param listingId Listing ID.\\n     */\\n    function checkListed(Registry storage self, uint256 listingId) internal view {\\n        if (!self.listings[listingId].listed()) revert NotListed(listingId);\\n    }\\n\\n    /**\\n     * @dev Returns the number of currently registered listings.\\n     */\\n    function listingCount(Registry storage self) internal view returns (uint256) {\\n        return self.listingIndex.length();\\n    }\\n\\n    /**\\n     * @dev Returns the number of currently registered listings for a particular lister account.\\n     */\\n    function userListingCount(Registry storage self, address lister) internal view returns (uint256) {\\n        return self.listers[lister].listingIndex.length();\\n    }\\n\\n    /**\\n     * @dev Returns the number of currently registered listings for a particular original asset.\\n     */\\n    function assetListingCount(Registry storage self, address original) internal view returns (uint256) {\\n        return self.assets[original].listingIndex.length();\\n    }\\n\\n    /**\\n     * @dev Returns the paginated list of currently registered listing using provided index reference.\\n     */\\n    function paginateIndexedListings(\\n        Registry storage self,\\n        EnumerableSetUpgradeable.UintSet storage listingIndex,\\n        uint256 offset,\\n        uint256 limit\\n    ) internal view returns (uint256[] memory, Listing[] memory) {\\n        uint256 indexSize = listingIndex.length();\\n        if (offset >= indexSize) return (new uint256[](0), new Listing[](0));\\n\\n        if (limit > indexSize - offset) {\\n            limit = indexSize - offset;\\n        }\\n\\n        Listing[] memory listings = new Listing[](limit);\\n        uint256[] memory listingIds = new uint256[](limit);\\n        for (uint256 i = 0; i < limit; i++) {\\n            listingIds[i] = listingIndex.at(offset + i);\\n            listings[i] = self.listings[listingIds[i]];\\n        }\\n\\n        return (listingIds, listings);\\n    }\\n\\n    /**\\n     * @dev Registers new listing group.\\n     * @param name The listing group name.\\n     * @param owner The listing group owner address.\\n     * @return listingGroupId New listing group ID.\\n     */\\n    function _registerListingGroup(\\n        Registry storage self,\\n        string memory name,\\n        address owner\\n    ) private returns (uint256 listingGroupId) {\\n        // Generate new listing group ID.\\n        self.listingGroupIdTracker.increment();\\n        listingGroupId = self.listingGroupIdTracker.current();\\n\\n        // Store new listing group record.\\n        self.listingGroups[listingGroupId].name = name;\\n        self.listingGroups[listingGroupId].owner = owner;\\n\\n        // Associate the new listing group with the user account.\\n        self.listers[owner].listingGroupIndex.add(listingGroupId);\\n    }\\n}\\n\",\"keccak256\":\"0xb41279197997084b9fa5466086ae81195f0fc98bd31973d46ca6ff2a2d50564a\",\"license\":\"MIT\"},\"contracts/metahub/Protocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nlibrary Protocol {\\n    /**\\n     * @dev Thrown when the provided token does not match with the configured base token.\\n     */\\n    error BaseTokenMismatch();\\n\\n    /**\\n     * @dev Protocol configuration.\\n     * @param baseToken ERC20 contract. Used as the price denominator.\\n     * @param rentalFeePercent The fixed part of the total rental fee paid to protocol.\\n     */\\n    struct Config {\\n        IERC20Upgradeable baseToken;\\n        uint16 rentalFeePercent;\\n    }\\n\\n    /**\\n     * @dev Reverts if the `token` does not match the base one.\\n     */\\n    function checkBaseToken(Config storage self, address token) internal view {\\n        if (token != address(self.baseToken)) revert BaseTokenMismatch();\\n    }\\n}\\n\",\"keccak256\":\"0x981192e9480fc9adbd64daf78e2fccc13c8a95c54d5698b41af8c51d7940a814\",\"license\":\"MIT\"},\"contracts/renting/IRentingManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Rentings.sol\\\";\\n\\ninterface IRentingManager {\\n    /**\\n     * @dev Thrown when the message sender doesn't match the renter address.\\n     */\\n    error CallerIsNotRenter();\\n\\n    /**\\n     * @dev Emitted when the warped asset is rented.\\n     * @param rentalId Rental agreement ID.\\n     * @param renter The renter account address.\\n     * @param listingId The corresponding ID of the original asset listing.\\n     * @param warpedAsset Rented warped asset.\\n     * @param startTime The rental agreement staring time.\\n     * @param endTime The rental agreement ending time.\\n     */\\n    event AssetRented(\\n        uint256 indexed rentalId,\\n        address indexed renter,\\n        uint256 indexed listingId,\\n        Assets.Asset warpedAsset,\\n        uint32 startTime,\\n        uint32 endTime\\n    );\\n\\n    /**\\n     * @dev Returns token amount from specific collection rented by particular account.\\n     * @param warpedCollectionId Warped collection ID.\\n     * @param renter The renter account address.\\n     * @return Rented value.\\n     */\\n    function collectionRentedValue(bytes32 warpedCollectionId, address renter) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the rental status of a given warped asset.\\n     * @param warpedAssetId Warped asset ID.\\n     * @return The asset rental status.\\n     */\\n    function assetRentalStatus(Assets.AssetId calldata warpedAssetId) external view returns (Rentings.RentalStatus);\\n\\n    /**\\n     * @dev Evaluates renting params and returns rental fee breakdown.\\n     * @param rentingParams Renting parameters.\\n     * @return Rental fee breakdown.\\n     */\\n    function estimateRent(Rentings.Params calldata rentingParams) external view returns (Rentings.RentalFees memory);\\n\\n    /**\\n     * @dev Performs renting operation.\\n     * @param rentingParams Renting parameters.\\n     * @param maxPaymentAmount Maximal payment amount the renter is willing to pay.\\n     * @return New rental ID.\\n     */\\n    function rent(Rentings.Params calldata rentingParams, uint256 maxPaymentAmount) external returns (uint256);\\n\\n    /**\\n     * @dev Returns the rental agreement details.\\n     * @param rentalId Rental agreement ID.\\n     * @return Rental agreement details.\\n     */\\n    function rentalAgreementInfo(uint256 rentalId) external view returns (Rentings.Agreement memory);\\n\\n    /**\\n     * @dev Returns the number of currently registered rental agreements for particular renter account.\\n     * @param renter Renter address.\\n     * @return Rental agreement count.\\n     */\\n    function userRentalCount(address renter) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the paginated list of currently registered rental agreements for particular renter account.\\n     * @param renter Renter address.\\n     * @param offset Starting index.\\n     * @param limit Max number of items.\\n     * @return Rental agreement IDs.\\n     * @return Rental agreements.\\n     */\\n    function userRentalAgreements(\\n        address renter,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (uint256[] memory, Rentings.Agreement[] memory);\\n}\\n\",\"keccak256\":\"0x90c6d2de81d5229c1441e1b9763533ba9d09642dc6c69a8b04156fdc7d3d1a4f\",\"license\":\"MIT\"},\"contracts/renting/Rentings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../asset/Assets.sol\\\";\\nimport \\\"../metahub/Protocol.sol\\\";\\nimport \\\"../listing/Listings.sol\\\";\\nimport \\\"../warper/Warpers.sol\\\";\\nimport \\\"../universe/IUniverseRegistry.sol\\\";\\n\\nlibrary Rentings {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n    using Rentings for RenterInfo;\\n    using Rentings for Agreement;\\n    using Rentings for Registry;\\n    using Assets for Assets.AssetId;\\n    using Protocol for Protocol.Config;\\n    using Listings for Listings.Registry;\\n    using Listings for Listings.Listing;\\n    using Warpers for Warpers.Registry;\\n    using Warpers for Warpers.Warper;\\n\\n    /**\\n     * A constant that represents one hundred percent for calculation.\\n     * This defines a calculation precision for percentage values as two decimals.\\n     * For example: 1 is 0.01%, 100 is 1%, 10_000 is 100%.\\n     */\\n    uint16 public constant HUNDRED_PERCENT = 10_000;\\n\\n    /**\\n     * @dev Thrown when a rental agreement is being registered for a specific warper ID,\\n     * while the previous rental agreement for this warper is still effective.\\n     */\\n    error RentalAgreementConflict(uint256 conflictingRentalId);\\n\\n    /**\\n     * @dev Thrown when attempting to delete effective rental agreement data (before expiration).\\n     */\\n    error CannotDeleteEffectiveRentalAgreement(uint256 rentalId);\\n\\n    /**\\n     * @dev Warper rental status.\\n     * NONE - means the warper had never been minted.\\n     * AVAILABLE - can be rented.\\n     * RENTED - currently rented.\\n     */\\n    enum RentalStatus {\\n        NONE,\\n        AVAILABLE,\\n        RENTED\\n    }\\n\\n    /**\\n     * @dev Defines the maximal allowed number of cycles when looking for expired rental agreements.\\n     */\\n    uint256 private constant _GC_CYCLES = 20;\\n\\n    /**\\n     * @dev Rental fee breakdown.\\n     */\\n    struct RentalFees {\\n        uint256 total;\\n        uint256 protocolFee;\\n        uint256 listerBaseFee;\\n        uint256 listerPremium;\\n        uint256 universeBaseFee;\\n        uint256 universePremium;\\n    }\\n\\n    /**\\n     * @dev Renting parameters structure.\\n     * It is used to encode all the necessary information to estimate and/or fulfill a particular renting request.\\n     * @param listingId Listing ID. Also allows to identify the asset being rented.\\n     * @param warper Warper address.\\n     * @param renter Renter address.\\n     * @param rentalPeriod Desired period of asset renting.\\n     * @param paymentToken The token address which renter offers as a mean of payment.\\n     */\\n    struct Params {\\n        uint256 listingId;\\n        address warper;\\n        address renter;\\n        uint32 rentalPeriod;\\n        address paymentToken;\\n    }\\n\\n    /**\\n     * @dev Rental agreement information.\\n     * @param warpedAsset Rented asset.\\n     * @param collectionId Warped collection ID.\\n     * @param listingId The corresponding ID of the original asset listing.\\n     * @param renter The renter account address.\\n     * @param startTime The rental agreement staring time. This is the timestamp after which the `renter`\\n     * considered to be an warped asset owner.\\n     * @param endTime The rental agreement ending time. After this timestamp, the rental agreement is terminated\\n     * and the `renter` is no longer the owner of the warped asset.\\n     * @param listingParams Selected listing parameters.\\n     */\\n    struct Agreement {\\n        // slots 0-2\\n        Assets.Asset warpedAsset;\\n        // slot 3\\n        bytes32 collectionId;\\n        // slot 4\\n        uint256 listingId;\\n        // slot 5 (4 bytes left)\\n        address renter;\\n        uint32 startTime;\\n        uint32 endTime;\\n        // slots 6-7\\n        Listings.Params listingParams;\\n    }\\n\\n    function isEffective(Agreement storage self) internal view returns (bool) {\\n        return self.endTime > uint32(block.timestamp);\\n    }\\n\\n    function duration(Agreement memory self) internal pure returns (uint32) {\\n        return self.endTime - self.startTime;\\n    }\\n\\n    /**\\n     * @dev Describes user specific renting information.\\n     * @param rentalIndex Renter's set of rental agreement IDs.\\n     * @param collectionRentalIndex Mapping from collection ID to the set of rental IDs.\\n     */\\n    struct RenterInfo {\\n        EnumerableSetUpgradeable.UintSet rentalIndex;\\n        mapping(bytes32 => EnumerableSetUpgradeable.UintSet) collectionRentalIndex;\\n    }\\n\\n    /**\\n     * @dev Describes asset specific renting information.\\n     * @param latestRentalId Holds the most recent rental agreement ID.\\n     */\\n    struct AssetInfo {\\n        uint256 latestRentalId; // NOTE: This must never be deleted during cleanup.\\n    }\\n\\n    /**\\n     * @dev Renting registry.\\n     * @param idTracker Rental agreement ID tracker (incremental counter).\\n     * @param agreements Mapping from rental ID to the rental agreement details.\\n     * @param renters Mapping from renter address to the user specific renting info.\\n     * @param assets Mapping from asset ID (byte32) to the asset specific renting info.\\n     */\\n    struct Registry {\\n        CountersUpgradeable.Counter idTracker;\\n        mapping(uint256 => Agreement) agreements;\\n        mapping(address => RenterInfo) renters;\\n        mapping(bytes32 => AssetInfo) assets;\\n    }\\n\\n    /**\\n     * @dev Returns the number of currently registered rental agreements for particular renter account.\\n     */\\n    function userRentalCount(Registry storage self, address renter) internal view returns (uint256) {\\n        return self.renters[renter].rentalIndex.length();\\n    }\\n\\n    /**\\n     * @dev Returns the paginated list of currently registered rental agreements for particular renter account.\\n     */\\n    function userRentalAgreements(\\n        Registry storage self,\\n        address renter,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (uint256[] memory, Rentings.Agreement[] memory) {\\n        EnumerableSetUpgradeable.UintSet storage userRentalIndex = self.renters[renter].rentalIndex;\\n        uint256 indexSize = userRentalIndex.length();\\n        if (offset >= indexSize) return (new uint256[](0), new Rentings.Agreement[](0));\\n\\n        if (limit > indexSize - offset) {\\n            limit = indexSize - offset;\\n        }\\n\\n        Rentings.Agreement[] memory agreements = new Rentings.Agreement[](limit);\\n        uint256[] memory rentalIds = new uint256[](limit);\\n        for (uint256 i = 0; i < limit; i++) {\\n            rentalIds[i] = userRentalIndex.at(offset + i);\\n            agreements[i] = self.agreements[rentalIds[i]];\\n        }\\n\\n        return (rentalIds, agreements);\\n    }\\n\\n    /**\\n     * @dev Finds expired user rental agreements associated with `collectionId` and deletes them.\\n     * Deletes only first N entries defined by `toBeRemoved` param.\\n     * The total number of cycles is capped by GC_CYCLES constant.\\n     */\\n    function deleteExpiredUserRentalAgreements(\\n        Registry storage self,\\n        address renter,\\n        bytes32 collectionId,\\n        uint256 toBeRemoved\\n    ) external {\\n        EnumerableSetUpgradeable.UintSet storage rentalIndex = self.renters[renter].collectionRentalIndex[collectionId];\\n        uint256 rentalCount = rentalIndex.length();\\n        if (rentalCount == 0 || toBeRemoved == 0) return;\\n\\n        uint256 maxCycles = rentalCount < _GC_CYCLES ? rentalCount : _GC_CYCLES;\\n        uint256 removed = 0;\\n\\n        for (uint256 i = 0; i < maxCycles; i++) {\\n            uint256 rentalId = rentalIndex.at(i);\\n\\n            if (!self.agreements[rentalId].isEffective()) {\\n                // Warning: we are iterating an array that we are also modifying!\\n                _removeRentalAgreement(self, rentalId);\\n                removed += 1;\\n                maxCycles -= 1; // This is so we account for reduced `rentalCount`.\\n\\n                // Stop iterating if we have cleaned up enough desired items.\\n                if (removed == toBeRemoved) break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs new rental agreement registration.\\n     */\\n    function register(Registry storage self, Agreement memory agreement) external returns (uint256 rentalId) {\\n        // Make sure the there is no active rentals for the warper ID.\\n        bytes32 assetId = agreement.warpedAsset.id.hash();\\n        uint256 latestRentalId = self.assets[assetId].latestRentalId;\\n        if (latestRentalId != 0 && self.agreements[latestRentalId].isEffective()) {\\n            revert RentalAgreementConflict(latestRentalId);\\n        }\\n\\n        // Generate new rental ID.\\n        self.idTracker.increment();\\n        rentalId = self.idTracker.current();\\n\\n        // Save new rental agreement.\\n        self.agreements[rentalId] = agreement;\\n\\n        // Update warper latest rental ID.\\n        self.assets[assetId].latestRentalId = rentalId;\\n\\n        // Update user rental data.\\n        self.renters[agreement.renter].rentalIndex.add(rentalId);\\n        self.renters[agreement.renter].collectionRentalIndex[agreement.collectionId].add(rentalId);\\n    }\\n\\n    /**\\n     * @dev Safely removes expired rental data from the registry.\\n     */\\n    function removeExpiredRentalAgreement(Registry storage self, uint256 rentalId) external {\\n        if (self.agreements[rentalId].isEffective()) revert CannotDeleteEffectiveRentalAgreement(rentalId);\\n        _removeRentalAgreement(self, rentalId);\\n    }\\n\\n    /**\\n     * @dev Removes rental data from the registry.\\n     */\\n    function _removeRentalAgreement(Registry storage self, uint256 rentalId) private {\\n        address renter = self.agreements[rentalId].renter;\\n        bytes32 collectionId = self.agreements[rentalId].collectionId;\\n\\n        // Remove user rental data.\\n        self.renters[renter].rentalIndex.remove(rentalId);\\n        self.renters[renter].collectionRentalIndex[collectionId].remove(rentalId);\\n\\n        // Delete rental agreement.\\n        delete self.agreements[rentalId];\\n    }\\n\\n    /**\\n     * @dev Finds all effective rental agreements from specific collection.\\n     * Returns the total value rented by `renter`.\\n     */\\n    function collectionRentedValue(\\n        Registry storage self,\\n        address renter,\\n        bytes32 collectionId\\n    ) external view returns (uint256 value) {\\n        EnumerableSetUpgradeable.UintSet storage rentalIndex = self.renters[renter].collectionRentalIndex[collectionId];\\n        uint256 length = rentalIndex.length();\\n        for (uint256 i = 0; i < length; i++) {\\n            Agreement storage agreement = self.agreements[rentalIndex.at(i)];\\n            if (agreement.isEffective()) {\\n                value += agreement.warpedAsset.value;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns asset rental status based on latest rental agreement.\\n     */\\n    function assetRentalStatus(Registry storage self, Assets.AssetId memory assetId)\\n        external\\n        view\\n        returns (RentalStatus)\\n    {\\n        uint256 latestRentalId = self.assets[assetId.hash()].latestRentalId;\\n        if (latestRentalId == 0) return RentalStatus.NONE;\\n\\n        return self.agreements[latestRentalId].isEffective() ? RentalStatus.RENTED : RentalStatus.AVAILABLE;\\n    }\\n\\n    /**\\n     * @dev Main renting request validation function.\\n     */\\n    function validateRentingParams(\\n        Params calldata params,\\n        Protocol.Config storage protocolConfig,\\n        Listings.Registry storage listingRegistry,\\n        IWarperManager warperManager\\n    ) external view {\\n        // Validate from the protocol perspective.\\n        protocolConfig.checkBaseToken(params.paymentToken);\\n\\n        // Validate from the listing perspective.\\n        listingRegistry.checkListed(params.listingId);\\n        Listings.Listing storage listing = listingRegistry.listings[params.listingId];\\n        listing.checkNotPaused();\\n        listing.checkValidLockPeriod(params.rentalPeriod);\\n\\n        // Validate from the warper perspective.\\n        warperManager.checkRegisteredWarper(params.warper);\\n        Warpers.Warper memory warper = warperManager.warperInfo(params.warper);\\n        warper.checkCompatibleAsset(listing.asset);\\n        warper.checkNotPaused();\\n        warper.controller.validateRentingParams(listing.asset, params);\\n    }\\n\\n    /**\\n     * @dev Performs rental fee calculation and returns the fee breakdown.\\n     */\\n    function calculateRentalFees(\\n        Params calldata rentingParams,\\n        Protocol.Config storage protocolConfig,\\n        Listings.Registry storage listingRegistry,\\n        IWarperManager warperManager,\\n        IUniverseRegistry universeRegistry\\n    ) external view returns (RentalFees memory fees) {\\n        // Calculate lister base fee.\\n        Listings.Listing storage listing = listingRegistry.listings[rentingParams.listingId];\\n        Listings.Params memory listingParams = listing.params;\\n        // Resolve listing controller to calculate lister fee based on selected listing strategy.\\n        IListingController listingController = listingRegistry.listingController(listingParams.strategy);\\n        fees.listerBaseFee = listingController.calculateRentalFee(listingParams, rentingParams);\\n\\n        // Calculate universe base fee.\\n        Warpers.Warper memory warper = warperManager.warperInfo(rentingParams.warper);\\n        uint16 universeRentalFeePercent = universeRegistry.universeRentalFeePercent(warper.universeId);\\n        fees.universeBaseFee = (fees.listerBaseFee * universeRentalFeePercent) / HUNDRED_PERCENT;\\n\\n        // Calculate protocol fee.\\n        fees.protocolFee = (fees.listerBaseFee * protocolConfig.rentalFeePercent) / HUNDRED_PERCENT;\\n\\n        // Calculate warper premiums.\\n        (uint256 universePremium, uint256 listerPremium) = warper.controller.calculatePremiums(\\n            listing.asset,\\n            rentingParams,\\n            fees.universeBaseFee,\\n            fees.listerBaseFee\\n        );\\n        fees.listerPremium = listerPremium;\\n        fees.universePremium = universePremium;\\n\\n        // Calculate TOTAL rental fee.\\n        fees.total += fees.listerBaseFee + listerPremium;\\n        fees.total += fees.universeBaseFee + universePremium;\\n        fees.total += fees.protocolFee;\\n    }\\n}\\n\",\"keccak256\":\"0x343ea87d62e458129b66d40033a33d0eed7d83016a608df2e1033b6b366625c8\",\"license\":\"MIT\"},\"contracts/universe/IUniverseRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IUniverseRegistry {\\n    /**\\n     * @dev Thrown when a check is made where the given account must also be the universe owner.\\n     */\\n    error AccountIsNotUniverseOwner(address account);\\n\\n    /**\\n     * @dev Thrown when a the supplied universe name is empty.\\n     */\\n    error EmptyUniverseName();\\n\\n    /**\\n     * @dev Thrown when trying to read universe data for a universe is not registered.\\n     */\\n    error QueryForNonexistentUniverse(uint256 universeId);\\n\\n    /**\\n     * @dev Emitted when a universe is created.\\n     * @param universeId Universe ID.\\n     * @param name Universe name.\\n     */\\n    event UniverseCreated(uint256 indexed universeId, string name);\\n\\n    /**\\n     * @dev Emitted when a universe name is changed.\\n     * @param universeId Universe ID.\\n     * @param name The newly set name.\\n     */\\n    event UniverseNameChanged(uint256 indexed universeId, string name);\\n\\n    /**\\n     * @dev Emitted when universe rental fee is changed.\\n     * @param universeId Universe ID.\\n     * @param rentalFeePercent The newly rental fee.\\n     */\\n    event UniverseRentalFeeChanged(uint256 indexed universeId, uint16 rentalFeePercent);\\n\\n    /**\\n     * @dev Updates the universe token base URI.\\n     * @param baseURI New base URI. Must include a trailing slash (\\\"/\\\").\\n     */\\n    function setUniverseTokenBaseURI(string calldata baseURI) external;\\n\\n    /**\\n     * @dev The universe properties & initial configuration params.\\n     * @param name The universe name.\\n     * @param rentalFeePercent The base percentage of the rental fee which the universe charges for using its warpers.\\n     */\\n    struct UniverseParams {\\n        string name;\\n        uint16 rentalFeePercent;\\n    }\\n\\n    /**\\n     * @dev Creates new Universe. This includes minting new universe NFT,\\n     * where the caller of this method becomes the universe owner.\\n     * @param params The universe properties & initial configuration params.\\n     * @return Universe ID (universe token ID).\\n     */\\n    function createUniverse(UniverseParams calldata params) external returns (uint256);\\n\\n    /**\\n     * @dev Update the universe name.\\n     * @param universeId The unique identifier for the universe.\\n     * @param universeName The universe name to set.\\n     */\\n    function setUniverseName(uint256 universeId, string memory universeName) external;\\n\\n    /**\\n     * @dev Update the universe rental fee percent.\\n     * @param universeId The unique identifier for the universe.\\n     * @param rentalFeePercent The universe rental fee percent.\\n     */\\n    function setUniverseRentalFeePercent(uint256 universeId, uint16 rentalFeePercent) external;\\n\\n    /**\\n     * @dev Returns Universe owner address.\\n     * @param universeId Universe ID.\\n     * @return Universe owner.\\n     */\\n    function universeOwner(uint256 universeId) external view returns (address);\\n\\n    /**\\n     * @dev Returns Universe rental fee percent.\\n     * @param universeId Universe ID.\\n     * @return universe fee percent.\\n     */\\n    function universeRentalFeePercent(uint256 universeId) external view returns (uint16);\\n\\n    /**\\n     * @dev Returns name.\\n     * @param universeId Universe ID.\\n     * @return universe name.\\n     */\\n    function universeName(uint256 universeId) external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Universe token address.\\n     */\\n    function universeToken() external view returns (address);\\n\\n    /**\\n     * @dev Returns the Universe token base URI.\\n     */\\n    function universeTokenBaseURI() external view returns (string memory);\\n\\n    /**\\n     * @dev Aggregate and return Universe data.\\n     * @param universeId Universe-specific ID.\\n     * @return name The name of the universe.\\n     * @return rentalFeePercent The base percentage of the rental fee which the universe charges for using its warpers.\\n     */\\n    function universe(uint256 universeId) external view returns (string memory name, uint16 rentalFeePercent);\\n\\n    /**\\n     * @dev Reverts if the universe owner is not the provided account address.\\n     * @param universeId Universe ID.\\n     * @param account The address of the expected owner.\\n     */\\n    function checkUniverseOwner(uint256 universeId, address account) external view;\\n\\n    /**\\n     * @dev Returns `true` if the universe owner is the supplied account address.\\n     * @param universeId Universe ID.\\n     * @param account The address of the expected owner.\\n     */\\n    function isUniverseOwner(uint256 universeId, address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbddbae752718cef93b06632f87b96e562185ba72a526de96d7626e14a87864ac\",\"license\":\"MIT\"},\"contracts/warper/ERC721/ERC721WarperController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable code-complexity\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../asset/ERC721/ERC721AssetController.sol\\\";\\nimport \\\"../../accounting/Accounts.sol\\\";\\nimport \\\"../../renting/IRentingManager.sol\\\";\\nimport \\\"../mechanics/availability-period/IAvailabilityPeriodMechanics.sol\\\";\\nimport \\\"../mechanics/rental-period/IRentalPeriodMechanics.sol\\\";\\nimport \\\"../mechanics/asset-rentability/IAssetRentabilityMechanics.sol\\\";\\nimport \\\"../mechanics/rental-fee-premium/IRentalFeePremiumMechanics.sol\\\";\\nimport \\\"../mechanics/renting-hook/IRentingHookMechanics.sol\\\";\\nimport \\\"./IERC721WarperController.sol\\\";\\nimport \\\"./IERC721Warper.sol\\\";\\n\\ncontract ERC721WarperController is IERC721WarperController, ERC721AssetController {\\n    using Assets for Assets.Asset;\\n\\n    /**\\n     * @inheritdoc IWarperController\\n     * @dev Needs to be called with `delegatecall` from Metahub,\\n     * otherwise warpers will reject the call.\\n     */\\n    function warp(\\n        Assets.Asset calldata asset,\\n        address warper,\\n        address to\\n    ) external onlyDelegatecall returns (bytes32 warpedCollectionId, Assets.Asset memory warpedAsset) {\\n        _validateAsset(asset);\\n        (address original, uint256 tokenId) = _decodeAssetId(asset.id);\\n        // Make sure the correct warper is used for the asset.\\n        if (original != IWarper(warper).__original()) revert InvalidAssetForWarper(warper, original);\\n\\n        // Encode warped asset. The tokenId of the warped asset is identical to the original one,\\n        // but the address is changed to warper contract.\\n        warpedAsset = Assets.Asset(_encodeAssetId(warper, tokenId), asset.value);\\n        warpedCollectionId = _collectionId(warper);\\n\\n        // If the warped asset has never been rented before, create new instance, otherwise transfer existing one.\\n        if (rentalStatus(address(this), warper, tokenId) == Rentings.RentalStatus.NONE) {\\n            IERC721Warper(warper).mint(to, tokenId, new bytes(0));\\n        } else {\\n            _transferAsset(warpedAsset, address(this), to, new bytes(0));\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IWarperController\\n     */\\n    function executeRentingHooks(\\n        uint256 rentalId,\\n        Rentings.Agreement calldata rentalAgreement,\\n        Accounts.RentalEarnings calldata rentalEarnings\\n    ) external onlyDelegatecall {\\n        _validateAsset(rentalAgreement.warpedAsset);\\n        (address warper, uint256 tokenId) = _decodeAssetId(rentalAgreement.warpedAsset.id);\\n        if (IWarper(warper).supportsInterface(type(IRentingHookMechanics).interfaceId)) {\\n            (bool success, string memory errorMessage) = IRentingHookMechanics(warper).__onRent(\\n                rentalId,\\n                tokenId,\\n                rentalAgreement.warpedAsset.value,\\n                rentalAgreement,\\n                rentalEarnings\\n            );\\n            if (!success) revert IRentingHookMechanics.RentingHookError(errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IWarperController\\n     */\\n    function checkCompatibleWarper(address warper) external view {\\n        if (!isCompatibleWarper(warper)) revert IncompatibleWarperInterface();\\n    }\\n\\n    /**\\n     * @inheritdoc IWarperController\\n     */\\n    function validateRentingParams(Assets.Asset calldata asset, Rentings.Params calldata rentingParams) external view {\\n        _validateAsset(asset);\\n\\n        // Ensure the warped asset is not rented.\\n        address warper = rentingParams.warper;\\n        (, uint256 tokenId) = _decodeAssetId(asset.id);\\n        if (rentalStatus(IWarper(warper).__metahub(), warper, tokenId) == Rentings.RentalStatus.RENTED) {\\n            revert AlreadyRented();\\n        }\\n\\n        // Analyse warper functionality by checking the supported mechanics.\\n        bytes4[] memory mechanics = new bytes4[](3);\\n        mechanics[0] = type(IAvailabilityPeriodMechanics).interfaceId;\\n        mechanics[1] = type(IRentalPeriodMechanics).interfaceId;\\n        mechanics[2] = type(IAssetRentabilityMechanics).interfaceId;\\n        bool[] memory supportedMechanics = IWarper(warper).__supportedInterfaces(mechanics);\\n\\n        // Handle availability period mechanics.\\n        if (supportedMechanics[0]) {\\n            (uint32 start, uint32 end) = IAvailabilityPeriodMechanics(warper).__availabilityPeriodRange();\\n            if (block.timestamp < start || (block.timestamp + rentingParams.rentalPeriod) > end) {\\n                revert IAvailabilityPeriodMechanics.WarperIsNotAvailableForRenting(block.timestamp, start, end);\\n            }\\n        }\\n\\n        // Handle rental period mechanics.\\n        if (supportedMechanics[1]) {\\n            (uint32 min, uint32 max) = IRentalPeriodMechanics(warper).__rentalPeriodRange();\\n            if (rentingParams.rentalPeriod < min || rentingParams.rentalPeriod > max) {\\n                revert IRentalPeriodMechanics.WarperRentalPeriodIsOutOfRange(rentingParams.rentalPeriod, min, max);\\n            }\\n        }\\n\\n        // Handle asset rentability mechanics.\\n        if (supportedMechanics[2]) {\\n            (bool isRentable, string memory errorMessage) = IAssetRentabilityMechanics(warper).__isRentableAsset(\\n                rentingParams.renter,\\n                tokenId,\\n                asset.value\\n            );\\n            if (!isRentable) revert IAssetRentabilityMechanics.AssetIsNotRentable(errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IWarperController\\n     */\\n    function calculatePremiums(\\n        Assets.Asset calldata asset,\\n        Rentings.Params calldata rentingParams,\\n        uint256 universeFee,\\n        uint256 listerFee\\n    ) external view virtual returns (uint256 universePremium, uint256 listerPremium) {\\n        _validateAsset(asset);\\n        if (IWarper(rentingParams.warper).supportsInterface(type(IRentalFeePremiumMechanics).interfaceId)) {\\n            (, uint256 tokenId) = _decodeAssetId(asset.id);\\n            return\\n                IRentalFeePremiumMechanics(rentingParams.warper).__calculatePremiums(\\n                    rentingParams.renter,\\n                    tokenId,\\n                    asset.value,\\n                    rentingParams.rentalPeriod,\\n                    universeFee,\\n                    listerFee\\n                );\\n        }\\n        return (0, 0);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721WarperController\\n     */\\n    function rentalBalance(\\n        address metahub,\\n        address warper,\\n        address renter\\n    ) external view returns (uint256) {\\n        return IRentingManager(metahub).collectionRentedValue(_collectionId(warper), renter);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AssetController, IERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC721WarperController).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IWarperController\\n     */\\n    function isCompatibleWarper(address warper) public view returns (bool) {\\n        return IWarper(warper).supportsInterface(type(IERC721Warper).interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC721WarperController\\n     */\\n    function rentalStatus(\\n        address metahub,\\n        address warper,\\n        uint256 tokenId\\n    ) public view returns (Rentings.RentalStatus) {\\n        return IRentingManager(metahub).assetRentalStatus(_encodeAssetId(warper, tokenId));\\n    }\\n}\\n\",\"keccak256\":\"0x6c3c5db03da1798af0a35365d5a10600744dc6798e20f26cb72c6d1a2be36cfa\",\"license\":\"MIT\"},\"contracts/warper/ERC721/IERC721Warper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport \\\"../IWarper.sol\\\";\\n\\ninterface IERC721Warper is IWarper, IERC721 {\\n    /**\\n     * @dev Thrown when querying token balance for address(0)\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * @dev Thrown when querying for the owner of a token that has not been minted yet.\\n     */\\n    error OwnerQueryForNonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Thrown when querying for the operator of a token that has not been minted yet.\\n     */\\n    error OperatorQueryForNonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Thrown when attempting to safeTransfer to a contract that cannot handle ERC721 tokens.\\n     */\\n    error TransferToNonERC721ReceiverImplementer(address to);\\n\\n    /**\\n     * @dev Thrown when minting to the address(0).\\n     */\\n    error MintToTheZeroAddress();\\n\\n    /**\\n     * @dev Thrown when minting a token that already exists.\\n     */\\n    error TokenIsAlreadyMinted(uint256 tokenId);\\n\\n    /**\\n     * @dev Thrown transferring a token to the address(0).\\n     */\\n    error TransferToTheZeroAddress();\\n\\n    /**\\n     * @dev Thrown when calling a method that has been purposely disabled.\\n     */\\n    error MethodNotAllowed();\\n\\n    /**\\n     * @dev Mint new tokens.\\n     * @param to The address to mint the token to.\\n     * @param tokenId The ID of the token to mint.\\n     * @param data The data to send over to the receiver if it supports `onERC721Received` hook.\\n     */\\n    function mint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x54be93c413d6ae25c7268fc5ec2ca280685ca567a89cc3f560fb7954ee2ccb7f\",\"license\":\"MIT\"},\"contracts/warper/ERC721/IERC721WarperController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"../IWarperController.sol\\\";\\nimport \\\"../../asset/Assets.sol\\\";\\n\\ninterface IERC721WarperController is IWarperController {\\n    /**\\n     * @dev Get the active rental balance for a given warper and a renter.\\n     *      Used in Warper->Metahub communication.\\n     * @param metahub Address of the metahub.\\n     * @param warper Address of the warper.\\n     * @param renter Address of the renter whose active rental counts we need to fetch.\\n     */\\n    function rentalBalance(\\n        address metahub,\\n        address warper,\\n        address renter\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Get the rental status of a specific token.\\n     *      Used in Warper->Metahub communication.\\n     * @param metahub Address of the metahub.\\n     * @param warper Address of the warper.\\n     * @param tokenId The token ID to be checked for status.\\n     */\\n    function rentalStatus(\\n        address metahub,\\n        address warper,\\n        uint256 tokenId\\n    ) external view returns (Rentings.RentalStatus);\\n}\\n\",\"keccak256\":\"0x088545b32030955d6382c1639eb47a41efe17014c23be89a2e836351f905132f\",\"license\":\"MIT\"},\"contracts/warper/IWarper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable private-vars-leading-underscore\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\ninterface IWarper is IERC165 {\\n    /**\\n     * @dev Returns the original asset address.\\n     */\\n    function __original() external view returns (address);\\n\\n    /**\\n     * @dev Returns the Metahub address.\\n     */\\n    function __metahub() external view returns (address);\\n\\n    /**\\n     * @dev Returns the warper asset class ID.\\n     */\\n    function __assetClass() external view returns (bytes4);\\n\\n    /**\\n     * @dev Validates if a warper supports multiple interfaces at once.\\n     * @return an array of `bool` flags in order as the `interfaceIds` were passed.\\n     */\\n    function __supportedInterfaces(bytes4[] memory interfaceIds) external view returns (bool[] memory);\\n}\\n\",\"keccak256\":\"0xc1f8771e8420129618cba90681a74897151a4cf74c5b9fd565895ae49b9e5f76\",\"license\":\"MIT\"},\"contracts/warper/IWarperController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"../accounting/Accounts.sol\\\";\\nimport \\\"../asset/Assets.sol\\\";\\nimport \\\"../renting/Rentings.sol\\\";\\nimport \\\"../asset/IAssetController.sol\\\";\\nimport \\\"./IWarper.sol\\\";\\n\\ninterface IWarperController is IAssetController {\\n    /**\\n     * @dev Thrown if warper interface is not compatible with the controller.\\n     */\\n    error IncompatibleWarperInterface();\\n\\n    /**\\n     * @dev Thrown upon attempting to use the warper with an asset different from the one expected by the warper.\\n     */\\n    error InvalidAssetForWarper(address warper, address asset);\\n\\n    /**\\n     * @dev Thrown upon attempting to rent a warped asset which is already rented.\\n     */\\n    error AlreadyRented();\\n\\n    /**\\n     * @dev Takes an existing asset and then mints a warper token representing it.\\n     *      Used in Metahub->Warper communication.\\n     * @param asset The asset that must be warped.\\n     * @param warper Warper contract to used for warping.\\n     * @param to The account which will receive the warped asset.\\n     * @return warpedCollectionId Warped collection ID.\\n     * @return warpedAsset Warper asset structure.\\n     */\\n    function warp(\\n        Assets.Asset calldata asset,\\n        address warper,\\n        address to\\n    ) external returns (bytes32 warpedCollectionId, Assets.Asset memory warpedAsset);\\n\\n    /**\\n     * @dev Executes warper rental hook.\\n     * @param rentalId Rental agreement ID.\\n     * @param rentalAgreement Newly registered rental agreement details.\\n     * @param rentalEarnings The rental earnings breakdown.\\n     */\\n    function executeRentingHooks(\\n        uint256 rentalId,\\n        Rentings.Agreement calldata rentalAgreement,\\n        Accounts.RentalEarnings calldata rentalEarnings\\n    ) external;\\n\\n    /**\\n     * @dev Validates that the warper interface is supported by the current WarperController.\\n     * @param warper Warper whose interface we must validate.\\n     * @return bool - `true` if warper is supported.\\n     */\\n    function isCompatibleWarper(address warper) external view returns (bool);\\n\\n    /**\\n     * @dev Reverts if provided warper is not compatible with the controller.\\n     */\\n    function checkCompatibleWarper(address warper) external view;\\n\\n    /**\\n     * @dev Validates renting params taking into account various warper mechanics.\\n     * Throws an error if the specified asset cannot be rented with particular renting parameters.\\n     * @param asset Asset being rented.\\n     * @param rentingParams Renting parameters.\\n     */\\n    function validateRentingParams(Assets.Asset calldata asset, Rentings.Params calldata rentingParams) external view;\\n\\n    /**\\n     * @dev Calculates the universe and/or lister premiums.\\n     * Those are extra amounts that should be added the the resulting rental fee paid by renter.\\n     * @param asset Asset being rented.\\n     * @param rentingParams Renting parameters.\\n     * @param universeFee The current value of the universe fee component.\\n     * @param listerFee The current value of the lister fee component.\\n     * @return universePremium The universe premium amount.\\n     * @return listerPremium The lister premium amount.\\n     */\\n    function calculatePremiums(\\n        Assets.Asset calldata asset,\\n        Rentings.Params calldata rentingParams,\\n        uint256 universeFee,\\n        uint256 listerFee\\n    ) external view returns (uint256 universePremium, uint256 listerPremium);\\n}\\n\",\"keccak256\":\"0x4a800eea6b9a083c72d0ce48312f6b4146274a27ac406596eb6f073c36351708\",\"license\":\"MIT\"},\"contracts/warper/IWarperManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"../asset/IAssetController.sol\\\";\\nimport \\\"./Warpers.sol\\\";\\n\\ninterface IWarperManager {\\n    /**\\n     * @dev Warper registration params.\\n     * @param name The warper name.\\n     * @param universeId The universe ID.\\n     * @param paused Indicates whether the warper should stay paused after registration.\\n     */\\n    struct WarperRegistrationParams {\\n        string name;\\n        uint256 universeId;\\n        bool paused;\\n    }\\n\\n    /**\\n     * @dev Emitted when a new warper is registered.\\n     * @param universeId Universe ID.\\n     * @param warper Warper address.\\n     * @param original Original asset address.\\n     * @param assetClass Asset class ID (identical for the `original` and `warper`).\\n     */\\n    event WarperRegistered(\\n        uint256 indexed universeId,\\n        address indexed warper,\\n        address indexed original,\\n        bytes4 assetClass\\n    );\\n\\n    /**\\n     * @dev Emitted when the warper is no longer registered.\\n     * @param warper Warper address.\\n     */\\n    event WarperDeregistered(address indexed warper);\\n\\n    /**\\n     * @dev Emitted when the warper is paused.\\n     * @param warper Address.\\n     */\\n    event WarperPaused(address indexed warper);\\n\\n    /**\\n     * @dev Emitted when the warper pause is lifted.\\n     * @param warper Address.\\n     */\\n    event WarperUnpaused(address indexed warper);\\n\\n    /**\\n     * @dev Registers a new warper.\\n     * The warper must be deployed and configured prior to registration,\\n     * since it becomes available for renting immediately.\\n     * @param warper Warper address.\\n     * @param params Warper registration params.\\n     */\\n    function registerWarper(address warper, WarperRegistrationParams calldata params) external;\\n\\n    /**\\n     * @dev Deletes warper registration information.\\n     * All current rental agreements with the warper will stay intact, but the new rentals won't be possible.\\n     * @param warper Warper address.\\n     */\\n    function deregisterWarper(address warper) external;\\n\\n    /**\\n     * @dev Puts the warper on pause.\\n     * Emits a {WarperPaused} event.\\n     * @param warper Address.\\n     */\\n    function pauseWarper(address warper) external;\\n\\n    /**\\n     * @dev Lifts the warper pause.\\n     * Emits a {WarperUnpaused} event.\\n     * @param warper Address.\\n     */\\n    function unpauseWarper(address warper) external;\\n\\n    /**\\n     * @dev Sets the new controller address for one or multiple registered warpers.\\n     * @param warpers A list of registered warper addresses which controller will be changed.\\n     * @param controller Warper controller address.\\n     */\\n    function setWarperController(address[] calldata warpers, address controller) external;\\n\\n    /**\\n     * @dev Reverts if asset is not supported.\\n     * @param asset Asset address.\\n     */\\n    function checkSupportedAsset(address asset) external view;\\n\\n    /**\\n     * @dev Reverts if warper is not registered.\\n     */\\n    function checkRegisteredWarper(address warper) external view;\\n\\n    /**\\n     * @dev Returns the number of warpers belonging to the particular universe.\\n     * @param universeId The universe ID.\\n     * @return Warper count.\\n     */\\n    function universeWarperCount(uint256 universeId) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the list of warpers belonging to the particular universe.\\n     * @param universeId The universe ID.\\n     * @param offset Starting index.\\n     * @param limit Max number of items.\\n     * @return List of warper addresses.\\n     * @return List of warpers.\\n     */\\n    function universeWarpers(\\n        uint256 universeId,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory, Warpers.Warper[] memory);\\n\\n    /**\\n     * @dev Returns the number of warpers associated with the particular original asset.\\n     * @param original Original asset address.\\n     * @return Warper count.\\n     */\\n    function assetWarperCount(address original) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the list of warpers associated with the particular original asset.\\n     * @param original Original asset address.\\n     * @param offset Starting index.\\n     * @param limit Max number of items.\\n     * @return List of warper addresses.\\n     * @return List of warpers.\\n     */\\n    function assetWarpers(\\n        address original,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory, Warpers.Warper[] memory);\\n\\n    /**\\n     * @dev Returns warper preset factory address.\\n     */\\n    function warperPresetFactory() external view returns (address);\\n\\n    /**\\n     * @dev Returns the Metahub address.\\n     */\\n    function metahub() external view returns (address);\\n\\n    /**\\n     * @dev Checks whether `account` is the `warper` admin.\\n     * @param warper Warper address.\\n     * @param account Account address.\\n     * @return True if the `account` is the admin of the `warper` and false otherwise.\\n     */\\n    function isWarperAdmin(address warper, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns registered warper details.\\n     * @param warper Warper address.\\n     * @return Warper details.\\n     */\\n    function warperInfo(address warper) external view returns (Warpers.Warper memory);\\n\\n    /**\\n     * @dev Returns warper controller address.\\n     * @param warper Warper address.\\n     * @return Current controller.\\n     */\\n    function warperController(address warper) external view returns (address);\\n}\\n\",\"keccak256\":\"0x58522276f81d4393d31c2dc39c64f89924d42182b26a9332260a6223a4541514\",\"license\":\"MIT\"},\"contracts/warper/IWarperPresetFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IWarperPresetFactory {\\n    /**\\n     * @dev Thrown when the implementation does not support the IWarperPreset interface\\n     */\\n    error InvalidWarperPresetInterface();\\n\\n    /**\\n     * @dev Thrown when the warper preset id is already present in the storage.\\n     */\\n    error DuplicateWarperPresetId(bytes32 presetId);\\n\\n    /**\\n     * @dev Thrown when the warper preset has been disabled, when it was expected for it to be enabled.\\n     */\\n    error DisabledWarperPreset(bytes32 presetId);\\n\\n    /**\\n     * @dev Thrown when the warper preset has been enabled, when it was expected for it to be disabled.\\n     */\\n    error EnabledWarperPreset(bytes32 presetId);\\n\\n    /**\\n     * @dev Thrown when it was expected for the warper preset to be registeredr.\\n     */\\n    error WarperPresetNotRegistered(bytes32 presetId);\\n\\n    /**\\n     * @dev Thrown when the provided preset initialization data is empty.\\n     */\\n    error EmptyPresetData();\\n\\n    struct WarperPreset {\\n        bytes32 id;\\n        address implementation;\\n        bool enabled;\\n    }\\n\\n    /**\\n     * @dev Emitted when new warper preset is added.\\n     */\\n    event WarperPresetAdded(bytes32 indexed presetId, address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when a warper preset is disabled.\\n     */\\n    event WarperPresetDisabled(bytes32 indexed presetId);\\n\\n    /**\\n     * @dev Emitted when a warper preset is enabled.\\n     */\\n    event WarperPresetEnabled(bytes32 indexed presetId);\\n\\n    /**\\n     * @dev Emitted when a warper preset is enabled.\\n     */\\n    event WarperPresetRemoved(bytes32 indexed presetId);\\n\\n    /**\\n     * @dev Emitted when a warper preset is deployed.\\n     */\\n    event WarperPresetDeployed(bytes32 indexed presetId, address indexed warper);\\n\\n    /**\\n     * @dev Stores the association between `presetId` and `implementation` address.\\n     * NOTE: Warper `implementation` must be deployed beforehand.\\n     * @param presetId Warper preset id.\\n     * @param implementation Warper implementation address.\\n     */\\n    function addPreset(bytes32 presetId, address implementation) external;\\n\\n    /**\\n     * @dev Removes the association between `presetId` and its implementation.\\n     * @param presetId Warper preset id.\\n     */\\n    function removePreset(bytes32 presetId) external;\\n\\n    /**\\n     * @dev Enables warper preset, which makes it deployable.\\n     * @param presetId Warper preset id.\\n     */\\n    function enablePreset(bytes32 presetId) external;\\n\\n    /**\\n     * @dev Disable warper preset, which makes non-deployable.\\n     * @param presetId Warper preset id.\\n     */\\n    function disablePreset(bytes32 presetId) external;\\n\\n    /**\\n     * @dev Deploys a new warper from the preset identified by `presetId`.\\n     * @param presetId Warper preset id.\\n     * @param initData Warper initialization payload.\\n     * @return Deployed warper address.\\n     */\\n    function deployPreset(bytes32 presetId, bytes calldata initData) external returns (address);\\n\\n    /**\\n     * @dev Checks whether warper preset is enabled and available for deployment.\\n     * @param presetId Warper preset id.\\n     */\\n    function presetEnabled(bytes32 presetId) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the list of all registered warper presets.\\n     */\\n    function presets() external view returns (WarperPreset[] memory);\\n\\n    /**\\n     * @dev Returns the warper preset details.\\n     * @param presetId Warper preset id.\\n     */\\n    function preset(bytes32 presetId) external view returns (WarperPreset memory);\\n}\\n\",\"keccak256\":\"0x04dabf0a5980d891aa3ccbf2a1d741a238654dad79e0aa57a73f8b3cf23b0b27\",\"license\":\"MIT\"},\"contracts/warper/Warpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\\\";\\n\\nimport \\\"./IWarperController.sol\\\";\\nimport \\\"./IWarperPresetFactory.sol\\\";\\nimport \\\"../asset/Assets.sol\\\";\\nimport \\\"./IWarperManager.sol\\\";\\n\\nlibrary Warpers {\\n    using AddressUpgradeable for address;\\n    using ERC165CheckerUpgradeable for address;\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n    using Warpers for Registry;\\n    using Assets for Assets.Asset;\\n    using Assets for Assets.Registry;\\n\\n    /**\\n     * @dev Thrown if provided warper address does not implement warper interface.\\n     */\\n    error InvalidWarperInterface();\\n\\n    /**\\n     * @dev Thrown when the warper returned metahub address differs from the one it is being registered in.\\n     * @param provided Metahub address returned by warper.\\n     * @param required Required metahub address.\\n     */\\n    error WarperHasIncorrectMetahubReference(address provided, address required);\\n\\n    /**\\n     * @dev Thrown when performing action or accessing data of an unknown warper.\\n     * @param warper Warper address.\\n     */\\n    error WarperIsNotRegistered(address warper);\\n\\n    /**\\n     * @dev Thrown upon attempting to register a warper twice.\\n     * @param warper Duplicate warper address.\\n     */\\n    error WarperIsAlreadyRegistered(address warper);\\n\\n    /**\\n     * @dev Thrown when the operation is not allowed due to the warper being paused.\\n     */\\n    error WarperIsPaused();\\n\\n    /**\\n     * @dev Thrown when the operation is not allowed due to the warper not being paused.\\n     */\\n    error WarperIsNotPaused();\\n\\n    /**\\n     * @dev Thrown when there are no registered warpers for a particular asset.\\n     * @param asset Asset address.\\n     */\\n    error UnsupportedAsset(address asset);\\n\\n    /**\\n     * @dev Thrown upon attempting to use the warper which is not registered for the provided asset.\\n     */\\n    error IncompatibleAsset(address asset);\\n\\n    /**\\n     * @dev Registered warper data.\\n     * @param assetClass The identifying asset class.\\n     * @param original Original asset contract address.\\n     * @param paused Indicates whether the warper is paused.\\n     * @param controller Warper controller.\\n     * @param name Warper name.\\n     * @param universeId Warper universe ID.\\n     */\\n    struct Warper {\\n        bytes4 assetClass;\\n        address original;\\n        bool paused;\\n        IWarperController controller;\\n        string name;\\n        uint256 universeId;\\n    }\\n\\n    /**\\n     * @dev Reverts if the warper original does not match the `asset`;\\n     */\\n    function checkCompatibleAsset(Warper memory self, Assets.Asset memory asset) internal pure {\\n        address original = asset.token();\\n        if (self.original != original) revert IncompatibleAsset(original);\\n    }\\n\\n    /**\\n     * @dev Puts the warper on pause.\\n     */\\n    function pause(Warper storage self) internal {\\n        if (self.paused) revert WarperIsPaused();\\n\\n        self.paused = true;\\n    }\\n\\n    /**\\n     * @dev Lifts the warper pause.\\n     */\\n    function unpause(Warper storage self) internal {\\n        if (!self.paused) revert WarperIsNotPaused();\\n\\n        self.paused = false;\\n    }\\n\\n    /**\\n     * @dev Reverts if the warper is paused.\\n     */\\n    function checkNotPaused(Warper memory self) internal pure {\\n        if (self.paused) revert WarperIsPaused();\\n    }\\n\\n    /**\\n     * @dev Warper registry.\\n     * @param presetFactory Warper preset factory contract.\\n     * @param warperIndex Set of registered warper addresses.\\n     * @param universeWarperIndex Mapping from a universe ID to the set of warper addresses registered by the universe.\\n     * @param assetWarperIndex Mapping from an original asset address to the set of warper addresses,\\n     * registered for the asset.\\n     * @param warpers Mapping from a warper address to the warper details.\\n     */\\n    struct Registry {\\n        IWarperPresetFactory presetFactory;\\n        EnumerableSetUpgradeable.AddressSet warperIndex;\\n        mapping(uint256 => EnumerableSetUpgradeable.AddressSet) universeWarperIndex;\\n        mapping(address => EnumerableSetUpgradeable.AddressSet) assetWarperIndex;\\n        mapping(address => Warpers.Warper) warpers;\\n    }\\n\\n    /**\\n     * @dev Performs warper registration.\\n     * @param warper Warper address.\\n     * @param params Warper registration params.\\n     */\\n    function registerWarper(\\n        Registry storage self,\\n        address warper,\\n        IWarperManager.WarperRegistrationParams calldata params,\\n        IAssetClassRegistry assetClassRegistry\\n    ) internal returns (bytes4 assetClass, address original) {\\n        // Check that provided warper address is a valid contract.\\n        if (!warper.isContract() || !warper.supportsInterface(type(IWarper).interfaceId)) {\\n            revert InvalidWarperInterface();\\n        }\\n\\n        // Check that warper has correct metahub reference.\\n        address metahub = IWarper(warper).__metahub();\\n        if (metahub != IWarperManager(address(this)).metahub())\\n            revert WarperHasIncorrectMetahubReference(metahub, address(this));\\n\\n        // Check that warper asset class is supported.\\n        assetClass = IWarper(warper).__assetClass();\\n\\n        // Retrieve warper controller based on assetClass.\\n        // Controller resolution for unsupported asset class will revert.\\n        IWarperController controller = IWarperController(assetClassRegistry.assetClassConfig(assetClass).controller);\\n\\n        // Ensure warper compatibility with the current generation of asset controller.\\n        controller.checkCompatibleWarper(warper);\\n\\n        // Retrieve original asset address.\\n        original = IWarper(warper).__original();\\n\\n        // Save warper record.\\n        _register(\\n            self,\\n            warper,\\n            Warpers.Warper({\\n                original: original,\\n                controller: controller,\\n                name: params.name,\\n                universeId: params.universeId,\\n                paused: params.paused,\\n                assetClass: assetClass\\n            })\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs warper registration.\\n     */\\n    function _register(\\n        Registry storage self,\\n        address warperAddress,\\n        Warper memory warper\\n    ) private {\\n        if (!self.warperIndex.add(warperAddress)) revert WarperIsAlreadyRegistered(warperAddress);\\n\\n        // Create warper main registration record.\\n        self.warpers[warperAddress] = warper;\\n        // Associate the warper with the universe.\\n        self.universeWarperIndex[warper.universeId].add(warperAddress);\\n        // Associate the warper with the original asset.\\n        self.assetWarperIndex[warper.original].add(warperAddress);\\n    }\\n\\n    /**\\n     * @dev Removes warper data from the registry.\\n     */\\n    function remove(Registry storage self, address warperAddress) internal {\\n        Warper storage warper = self.warpers[warperAddress];\\n        // Clean up universe index.\\n        self.universeWarperIndex[warper.universeId].remove(warperAddress);\\n        // Clean up asset index.\\n        self.assetWarperIndex[warper.original].remove(warperAddress);\\n        // Clean up main index.\\n        self.warperIndex.remove(warperAddress);\\n        // Delete warper data.\\n        delete self.warpers[warperAddress];\\n    }\\n\\n    /**\\n     * @dev Returns the paginated list of warpers belonging to the particular universe.\\n     */\\n    function universeWarpers(\\n        Registry storage self,\\n        uint256 universeId,\\n        uint256 offset,\\n        uint256 limit\\n    ) internal view returns (address[] memory, Warpers.Warper[] memory) {\\n        return self.paginateIndexedWarpers(self.universeWarperIndex[universeId], offset, limit);\\n    }\\n\\n    /**\\n     * @dev Returns the paginated list of warpers associated with the particular original asset.\\n     */\\n    function assetWarpers(\\n        Registry storage self,\\n        address original,\\n        uint256 offset,\\n        uint256 limit\\n    ) internal view returns (address[] memory, Warpers.Warper[] memory) {\\n        return self.paginateIndexedWarpers(self.assetWarperIndex[original], offset, limit);\\n    }\\n\\n    /**\\n     * @dev Checks warper registration by address.\\n     */\\n    function isRegisteredWarper(Registry storage self, address warper) internal view returns (bool) {\\n        return self.warperIndex.contains(warper);\\n    }\\n\\n    /**\\n     * @dev Reverts if warper is not registered.\\n     */\\n    function checkRegisteredWarper(Registry storage self, address warper) internal view {\\n        if (!self.isRegisteredWarper(warper)) revert WarperIsNotRegistered(warper);\\n    }\\n\\n    /**\\n     * @dev Reverts if asset is not supported.\\n     * @param asset Asset address.\\n     */\\n    function checkSupportedAsset(Registry storage self, address asset) internal view {\\n        if (!self.isSupportedAsset(asset)) revert UnsupportedAsset(asset);\\n    }\\n\\n    /**\\n     * @dev Checks asset support by address.\\n     * The supported asset should have at least one warper.\\n     * @param asset Asset address.\\n     */\\n    function isSupportedAsset(Registry storage self, address asset) internal view returns (bool) {\\n        return self.assetWarperIndex[asset].length() > 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of warpers belonging to the particular universe.\\n     */\\n    function universeWarperCount(Registry storage self, uint256 universeId) internal view returns (uint256) {\\n        return self.universeWarperIndex[universeId].length();\\n    }\\n\\n    /**\\n     * @dev Returns the number of warpers associated with the particular original asset.\\n     */\\n    function assetWarperCount(Registry storage self, address original) internal view returns (uint256) {\\n        return self.assetWarperIndex[original].length();\\n    }\\n\\n    /**\\n     * @dev Returns the paginated list of registered warpers using provided index reference.\\n     */\\n    function paginateIndexedWarpers(\\n        Registry storage self,\\n        EnumerableSetUpgradeable.AddressSet storage warperIndex,\\n        uint256 offset,\\n        uint256 limit\\n    ) internal view returns (address[] memory, Warper[] memory) {\\n        uint256 indexSize = warperIndex.length();\\n        if (offset >= indexSize) return (new address[](0), new Warper[](0));\\n\\n        if (limit > indexSize - offset) {\\n            limit = indexSize - offset;\\n        }\\n\\n        Warper[] memory warpers = new Warper[](limit);\\n        address[] memory warperAddresses = new address[](limit);\\n        for (uint256 i = 0; i < limit; i++) {\\n            warperAddresses[i] = warperIndex.at(offset + i);\\n            warpers[i] = self.warpers[warperAddresses[i]];\\n        }\\n\\n        return (warperAddresses, warpers);\\n    }\\n}\\n\",\"keccak256\":\"0x5ea54664120a8e8f4c0113354b8ad1bffd2671f8bd63486a4af7cbfc2813bc3d\",\"license\":\"MIT\"},\"contracts/warper/mechanics/asset-rentability/IAssetRentabilityMechanics.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable private-vars-leading-underscore\\npragma solidity ^0.8.13;\\n\\ninterface IAssetRentabilityMechanics {\\n    /**\\n     * @dev Thrown when the asset renting is rejected by warper due to the `reason`.\\n     */\\n    error AssetIsNotRentable(string reason);\\n\\n    /**\\n     * Returns information if an asset is rentable.\\n     * @param renter The address of the renter.\\n     * @param tokenId The token ID.\\n     * @param amount The token amount.\\n     * @return isRentable True if asset is rentable.\\n     * @return errorMessage The reason of the asset not being rentable.\\n     */\\n    function __isRentableAsset(\\n        address renter,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external view returns (bool isRentable, string memory errorMessage);\\n}\\n\",\"keccak256\":\"0x888e3fd8ac9e6705a6a654d86bb49bc63f9e4244100554bd038cc8c3a5b45d2c\",\"license\":\"MIT\"},\"contracts/warper/mechanics/availability-period/IAvailabilityPeriodMechanics.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable private-vars-leading-underscore\\npragma solidity ^0.8.13;\\n\\ninterface IAvailabilityPeriodMechanics {\\n    /**\\n     * @dev Thrown when the current time is not withing the warper availability period.\\n     */\\n    error WarperIsNotAvailableForRenting(\\n        uint256 currentTime,\\n        uint32 availabilityPeriodStart,\\n        uint32 availabilityPeriodEnd\\n    );\\n\\n    /**\\n     * @dev Returns warper availability period starting time.\\n     * @return Unix timestamp after which the warper is rentable.\\n     */\\n    function __availabilityPeriodStart() external view returns (uint32);\\n\\n    /**\\n     * @dev Returns warper availability period ending time.\\n     * @return Unix timestamp after which the warper is NOT rentable.\\n     */\\n    function __availabilityPeriodEnd() external view returns (uint32);\\n\\n    /**\\n     * @dev Returns warper availability period.\\n     * @return availabilityPeriodStart Unix timestamp after which the warper is rentable.\\n     * @return availabilityPeriodEnd Unix timestamp after which the warper is NOT rentable.\\n     */\\n    function __availabilityPeriodRange()\\n        external\\n        view\\n        returns (uint32 availabilityPeriodStart, uint32 availabilityPeriodEnd);\\n}\\n\",\"keccak256\":\"0x5ff68b5076b86a796217e989588e428867de5514cf5a239e0504cd6f7e49d9a1\",\"license\":\"MIT\"},\"contracts/warper/mechanics/rental-fee-premium/IRentalFeePremiumMechanics.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable private-vars-leading-underscore\\npragma solidity ^0.8.13;\\n\\ninterface IRentalFeePremiumMechanics {\\n    /**\\n     * @dev Calculate extra premiums.\\n     * @param renter The renter address.\\n     * @param tokenId The token ID to calculate the extra premium for.\\n     * @param amount The token amount.\\n     * @param rentalPeriod The rental period in seconds.\\n     * @param universeFee The current universe fee.\\n     * @param listerFee The current lister fee.\\n     * @return universePremium The universe premium price to add.\\n     * @return listerPremium The lister premium price to add.\\n     */\\n    function __calculatePremiums(\\n        address renter,\\n        uint256 tokenId,\\n        uint256 amount,\\n        uint32 rentalPeriod,\\n        uint256 universeFee,\\n        uint256 listerFee\\n    ) external view returns (uint256 universePremium, uint256 listerPremium);\\n}\\n\",\"keccak256\":\"0x1adc3a8bbb6962e53163c7801881f07bdf98057184f5e897d37c6119711e64b2\",\"license\":\"MIT\"},\"contracts/warper/mechanics/rental-period/IRentalPeriodMechanics.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable private-vars-leading-underscore\\npragma solidity ^0.8.13;\\n\\ninterface IRentalPeriodMechanics {\\n    /**\\n     * @dev Thrown when the requested rental period is not withing the warper allowed rental period range.\\n     */\\n    error WarperRentalPeriodIsOutOfRange(uint32 requestedRentalPeriod, uint32 minRentalPeriod, uint32 maxRentalPeriod);\\n\\n    /**\\n     * @dev Returns warper minimal rental period.\\n     * @return Time is seconds.\\n     */\\n    function __minRentalPeriod() external view returns (uint32);\\n\\n    /**\\n     * @dev Returns warper maximal rental period.\\n     * @return Time is seconds.\\n     */\\n    function __maxRentalPeriod() external view returns (uint32);\\n\\n    /**\\n     * @dev Returns warper rental period range.\\n     * @return minRentalPeriod The minimal amount of time the warper can be rented for.\\n     * @return maxRentalPeriod The maximal amount of time the warper can be rented for.\\n     */\\n    function __rentalPeriodRange() external view returns (uint32 minRentalPeriod, uint32 maxRentalPeriod);\\n}\\n\",\"keccak256\":\"0x6bbf0feb6c9f6df6eee527ecf24f1a2f17cf60944dc8672cd18d5dcd87b9ce20\",\"license\":\"MIT\"},\"contracts/warper/mechanics/renting-hook/IRentingHookMechanics.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable private-vars-leading-underscore\\npragma solidity ^0.8.13;\\n\\nimport \\\"../../../renting/Rentings.sol\\\";\\nimport \\\"../../../accounting/Accounts.sol\\\";\\n\\ninterface IRentingHookMechanics {\\n    /**\\n     * @dev Thrown when the renting hook execution failed due to the `reason`.\\n     */\\n    error RentingHookError(string reason);\\n\\n    /**\\n     * @dev Executes arbitrary logic after successful renting.\\n     * NOTE: This function should not revert directly and must set correct `success` value instead.\\n     *\\n     * @param rentalId Rental agreement ID.\\n     * @param tokenId The token ID.\\n     * @param amount The token amount.\\n     * @param rentalAgreement Newly registered rental agreement details.\\n     * @param rentalEarnings The rental earnings breakdown.\\n     * @return success True if hook was executed successfully.\\n     * @return errorMessage The reason of the hook execution failure.\\n     */\\n    function __onRent(\\n        uint256 rentalId,\\n        uint256 tokenId,\\n        uint256 amount,\\n        Rentings.Agreement calldata rentalAgreement,\\n        Accounts.RentalEarnings calldata rentalEarnings\\n    ) external returns (bool success, string memory errorMessage);\\n}\\n\",\"keccak256\":\"0x15315d2f2d7f3626815a8512dce31336902d35141021cbb27007e74c781f96b3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523060805234801561001457600080fd5b5060805161208861004c60003960008181610820015281816108e70152818161094201528181610c870152610e8201526120886000f3fe608060405234801561001057600080fd5b50600436106100e15760003560e01c8063b42ca9e311610086578063c95eb64d11610063578063c95eb64d146101d3578063e4f75ad3146101f4578063f19e254e14610207578063f55383ae1461022f57005b8063b42ca9e31461018c578063b7cc2e7b1461019f578063bfe0af99146101c057005b806369bdbd0e116100bf57806369bdbd0e1461013e57806386c9de051461015157806389897ace14610166578063997f62131461017957005b806301ffc9a7146100e35780633f09518c1461010b57806361f806471461012b575b005b6100f66100f1366004611337565b610242565b60405190151581526020015b60405180910390f35b61011e610119366004611379565b61026d565b60405161010291906113d0565b6100e1610139366004611422565b6102ed565b6100e161014c366004611604565b610816565b6040516339d690a360e11b8152602001610102565b6100e1610174366004611655565b6108dd565b6100e16101873660046116e1565b610938565b6100f661019a36600461175c565b610ae3565b6101b26101ad366004611779565b610b55565b604051908152602001610102565b6101b26101ce3660046117ad565b610bd3565b6101e66101e13660046117ed565b610c5c565b6040516101029291906118de565b6100e16102023660046118f7565b610e78565b61021a61021536600461192e565b610ee1565b60408051928352602083019190915201610102565b6100e161023d36600461175c565b611074565b60006001600160e01b031982166380e9fe1560e01b148061026757506102678261109d565b92915050565b6000836001600160a01b03166333a9320361028885856110d2565b6040518263ffffffff1660e01b81526004016102a4919061198c565b602060405180830381865afa1580156102c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e5919061199f565b949350505050565b6102fe6102f9836119c0565b611161565b6000610310604083016020840161175c565b9050600061032f61032185806119cc565b61032a906119ec565b6111d1565b9150600290506103a1836001600160a01b0316635a70a2836040518163ffffffff1660e01b8152600401602060405180830381865afa158015610376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039a91906119f8565b848461026d565b60028111156103b2576103b26113ba565b036103d057604051633c42e29760e11b815260040160405180910390fd5b60408051600380825260808201909252600091602082016060803683370190505090506370c8db7160e01b8160008151811061040e5761040e611a15565b60200260200101906001600160e01b03191690816001600160e01b0319168152505063331f761f60e01b8160018151811061044b5761044b611a15565b60200260200101906001600160e01b03191690816001600160e01b0319168152505063ca7cee2f60e01b8160028151811061048857610488611a15565b6001600160e01b0319909216602092830291909101909101526040516307e78cc160e21b81526000906001600160a01b03851690631f9e3304906104d0908590600401611a2b565b600060405180830381865afa1580156104ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105159190810190611a89565b90508060008151811061052a5761052a611a15565b60200260200101511561061357600080856001600160a01b031663d1958f2c6040518163ffffffff1660e01b81526004016040805180830381865afa158015610577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059b9190611b47565b915091508163ffffffff164210806105d7575063ffffffff81166105c56080890160608a01611b81565b6105d59063ffffffff1642611b9e565b115b156106105760405163a01a0f1b60e01b815242600482015263ffffffff8084166024830152821660448201526064015b60405180910390fd5b50505b8060018151811061062657610626611a15565b60200260200101511561072857600080856001600160a01b031662eb6ac76040518163ffffffff1660e01b81526004016040805180830381865afa158015610672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106969190611b47565b909250905063ffffffff82166106b26080890160608a01611b81565b63ffffffff1610806106de575063ffffffff81166106d66080890160608a01611b81565b63ffffffff16115b15610725576106f36080880160608901611b81565b60405163420ba8b160e11b815263ffffffff918216600482015281841660248201529082166044820152606401610607565b50505b8060028151811061073b5761073b611a15565b60200260200101511561080e576000806001600160a01b03861663ca7cee2f61076a60608a0160408b0161175c565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024810188905260208b01356044820152606401600060405180830381865afa1580156107bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107e79190810190611bc4565b915091508161080b578060405163b0df8c7b60e01b81526004016106079190611c4d565b50505b505050505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361085f57604051637170f3db60e01b815260040160405180910390fd5b61086882611161565b60008061087884600001516111d1565b60405163be2b9a7960e01b81526001600160a01b038084166004830152602482018390529294509092509084169063be2b9a7990604401600060405180830381600087803b1580156108c957600080fd5b505af115801561080b573d6000803e3d6000fd5b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361092657604051637170f3db60e01b815260040160405180910390fd5b610932848484846111f5565b50505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361098157604051637170f3db60e01b815260040160405180910390fd5b61099761098e83806119cc565b6102f9906119c0565b6000806109b16109a785806119cc565b61032190806119cc565b6040516301ffc9a760e01b8152636459d68d60e11b600482015291935091506001600160a01b038316906301ffc9a790602401602060405180830381865afa158015610a01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a259190611c60565b15610adc576000806001600160a01b03841663c8b3ad1a8885610a488a806119cc565b602001358a8a6040518663ffffffff1660e01b8152600401610a6e959493929190611e5c565b6000604051808303816000875af1158015610a8d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ab59190810190611bc4565b9150915081610ad9578060405163b65087ad60e01b81526004016106079190611c4d565b50505b5050505050565b6040516301ffc9a760e01b81526394d008ef60e01b60048201526000906001600160a01b038316906301ffc9a790602401602060405180830381865afa158015610b31573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102679190611c60565b80516000906001600160e01b0319166339d690a360e11b14610bc25781517f73ad2146b3d3a286642c794379d750360a2d53a3459a11b3e5d6cc900f55f44a5b604051632e82eea160e11b81526001600160e01b0319928316600482015291166024820152604401610607565b610267610bce836112cc565b6112e6565b6000836001600160a01b0316631e347878610bed856112e6565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b0385166024820152604401602060405180830381865afa158015610c38573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e59190611f55565b6040805160808101825260009181018281526060808301528152602081018290526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610cc657604051637170f3db60e01b815260040160405180910390fd5b610cd26102f9866119c0565b600080610ce261032188806119cc565b91509150856001600160a01b031663f46c73c66040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4891906119f8565b6001600160a01b0316826001600160a01b031614610d8c576040516307a3e91560e41b81526001600160a01b03808816600483015283166024820152604401610607565b6040518060400160405280610da188846110d2565b81526020898101359101529250610db7866112e6565b93506000610dc630888461026d565b6002811115610dd757610dd76113ba565b03610e5057604080516000815260208101918290526394d008ef60e01b9091526001600160a01b038716906394d008ef90610e19908890859060248101611f6e565b600060405180830381600087803b158015610e3357600080fd5b505af1158015610e47573d6000803e3d6000fd5b50505050610e6e565b604080516000815260208101909152610e6e908490309088906111f5565b5050935093915050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ec157604051637170f3db60e01b815260040160405180910390fd5b610edc838383604051806020016040528060008152506111f5565b505050565b600080610ef06102f9876119c0565b610f00604086016020870161175c565b6040516301ffc9a760e01b8152633573c0bd60e21b60048201526001600160a01b0391909116906301ffc9a790602401602060405180830381865afa158015610f4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f719190611c60565b15611064576000610f8561032188806119cc565b9150610f999050604087016020880161175c565b6001600160a01b031663d5cf02f4610fb76060890160408a0161175c565b8360208b0135610fcd60808c0160608d01611b81565b6040516001600160e01b031960e087901b1681526001600160a01b0390941660048501526024840192909252604483015263ffffffff1660648201526084810188905260a4810187905260c4016040805180830381865afa158015611036573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105a9190611f9e565b925092505061106b565b5060009050805b94509492505050565b61107d81610ae3565b61109a576040516347ac7e5360e11b815260040160405180910390fd5b50565b60006001600160e01b031982166335c66d6d60e01b148061026757506301ffc9a760e01b6001600160e01b0319831614610267565b60408051808201909152600081526060602082015260405180604001604052806111197f73ad2146b3d3a286642c794379d750360a2d53a3459a11b3e5d6cc900f55f44a90565b6001600160e01b0319168152604080516001600160a01b03871660208281019190915291810186905291019060600160408051601f1981840301815291905290529392505050565b8051516001600160e01b0319166339d690a360e11b146111a4578051517f73ad2146b3d3a286642c794379d750360a2d53a3459a11b3e5d6cc900f55f44a610b95565b806020015160011461109a5780602001516040516383f261dd60e01b815260040161060791815260200190565b60008082602001518060200190518101906111ec9190611fc2565b91509150915091565b6111fe84611161565b60008061120e86600001516111d1565b604051635c46a7ef60e11b815291935091506001600160a01b0383169063b88d4fde90611245908890889086908990600401611ff0565b600060405180830381600087803b15801561125f57600080fd5b505af1158015611273573d6000803e3d6000fd5b50505050836001600160a01b0316856001600160a01b03167ff65cd7509f02971efd9615ae50140cecf872cd4a266e3f6cac29f9b091fb32c788866040516112bc92919061202d565b60405180910390a3505050505050565b6000816020015180602001905181019061026791906119f8565b604080516001600160a01b038316602082015260009101604051602081830303815290604052805190602001209050919050565b80356001600160e01b03198116811461133257600080fd5b919050565b60006020828403121561134957600080fd5b6113528261131a565b9392505050565b6001600160a01b038116811461109a57600080fd5b803561133281611359565b60008060006060848603121561138e57600080fd5b833561139981611359565b925060208401356113a981611359565b929592945050506040919091013590565b634e487b7160e01b600052602160045260246000fd5b60208101600383106113f257634e487b7160e01b600052602160045260246000fd5b91905290565b60006040828403121561140a57600080fd5b50919050565b600060a0828403121561140a57600080fd5b60008060c0838503121561143557600080fd5b82356001600160401b0381111561144b57600080fd5b611457858286016113f8565b9250506114678460208501611410565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156114a8576114a8611470565b60405290565b604051601f8201601f191681016001600160401b03811182821017156114d6576114d6611470565b604052919050565b60006001600160401b038211156114f7576114f7611470565b50601f01601f191660200190565b600082601f83011261151657600080fd5b8135611529611524826114de565b6114ae565b81815284602083860101111561153e57600080fd5b816020850160208301376000918101602001919091529392505050565b60006040828403121561156d57600080fd5b611575611486565b90506115808261131a565b815260208201356001600160401b0381111561159b57600080fd5b6115a784828501611505565b60208301525092915050565b6000604082840312156115c557600080fd5b6115cd611486565b905081356001600160401b038111156115e557600080fd5b6115f18482850161155b565b8252506020820135602082015292915050565b6000806040838503121561161757600080fd5b82356001600160401b0381111561162d57600080fd5b611639858286016115b3565b925050602083013561164a81611359565b809150509250929050565b6000806000806080858703121561166b57600080fd5b84356001600160401b038082111561168257600080fd5b61168e888389016115b3565b9550602087013591506116a082611359565b9093506040860135906116b282611359565b909250606086013590808211156116c857600080fd5b506116d587828801611505565b91505092959194509250565b6000806000606084860312156116f657600080fd5b8335925060208401356001600160401b038082111561171457600080fd5b9085019060e0828803121561172857600080fd5b9092506040850135908082111561173e57600080fd5b50840160c0818703121561175157600080fd5b809150509250925092565b60006020828403121561176e57600080fd5b813561135281611359565b60006020828403121561178b57600080fd5b81356001600160401b038111156117a157600080fd5b6102e58482850161155b565b6000806000606084860312156117c257600080fd5b83356117cd81611359565b925060208401356117dd81611359565b9150604084013561175181611359565b60008060006060848603121561180257600080fd5b83356001600160401b0381111561181857600080fd5b611824868287016113f8565b93505060208401356117dd81611359565b60005b83811015611850578181015183820152602001611838565b838111156109325750506000910152565b60008151808452611879816020860160208601611835565b601f01601f19169290920160200192915050565b63ffffffff60e01b815116825260006020820151604060208501526102e56040850182611861565b60008151604084526118ca604085018261188d565b602093840151949093019390935250919050565b8281526040602082015260006102e560408301846118b5565b60008060006060848603121561190c57600080fd5b83356001600160401b0381111561192257600080fd5b611824868287016115b3565b600080600080610100858703121561194557600080fd5b84356001600160401b0381111561195b57600080fd5b611967878288016113f8565b9450506119778660208701611410565b939693955050505060c08201359160e0013590565b602081526000611352602083018461188d565b6000602082840312156119b157600080fd5b81516003811061135257600080fd5b600061026736836115b3565b60008235603e198336030181126119e257600080fd5b9190910192915050565b6000610267368361155b565b600060208284031215611a0a57600080fd5b815161135281611359565b634e487b7160e01b600052603260045260246000fd5b6020808252825182820181905260009190848201906040850190845b81811015611a6d5783516001600160e01b03191683529284019291840191600101611a47565b50909695505050505050565b8051801515811461133257600080fd5b60006020808385031215611a9c57600080fd5b82516001600160401b0380821115611ab357600080fd5b818501915085601f830112611ac757600080fd5b815181811115611ad957611ad9611470565b8060051b9150611aea8483016114ae565b8181529183018401918481019088841115611b0457600080fd5b938501935b83851015611b2957611b1a85611a79565b82529385019390850190611b09565b98975050505050505050565b63ffffffff8116811461109a57600080fd5b60008060408385031215611b5a57600080fd5b8251611b6581611b35565b602084015190925061164a81611b35565b803561133281611b35565b600060208284031215611b9357600080fd5b813561135281611b35565b60008219821115611bbf57634e487b7160e01b600052601160045260246000fd5b500190565b60008060408385031215611bd757600080fd5b611be083611a79565b915060208301516001600160401b03811115611bfb57600080fd5b8301601f81018513611c0c57600080fd5b8051611c1a611524826114de565b818152866020838501011115611c2f57600080fd5b611c40826020830160208601611835565b8093505050509250929050565b6020815260006113526020830184611861565b600060208284031215611c7257600080fd5b61135282611a79565b60008235603e19833603018112611c9157600080fd5b90910192915050565b6001600160e01b0319611cac8261131a565b16825260006020820135601e19833603018112611cc857600080fd5b820180356001600160401b03811115611ce057600080fd5b803603841315611cef57600080fd5b60406020860152806040860152806020830160608701376000606082870101526060601f19601f8301168601019250505092915050565b818352600060208085019450826000805b86811015611d9d57823560018110611d4d578283fd5b885282840135611d5c81611359565b6001600160a01b0390811689860152604084810135908a015260609081850135611d8581611359565b16908901526080978801979290920191600101611d37565b50959695505050505050565b60008135601e19833603018112611dbf57600080fd5b820180356001600160401b03811115611dd757600080fd5b8060071b3603841315611de957600080fd5b60c08552611dfe60c086018260208501611d26565b9150506020830135602085015260408301356040850152611e216060840161136e565b6001600160a01b0316606085015260808381013590850152611e4560a0840161136e565b6001600160a01b03811660a0860152509392505050565b85815284602082015283604082015260a060608201526000611e7e8485611c7b565b60e060a0840152611e8f8182611c7b565b6040610180850152611ea56101c0850182611c9a565b905060208201356101a0850152602086013560c0850152604086013560e0850152611ed26060870161136e565b6001600160a01b0381166101008601529150611ef060808701611b76565b63ffffffff81166101208601529150611f0b60a08701611b76565b63ffffffff81166101408601529150611f2760c0870187611c7b565b848203609f19016101608601529150611f408183611c9a565b9150508281036080840152611b298185611da9565b600060208284031215611f6757600080fd5b5051919050565b60018060a01b0384168152826020820152606060408201526000611f956060830184611861565b95945050505050565b60008060408385031215611fb157600080fd5b505080516020909101519092909150565b60008060408385031215611fd557600080fd5b8251611fe081611359565b6020939093015192949293505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061202390830184611861565b9695505050505050565b60408152600061204060408301856118b5565b8281036020840152611f95818561186156fea2646970667358221220d20f9c2dd76b541fe4ae1e40fc1432fda216c30bdfbc91a7d012e4895e4bef8d64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100e15760003560e01c8063b42ca9e311610086578063c95eb64d11610063578063c95eb64d146101d3578063e4f75ad3146101f4578063f19e254e14610207578063f55383ae1461022f57005b8063b42ca9e31461018c578063b7cc2e7b1461019f578063bfe0af99146101c057005b806369bdbd0e116100bf57806369bdbd0e1461013e57806386c9de051461015157806389897ace14610166578063997f62131461017957005b806301ffc9a7146100e35780633f09518c1461010b57806361f806471461012b575b005b6100f66100f1366004611337565b610242565b60405190151581526020015b60405180910390f35b61011e610119366004611379565b61026d565b60405161010291906113d0565b6100e1610139366004611422565b6102ed565b6100e161014c366004611604565b610816565b6040516339d690a360e11b8152602001610102565b6100e1610174366004611655565b6108dd565b6100e16101873660046116e1565b610938565b6100f661019a36600461175c565b610ae3565b6101b26101ad366004611779565b610b55565b604051908152602001610102565b6101b26101ce3660046117ad565b610bd3565b6101e66101e13660046117ed565b610c5c565b6040516101029291906118de565b6100e16102023660046118f7565b610e78565b61021a61021536600461192e565b610ee1565b60408051928352602083019190915201610102565b6100e161023d36600461175c565b611074565b60006001600160e01b031982166380e9fe1560e01b148061026757506102678261109d565b92915050565b6000836001600160a01b03166333a9320361028885856110d2565b6040518263ffffffff1660e01b81526004016102a4919061198c565b602060405180830381865afa1580156102c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e5919061199f565b949350505050565b6102fe6102f9836119c0565b611161565b6000610310604083016020840161175c565b9050600061032f61032185806119cc565b61032a906119ec565b6111d1565b9150600290506103a1836001600160a01b0316635a70a2836040518163ffffffff1660e01b8152600401602060405180830381865afa158015610376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039a91906119f8565b848461026d565b60028111156103b2576103b26113ba565b036103d057604051633c42e29760e11b815260040160405180910390fd5b60408051600380825260808201909252600091602082016060803683370190505090506370c8db7160e01b8160008151811061040e5761040e611a15565b60200260200101906001600160e01b03191690816001600160e01b0319168152505063331f761f60e01b8160018151811061044b5761044b611a15565b60200260200101906001600160e01b03191690816001600160e01b0319168152505063ca7cee2f60e01b8160028151811061048857610488611a15565b6001600160e01b0319909216602092830291909101909101526040516307e78cc160e21b81526000906001600160a01b03851690631f9e3304906104d0908590600401611a2b565b600060405180830381865afa1580156104ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105159190810190611a89565b90508060008151811061052a5761052a611a15565b60200260200101511561061357600080856001600160a01b031663d1958f2c6040518163ffffffff1660e01b81526004016040805180830381865afa158015610577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059b9190611b47565b915091508163ffffffff164210806105d7575063ffffffff81166105c56080890160608a01611b81565b6105d59063ffffffff1642611b9e565b115b156106105760405163a01a0f1b60e01b815242600482015263ffffffff8084166024830152821660448201526064015b60405180910390fd5b50505b8060018151811061062657610626611a15565b60200260200101511561072857600080856001600160a01b031662eb6ac76040518163ffffffff1660e01b81526004016040805180830381865afa158015610672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106969190611b47565b909250905063ffffffff82166106b26080890160608a01611b81565b63ffffffff1610806106de575063ffffffff81166106d66080890160608a01611b81565b63ffffffff16115b15610725576106f36080880160608901611b81565b60405163420ba8b160e11b815263ffffffff918216600482015281841660248201529082166044820152606401610607565b50505b8060028151811061073b5761073b611a15565b60200260200101511561080e576000806001600160a01b03861663ca7cee2f61076a60608a0160408b0161175c565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526024810188905260208b01356044820152606401600060405180830381865afa1580156107bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107e79190810190611bc4565b915091508161080b578060405163b0df8c7b60e01b81526004016106079190611c4d565b50505b505050505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361085f57604051637170f3db60e01b815260040160405180910390fd5b61086882611161565b60008061087884600001516111d1565b60405163be2b9a7960e01b81526001600160a01b038084166004830152602482018390529294509092509084169063be2b9a7990604401600060405180830381600087803b1580156108c957600080fd5b505af115801561080b573d6000803e3d6000fd5b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361092657604051637170f3db60e01b815260040160405180910390fd5b610932848484846111f5565b50505050565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361098157604051637170f3db60e01b815260040160405180910390fd5b61099761098e83806119cc565b6102f9906119c0565b6000806109b16109a785806119cc565b61032190806119cc565b6040516301ffc9a760e01b8152636459d68d60e11b600482015291935091506001600160a01b038316906301ffc9a790602401602060405180830381865afa158015610a01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a259190611c60565b15610adc576000806001600160a01b03841663c8b3ad1a8885610a488a806119cc565b602001358a8a6040518663ffffffff1660e01b8152600401610a6e959493929190611e5c565b6000604051808303816000875af1158015610a8d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ab59190810190611bc4565b9150915081610ad9578060405163b65087ad60e01b81526004016106079190611c4d565b50505b5050505050565b6040516301ffc9a760e01b81526394d008ef60e01b60048201526000906001600160a01b038316906301ffc9a790602401602060405180830381865afa158015610b31573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102679190611c60565b80516000906001600160e01b0319166339d690a360e11b14610bc25781517f73ad2146b3d3a286642c794379d750360a2d53a3459a11b3e5d6cc900f55f44a5b604051632e82eea160e11b81526001600160e01b0319928316600482015291166024820152604401610607565b610267610bce836112cc565b6112e6565b6000836001600160a01b0316631e347878610bed856112e6565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b0385166024820152604401602060405180830381865afa158015610c38573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e59190611f55565b6040805160808101825260009181018281526060808301528152602081018290526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610cc657604051637170f3db60e01b815260040160405180910390fd5b610cd26102f9866119c0565b600080610ce261032188806119cc565b91509150856001600160a01b031663f46c73c66040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4891906119f8565b6001600160a01b0316826001600160a01b031614610d8c576040516307a3e91560e41b81526001600160a01b03808816600483015283166024820152604401610607565b6040518060400160405280610da188846110d2565b81526020898101359101529250610db7866112e6565b93506000610dc630888461026d565b6002811115610dd757610dd76113ba565b03610e5057604080516000815260208101918290526394d008ef60e01b9091526001600160a01b038716906394d008ef90610e19908890859060248101611f6e565b600060405180830381600087803b158015610e3357600080fd5b505af1158015610e47573d6000803e3d6000fd5b50505050610e6e565b604080516000815260208101909152610e6e908490309088906111f5565b5050935093915050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610ec157604051637170f3db60e01b815260040160405180910390fd5b610edc838383604051806020016040528060008152506111f5565b505050565b600080610ef06102f9876119c0565b610f00604086016020870161175c565b6040516301ffc9a760e01b8152633573c0bd60e21b60048201526001600160a01b0391909116906301ffc9a790602401602060405180830381865afa158015610f4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f719190611c60565b15611064576000610f8561032188806119cc565b9150610f999050604087016020880161175c565b6001600160a01b031663d5cf02f4610fb76060890160408a0161175c565b8360208b0135610fcd60808c0160608d01611b81565b6040516001600160e01b031960e087901b1681526001600160a01b0390941660048501526024840192909252604483015263ffffffff1660648201526084810188905260a4810187905260c4016040805180830381865afa158015611036573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105a9190611f9e565b925092505061106b565b5060009050805b94509492505050565b61107d81610ae3565b61109a576040516347ac7e5360e11b815260040160405180910390fd5b50565b60006001600160e01b031982166335c66d6d60e01b148061026757506301ffc9a760e01b6001600160e01b0319831614610267565b60408051808201909152600081526060602082015260405180604001604052806111197f73ad2146b3d3a286642c794379d750360a2d53a3459a11b3e5d6cc900f55f44a90565b6001600160e01b0319168152604080516001600160a01b03871660208281019190915291810186905291019060600160408051601f1981840301815291905290529392505050565b8051516001600160e01b0319166339d690a360e11b146111a4578051517f73ad2146b3d3a286642c794379d750360a2d53a3459a11b3e5d6cc900f55f44a610b95565b806020015160011461109a5780602001516040516383f261dd60e01b815260040161060791815260200190565b60008082602001518060200190518101906111ec9190611fc2565b91509150915091565b6111fe84611161565b60008061120e86600001516111d1565b604051635c46a7ef60e11b815291935091506001600160a01b0383169063b88d4fde90611245908890889086908990600401611ff0565b600060405180830381600087803b15801561125f57600080fd5b505af1158015611273573d6000803e3d6000fd5b50505050836001600160a01b0316856001600160a01b03167ff65cd7509f02971efd9615ae50140cecf872cd4a266e3f6cac29f9b091fb32c788866040516112bc92919061202d565b60405180910390a3505050505050565b6000816020015180602001905181019061026791906119f8565b604080516001600160a01b038316602082015260009101604051602081830303815290604052805190602001209050919050565b80356001600160e01b03198116811461133257600080fd5b919050565b60006020828403121561134957600080fd5b6113528261131a565b9392505050565b6001600160a01b038116811461109a57600080fd5b803561133281611359565b60008060006060848603121561138e57600080fd5b833561139981611359565b925060208401356113a981611359565b929592945050506040919091013590565b634e487b7160e01b600052602160045260246000fd5b60208101600383106113f257634e487b7160e01b600052602160045260246000fd5b91905290565b60006040828403121561140a57600080fd5b50919050565b600060a0828403121561140a57600080fd5b60008060c0838503121561143557600080fd5b82356001600160401b0381111561144b57600080fd5b611457858286016113f8565b9250506114678460208501611410565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156114a8576114a8611470565b60405290565b604051601f8201601f191681016001600160401b03811182821017156114d6576114d6611470565b604052919050565b60006001600160401b038211156114f7576114f7611470565b50601f01601f191660200190565b600082601f83011261151657600080fd5b8135611529611524826114de565b6114ae565b81815284602083860101111561153e57600080fd5b816020850160208301376000918101602001919091529392505050565b60006040828403121561156d57600080fd5b611575611486565b90506115808261131a565b815260208201356001600160401b0381111561159b57600080fd5b6115a784828501611505565b60208301525092915050565b6000604082840312156115c557600080fd5b6115cd611486565b905081356001600160401b038111156115e557600080fd5b6115f18482850161155b565b8252506020820135602082015292915050565b6000806040838503121561161757600080fd5b82356001600160401b0381111561162d57600080fd5b611639858286016115b3565b925050602083013561164a81611359565b809150509250929050565b6000806000806080858703121561166b57600080fd5b84356001600160401b038082111561168257600080fd5b61168e888389016115b3565b9550602087013591506116a082611359565b9093506040860135906116b282611359565b909250606086013590808211156116c857600080fd5b506116d587828801611505565b91505092959194509250565b6000806000606084860312156116f657600080fd5b8335925060208401356001600160401b038082111561171457600080fd5b9085019060e0828803121561172857600080fd5b9092506040850135908082111561173e57600080fd5b50840160c0818703121561175157600080fd5b809150509250925092565b60006020828403121561176e57600080fd5b813561135281611359565b60006020828403121561178b57600080fd5b81356001600160401b038111156117a157600080fd5b6102e58482850161155b565b6000806000606084860312156117c257600080fd5b83356117cd81611359565b925060208401356117dd81611359565b9150604084013561175181611359565b60008060006060848603121561180257600080fd5b83356001600160401b0381111561181857600080fd5b611824868287016113f8565b93505060208401356117dd81611359565b60005b83811015611850578181015183820152602001611838565b838111156109325750506000910152565b60008151808452611879816020860160208601611835565b601f01601f19169290920160200192915050565b63ffffffff60e01b815116825260006020820151604060208501526102e56040850182611861565b60008151604084526118ca604085018261188d565b602093840151949093019390935250919050565b8281526040602082015260006102e560408301846118b5565b60008060006060848603121561190c57600080fd5b83356001600160401b0381111561192257600080fd5b611824868287016115b3565b600080600080610100858703121561194557600080fd5b84356001600160401b0381111561195b57600080fd5b611967878288016113f8565b9450506119778660208701611410565b939693955050505060c08201359160e0013590565b602081526000611352602083018461188d565b6000602082840312156119b157600080fd5b81516003811061135257600080fd5b600061026736836115b3565b60008235603e198336030181126119e257600080fd5b9190910192915050565b6000610267368361155b565b600060208284031215611a0a57600080fd5b815161135281611359565b634e487b7160e01b600052603260045260246000fd5b6020808252825182820181905260009190848201906040850190845b81811015611a6d5783516001600160e01b03191683529284019291840191600101611a47565b50909695505050505050565b8051801515811461133257600080fd5b60006020808385031215611a9c57600080fd5b82516001600160401b0380821115611ab357600080fd5b818501915085601f830112611ac757600080fd5b815181811115611ad957611ad9611470565b8060051b9150611aea8483016114ae565b8181529183018401918481019088841115611b0457600080fd5b938501935b83851015611b2957611b1a85611a79565b82529385019390850190611b09565b98975050505050505050565b63ffffffff8116811461109a57600080fd5b60008060408385031215611b5a57600080fd5b8251611b6581611b35565b602084015190925061164a81611b35565b803561133281611b35565b600060208284031215611b9357600080fd5b813561135281611b35565b60008219821115611bbf57634e487b7160e01b600052601160045260246000fd5b500190565b60008060408385031215611bd757600080fd5b611be083611a79565b915060208301516001600160401b03811115611bfb57600080fd5b8301601f81018513611c0c57600080fd5b8051611c1a611524826114de565b818152866020838501011115611c2f57600080fd5b611c40826020830160208601611835565b8093505050509250929050565b6020815260006113526020830184611861565b600060208284031215611c7257600080fd5b61135282611a79565b60008235603e19833603018112611c9157600080fd5b90910192915050565b6001600160e01b0319611cac8261131a565b16825260006020820135601e19833603018112611cc857600080fd5b820180356001600160401b03811115611ce057600080fd5b803603841315611cef57600080fd5b60406020860152806040860152806020830160608701376000606082870101526060601f19601f8301168601019250505092915050565b818352600060208085019450826000805b86811015611d9d57823560018110611d4d578283fd5b885282840135611d5c81611359565b6001600160a01b0390811689860152604084810135908a015260609081850135611d8581611359565b16908901526080978801979290920191600101611d37565b50959695505050505050565b60008135601e19833603018112611dbf57600080fd5b820180356001600160401b03811115611dd757600080fd5b8060071b3603841315611de957600080fd5b60c08552611dfe60c086018260208501611d26565b9150506020830135602085015260408301356040850152611e216060840161136e565b6001600160a01b0316606085015260808381013590850152611e4560a0840161136e565b6001600160a01b03811660a0860152509392505050565b85815284602082015283604082015260a060608201526000611e7e8485611c7b565b60e060a0840152611e8f8182611c7b565b6040610180850152611ea56101c0850182611c9a565b905060208201356101a0850152602086013560c0850152604086013560e0850152611ed26060870161136e565b6001600160a01b0381166101008601529150611ef060808701611b76565b63ffffffff81166101208601529150611f0b60a08701611b76565b63ffffffff81166101408601529150611f2760c0870187611c7b565b848203609f19016101608601529150611f408183611c9a565b9150508281036080840152611b298185611da9565b600060208284031215611f6757600080fd5b5051919050565b60018060a01b0384168152826020820152606060408201526000611f956060830184611861565b95945050505050565b60008060408385031215611fb157600080fd5b505080516020909101519092909150565b60008060408385031215611fd557600080fd5b8251611fe081611359565b6020939093015192949293505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061202390830184611861565b9695505050505050565b60408152600061204060408301856118b5565b8281036020840152611f95818561186156fea2646970667358221220d20f9c2dd76b541fe4ae1e40fc1432fda216c30bdfbc91a7d012e4895e4bef8d64736f6c634300080d0033",
  "devdoc": {
    "errors": {
      "AlreadyRented()": [
        {
          "details": "Thrown upon attempting to rent a warped asset which is already rented."
        }
      ],
      "AssetClassMismatch(bytes4,bytes4)": [
        {
          "details": "Thrown when the asset has invalid class for specific operation.",
          "params": {
            "provided": "Provided class ID.",
            "required": "Required class ID."
          }
        }
      ],
      "AssetIsNotRentable(string)": [
        {
          "details": "Thrown when the asset renting is rejected by warper due to the `reason`."
        }
      ],
      "FunctionMustBeCalledThroughDelegatecall()": [
        {
          "details": "Thrown when a function is called directly and not through a delegatecall."
        }
      ],
      "IncompatibleWarperInterface()": [
        {
          "details": "Thrown if warper interface is not compatible with the controller."
        }
      ],
      "InvalidAssetForWarper(address,address)": [
        {
          "details": "Thrown upon attempting to use the warper with an asset different from the one expected by the warper."
        }
      ],
      "InvalidERC721Value(uint256)": [
        {
          "details": "Thrown when the asset value is invalid for ERC721 token standard."
        }
      ],
      "RentingHookError(string)": [
        {
          "details": "Thrown when the renting hook execution failed due to the `reason`."
        }
      ],
      "WarperIsNotAvailableForRenting(uint256,uint32,uint32)": [
        {
          "details": "Thrown when the current time is not withing the warper availability period."
        }
      ],
      "WarperRentalPeriodIsOutOfRange(uint32,uint32,uint32)": [
        {
          "details": "Thrown when the requested rental period is not withing the warper allowed rental period range."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "assetClass()": {
        "details": "Returns controller asset class.",
        "returns": {
          "_0": "Asset class ID."
        }
      },
      "calculatePremiums(((bytes4,bytes),uint256),(uint256,address,address,uint32,address),uint256,uint256)": {
        "details": "Calculates the universe and/or lister premiums. Those are extra amounts that should be added the the resulting rental fee paid by renter.",
        "params": {
          "asset": "Asset being rented.",
          "listerFee": "The current value of the lister fee component.",
          "rentingParams": "Renting parameters.",
          "universeFee": "The current value of the universe fee component."
        },
        "returns": {
          "listerPremium": "The lister premium amount.",
          "universePremium": "The universe premium amount."
        }
      },
      "checkCompatibleWarper(address)": {
        "details": "Reverts if provided warper is not compatible with the controller."
      },
      "collectionId((bytes4,bytes))": {
        "details": "Decodes asset ID structure and returns collection identifier. The collection ID is byte32 value which is calculated based on the asset class. For example, ERC721 collection can be identified by address only, but for ERC1155 it should be calculated based on address and token ID.",
        "returns": {
          "_0": "Collection ID."
        }
      },
      "executeRentingHooks(uint256,(((bytes4,bytes),uint256),bytes32,uint256,address,uint32,uint32,(bytes4,bytes)),((uint8,address,uint256,address)[],uint256,uint256,address,uint256,address))": {
        "details": "Executes warper rental hook.",
        "params": {
          "rentalAgreement": "Newly registered rental agreement details.",
          "rentalEarnings": "The rental earnings breakdown.",
          "rentalId": "Rental agreement ID."
        }
      },
      "isCompatibleWarper(address)": {
        "details": "Validates that the warper interface is supported by the current WarperController.",
        "params": {
          "warper": "Warper whose interface we must validate."
        },
        "returns": {
          "_0": "bool - `true` if warper is supported."
        }
      },
      "rentalBalance(address,address,address)": {
        "details": "Get the active rental balance for a given warper and a renter.      Used in Warper->Metahub communication.",
        "params": {
          "metahub": "Address of the metahub.",
          "renter": "Address of the renter whose active rental counts we need to fetch.",
          "warper": "Address of the warper."
        }
      },
      "rentalStatus(address,address,uint256)": {
        "details": "Get the rental status of a specific token.      Used in Warper->Metahub communication.",
        "params": {
          "metahub": "Address of the metahub.",
          "tokenId": "The token ID to be checked for status.",
          "warper": "Address of the warper."
        }
      },
      "returnAssetFromVault(((bytes4,bytes),uint256),address)": {
        "details": "Transfers asset from the vault contract to the original owner.",
        "params": {
          "asset": "Asset being transferred.",
          "vault": "Asset vault contract address."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transfer(((bytes4,bytes),uint256),address,address,bytes)": {
        "details": "Transfers asset. Emits a {AssetTransfer} event.",
        "params": {
          "asset": "Asset being transferred.",
          "data": "Auxiliary data.",
          "from": "Asset sender.",
          "to": "Asset recipient."
        }
      },
      "transferAssetToVault(((bytes4,bytes),uint256),address,address)": {
        "details": "Transfers asset from owner to the vault contract.",
        "params": {
          "asset": "Asset being transferred.",
          "assetOwner": "Original asset owner address.",
          "vault": "Asset vault contract address."
        }
      },
      "validateRentingParams(((bytes4,bytes),uint256),(uint256,address,address,uint32,address))": {
        "details": "Validates renting params taking into account various warper mechanics. Throws an error if the specified asset cannot be rented with particular renting parameters.",
        "params": {
          "asset": "Asset being rented.",
          "rentingParams": "Renting parameters."
        }
      },
      "warp(((bytes4,bytes),uint256),address,address)": {
        "details": "Needs to be called with `delegatecall` from Metahub, otherwise warpers will reject the call.",
        "params": {
          "asset": "The asset that must be warped.",
          "to": "The account which will receive the warped asset.",
          "warper": "Warper contract to used for warping."
        },
        "returns": {
          "warpedAsset": "Warper asset structure.",
          "warpedCollectionId": "Warped collection ID."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}