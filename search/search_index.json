{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"IQ Contracts Deployed smart contract addresses BNB testnet Contract Address ACL 0x35E5f18A8A15b06C8A80346EAeDbcd5643283888 Metahub 0xbD0ac6866c1C15070182E3E8d030965225C990CA Asset class registry 0x459A3Bf3496CA1E2EB58eEC795BE38D8051927be Listing strategy registry 0x45d1434224af121018CD366570f9519335188D5b Universe registry 0x443D663eE3aCE0621E96A97C7CD09687Db6e62Df Universe token 0x0a29d2cC53332c932B7b90829F93e6B23B74223B Warper preset factory 0x6E9ae880c4c8D2d106C6686eeF79cc1b70A3d08C ERC721 asset vault 0x66A9b016E381BA752434fa655A5c900f2eb27C0D Warper manager 0x503e283b97F8B0f65BcE6E2cc2ff6B9114C80CCc Base token (ERC20) 0x7D6a53F6932eB3c13C6Da2650C9449F215365BA9 Mock ERC721 (for tests) 0x13B194B552fa059A9FB8cecc317D7085f7f254a6 Mumbai testnet Contract Address ACL 0x853Ddb5A8f8e2ab07eED3D4ab7f150Bdd630c120 Metahub 0x0D27eF3984D8B7772C83FA82A68c18D5a13F4E1d Asset class registry 0x5e1e698DF72EFD018fe37224Dac49176E3eA7d8C Listing strategy registry 0x93d1Edf85d38a6459629f89Ed6F71B770Db244F0 Universe registry 0xC42c3913Cd4fC352AEa0b8aC2376e8B5fD3D26ef Universe token 0x7a8C84709eE4D0a17f04b745036c5Ca7F71EBB2e Warper preset factory 0xcFc861e5994Aa8E6D783D31f33B961f851965B8f ERC721 asset vault 0xac7A1dA3aBCd700C17De85e4c6f9240C3f418574 Warper manager 0xB2ccA872BcD2Ab98A1Fd3877af49AF12deaA87E6 Base token (ERC20) 0xCE47795878dA67b6e9d63f1bc6D3289455D62792 Mock ERC721 (for tests) 0xBd57e36D63012a41a7FfF71fD92fe24EF9E32c6f","title":"IQ Contracts"},{"location":"#iq-contracts","text":"","title":"IQ Contracts"},{"location":"#deployed-smart-contract-addresses","text":"","title":"Deployed smart contract addresses"},{"location":"#bnb-testnet","text":"Contract Address ACL 0x35E5f18A8A15b06C8A80346EAeDbcd5643283888 Metahub 0xbD0ac6866c1C15070182E3E8d030965225C990CA Asset class registry 0x459A3Bf3496CA1E2EB58eEC795BE38D8051927be Listing strategy registry 0x45d1434224af121018CD366570f9519335188D5b Universe registry 0x443D663eE3aCE0621E96A97C7CD09687Db6e62Df Universe token 0x0a29d2cC53332c932B7b90829F93e6B23B74223B Warper preset factory 0x6E9ae880c4c8D2d106C6686eeF79cc1b70A3d08C ERC721 asset vault 0x66A9b016E381BA752434fa655A5c900f2eb27C0D Warper manager 0x503e283b97F8B0f65BcE6E2cc2ff6B9114C80CCc Base token (ERC20) 0x7D6a53F6932eB3c13C6Da2650C9449F215365BA9 Mock ERC721 (for tests) 0x13B194B552fa059A9FB8cecc317D7085f7f254a6","title":"BNB testnet"},{"location":"#mumbai-testnet","text":"Contract Address ACL 0x853Ddb5A8f8e2ab07eED3D4ab7f150Bdd630c120 Metahub 0x0D27eF3984D8B7772C83FA82A68c18D5a13F4E1d Asset class registry 0x5e1e698DF72EFD018fe37224Dac49176E3eA7d8C Listing strategy registry 0x93d1Edf85d38a6459629f89Ed6F71B770Db244F0 Universe registry 0xC42c3913Cd4fC352AEa0b8aC2376e8B5fD3D26ef Universe token 0x7a8C84709eE4D0a17f04b745036c5Ca7F71EBB2e Warper preset factory 0xcFc861e5994Aa8E6D783D31f33B961f851965B8f ERC721 asset vault 0xac7A1dA3aBCd700C17De85e4c6f9240C3f418574 Warper manager 0xB2ccA872BcD2Ab98A1Fd3877af49AF12deaA87E6 Base token (ERC20) 0xCE47795878dA67b6e9d63f1bc6D3289455D62792 Mock ERC721 (for tests) 0xBd57e36D63012a41a7FfF71fD92fe24EF9E32c6f","title":"Mumbai testnet"},{"location":"accounting/Accounts/","text":"Accounts RentalFeeSlippage error RentalFeeSlippage() Thrown when the estimated rental fee calculated upon renting is higher than maximal payment amount the renter is willing to pay. InvalidWithdrawalAmount error InvalidWithdrawalAmount(uint256 amount) Thrown when the amount requested to be paid out is not valid. InsufficientBalance error InsufficientBalance(uint256 balance) Thrown when the amount requested to be paid out is larger than available balance. Balance struct Balance { address token; uint256 amount; } Account struct Account { struct EnumerableMapUpgradeable.AddressToUintMap tokenBalances; } withdraw function withdraw(struct Accounts.Account self, address token, uint256 amount, address to) external Transfers funds from the account balance to the specific address after validating balance sufficiency. UserEarning struct UserEarning { enum IPaymentManager.EarningType earningType; address account; uint256 value; address token; } RentalEarnings struct RentalEarnings { struct Accounts.UserEarning[] userEarnings; uint256 universeId; uint256 universeEarningValue; address universeEarningToken; uint256 protocolEarningValue; address protocolEarningToken; } handleRentalPayment function handleRentalPayment(struct Accounts.Registry self, struct Rentings.Params rentingParams, struct Rentings.RentalFees fees, address payer, uint256 maxPaymentAmount, contract IWarperManager warperManager, struct Listings.Registry listingRegistry) external returns (struct Accounts.RentalEarnings earnings) increaseBalance function increaseBalance(struct Accounts.Account self, address token, uint256 amount) internal Increments value of the particular account balance. balance function balance(struct Accounts.Account self, address token) internal view returns (uint256) Returns account current balance. Does not revert if `token` is not in the map. balances function balances(struct Accounts.Account self) internal view returns (struct Accounts.Balance[]) Returns the list of account balances in various tokens. Registry struct Registry { struct Accounts.Account protocol; mapping(uint256 &#x3D;&gt; struct Accounts.Account) universes; mapping(address &#x3D;&gt; struct Accounts.Account) users; }","title":"Accounts"},{"location":"accounting/Accounts/#accounts","text":"","title":"Accounts"},{"location":"accounting/Accounts/#rentalfeeslippage","text":"error RentalFeeSlippage() Thrown when the estimated rental fee calculated upon renting is higher than maximal payment amount the renter is willing to pay.","title":"RentalFeeSlippage"},{"location":"accounting/Accounts/#invalidwithdrawalamount","text":"error InvalidWithdrawalAmount(uint256 amount) Thrown when the amount requested to be paid out is not valid.","title":"InvalidWithdrawalAmount"},{"location":"accounting/Accounts/#insufficientbalance","text":"error InsufficientBalance(uint256 balance) Thrown when the amount requested to be paid out is larger than available balance.","title":"InsufficientBalance"},{"location":"accounting/Accounts/#balance","text":"struct Balance { address token; uint256 amount; }","title":"Balance"},{"location":"accounting/Accounts/#account","text":"struct Account { struct EnumerableMapUpgradeable.AddressToUintMap tokenBalances; }","title":"Account"},{"location":"accounting/Accounts/#withdraw","text":"function withdraw(struct Accounts.Account self, address token, uint256 amount, address to) external Transfers funds from the account balance to the specific address after validating balance sufficiency.","title":"withdraw"},{"location":"accounting/Accounts/#userearning","text":"struct UserEarning { enum IPaymentManager.EarningType earningType; address account; uint256 value; address token; }","title":"UserEarning"},{"location":"accounting/Accounts/#rentalearnings","text":"struct RentalEarnings { struct Accounts.UserEarning[] userEarnings; uint256 universeId; uint256 universeEarningValue; address universeEarningToken; uint256 protocolEarningValue; address protocolEarningToken; }","title":"RentalEarnings"},{"location":"accounting/Accounts/#handlerentalpayment","text":"function handleRentalPayment(struct Accounts.Registry self, struct Rentings.Params rentingParams, struct Rentings.RentalFees fees, address payer, uint256 maxPaymentAmount, contract IWarperManager warperManager, struct Listings.Registry listingRegistry) external returns (struct Accounts.RentalEarnings earnings)","title":"handleRentalPayment"},{"location":"accounting/Accounts/#increasebalance","text":"function increaseBalance(struct Accounts.Account self, address token, uint256 amount) internal Increments value of the particular account balance.","title":"increaseBalance"},{"location":"accounting/Accounts/#balance_1","text":"function balance(struct Accounts.Account self, address token) internal view returns (uint256) Returns account current balance. Does not revert if `token` is not in the map.","title":"balance"},{"location":"accounting/Accounts/#balances","text":"function balances(struct Accounts.Account self) internal view returns (struct Accounts.Balance[]) Returns the list of account balances in various tokens.","title":"balances"},{"location":"accounting/Accounts/#registry","text":"struct Registry { struct Accounts.Account protocol; mapping(uint256 &#x3D;&gt; struct Accounts.Account) universes; mapping(address &#x3D;&gt; struct Accounts.Account) users; }","title":"Registry"},{"location":"accounting/IPaymentManager/","text":"IPaymentManager EarningType enum EarningType { LISTER_FEE } UserEarned event UserEarned(address user, enum IPaymentManager.EarningType earningType, address paymentToken, uint256 amount) Emitted when a user has earned some amount tokens. Name Type Description user address Address of the user that earned some amount. earningType enum IPaymentManager.EarningType Describes the type of the user. paymentToken address The currency that the user has earned. amount uint256 The amount of tokens that the user has earned. UniverseEarned event UniverseEarned(uint256 universeId, address paymentToken, uint256 amount) Emitted when the universe has earned some amount of tokens. Name Type Description universeId uint256 ID of the universe that earned the tokens. paymentToken address The currency that the user has earned. amount uint256 The amount of tokens that the user has earned. ProtocolEarned event ProtocolEarned(address paymentToken, uint256 amount) Emitted when the protocol has earned some amount of tokens. Name Type Description paymentToken address The currency that the user has earned. amount uint256 The amount of tokens that the user has earned. withdrawProtocolFunds function withdrawProtocolFunds(address token, uint256 amount, address to) external Transfers the specific `amount` of `token` from a protocol balance to an arbitrary address. Name Type Description token address The token address. amount uint256 The amount to be withdrawn. to address The payee address. withdrawUniverseFunds function withdrawUniverseFunds(uint256 universeId, address token, uint256 amount, address to) external Transfers the specific `amount` of `token` from a universe balance to an arbitrary address. Name Type Description universeId uint256 The universe ID. token address The token address. amount uint256 The amount to be withdrawn. to address The payee address. withdrawFunds function withdrawFunds(address token, uint256 amount, address to) external Transfers the specific `amount` of `token` from a user balance to an arbitrary address. Name Type Description token address The token address. amount uint256 The amount to be withdrawn. to address The payee address. protocolBalance function protocolBalance(address token) external view returns (uint256) Returns the amount of `token`, currently accumulated by the protocol. Name Type Description token address The token address. Name Type Description [0] uint256 Balance of `token`. protocolBalances function protocolBalances() external view returns (struct Accounts.Balance[]) Returns the list of protocol balances in various tokens. Name Type Description [0] struct Accounts.Balance[] List of balances. universeBalance function universeBalance(uint256 universeId, address token) external view returns (uint256) Returns the amount of `token`, currently accumulated by the universe. Name Type Description universeId uint256 The universe ID. token address The token address. Name Type Description [0] uint256 Balance of `token`. universeBalances function universeBalances(uint256 universeId) external view returns (struct Accounts.Balance[]) Returns the list of universe balances in various tokens. Name Type Description universeId uint256 The universe ID. Name Type Description [0] struct Accounts.Balance[] List of balances. balance function balance(address account, address token) external view returns (uint256) Returns the amount of `token`, currently accumulated by the user. Name Type Description account address The account to query the balance for. token address The token address. Name Type Description [0] uint256 Balance of `token`. balances function balances(address account) external view returns (struct Accounts.Balance[]) Returns the list of user balances in various tokens. Name Type Description account address The account to query the balance for. Name Type Description [0] struct Accounts.Balance[] List of balances.","title":"IPaymentManager"},{"location":"accounting/IPaymentManager/#ipaymentmanager","text":"","title":"IPaymentManager"},{"location":"accounting/IPaymentManager/#earningtype","text":"enum EarningType { LISTER_FEE }","title":"EarningType"},{"location":"accounting/IPaymentManager/#userearned","text":"event UserEarned(address user, enum IPaymentManager.EarningType earningType, address paymentToken, uint256 amount) Emitted when a user has earned some amount tokens. Name Type Description user address Address of the user that earned some amount. earningType enum IPaymentManager.EarningType Describes the type of the user. paymentToken address The currency that the user has earned. amount uint256 The amount of tokens that the user has earned.","title":"UserEarned"},{"location":"accounting/IPaymentManager/#universeearned","text":"event UniverseEarned(uint256 universeId, address paymentToken, uint256 amount) Emitted when the universe has earned some amount of tokens. Name Type Description universeId uint256 ID of the universe that earned the tokens. paymentToken address The currency that the user has earned. amount uint256 The amount of tokens that the user has earned.","title":"UniverseEarned"},{"location":"accounting/IPaymentManager/#protocolearned","text":"event ProtocolEarned(address paymentToken, uint256 amount) Emitted when the protocol has earned some amount of tokens. Name Type Description paymentToken address The currency that the user has earned. amount uint256 The amount of tokens that the user has earned.","title":"ProtocolEarned"},{"location":"accounting/IPaymentManager/#withdrawprotocolfunds","text":"function withdrawProtocolFunds(address token, uint256 amount, address to) external Transfers the specific `amount` of `token` from a protocol balance to an arbitrary address. Name Type Description token address The token address. amount uint256 The amount to be withdrawn. to address The payee address.","title":"withdrawProtocolFunds"},{"location":"accounting/IPaymentManager/#withdrawuniversefunds","text":"function withdrawUniverseFunds(uint256 universeId, address token, uint256 amount, address to) external Transfers the specific `amount` of `token` from a universe balance to an arbitrary address. Name Type Description universeId uint256 The universe ID. token address The token address. amount uint256 The amount to be withdrawn. to address The payee address.","title":"withdrawUniverseFunds"},{"location":"accounting/IPaymentManager/#withdrawfunds","text":"function withdrawFunds(address token, uint256 amount, address to) external Transfers the specific `amount` of `token` from a user balance to an arbitrary address. Name Type Description token address The token address. amount uint256 The amount to be withdrawn. to address The payee address.","title":"withdrawFunds"},{"location":"accounting/IPaymentManager/#protocolbalance","text":"function protocolBalance(address token) external view returns (uint256) Returns the amount of `token`, currently accumulated by the protocol. Name Type Description token address The token address. Name Type Description [0] uint256 Balance of `token`.","title":"protocolBalance"},{"location":"accounting/IPaymentManager/#protocolbalances","text":"function protocolBalances() external view returns (struct Accounts.Balance[]) Returns the list of protocol balances in various tokens. Name Type Description [0] struct Accounts.Balance[] List of balances.","title":"protocolBalances"},{"location":"accounting/IPaymentManager/#universebalance","text":"function universeBalance(uint256 universeId, address token) external view returns (uint256) Returns the amount of `token`, currently accumulated by the universe. Name Type Description universeId uint256 The universe ID. token address The token address. Name Type Description [0] uint256 Balance of `token`.","title":"universeBalance"},{"location":"accounting/IPaymentManager/#universebalances","text":"function universeBalances(uint256 universeId) external view returns (struct Accounts.Balance[]) Returns the list of universe balances in various tokens. Name Type Description universeId uint256 The universe ID. Name Type Description [0] struct Accounts.Balance[] List of balances.","title":"universeBalances"},{"location":"accounting/IPaymentManager/#balance","text":"function balance(address account, address token) external view returns (uint256) Returns the amount of `token`, currently accumulated by the user. Name Type Description account address The account to query the balance for. token address The token address. Name Type Description [0] uint256 Balance of `token`.","title":"balance"},{"location":"accounting/IPaymentManager/#balances","text":"function balances(address account) external view returns (struct Accounts.Balance[]) Returns the list of user balances in various tokens. Name Type Description account address The account to query the balance for. Name Type Description [0] struct Accounts.Balance[] List of balances.","title":"balances"},{"location":"acl/ACL/","text":"ACL constructor constructor() public Constructor that gets called for the implementation contract. initialize function initialize() external ACL initializer. checkRole function checkRole(bytes32 role, address account) external view revert if the `account` does not have the specified role. Name Type Description role bytes32 the role specifier. account address the address to check the role for. adminRole function adminRole() external pure returns (bytes32) Get the admin role describing bytes return role bytes supervisorRole function supervisorRole() external pure returns (bytes32) Get the supervisor role describing bytes return role bytes _authorizeUpgrade function _authorizeUpgrade(address newImplementation) internal virtual _Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by {upgradeTo} and {upgradeToAndCall}. Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}. ```solidity function authorizeUpgrade(address) internal override onlyOwner {} ``` _revokeRole function _revokeRole(bytes32 role, address account) internal virtual Overload {_revokeRole} to track enumerable memberships _acl function _acl() internal view virtual returns (contract IACL) return the IACL address","title":"ACL"},{"location":"acl/ACL/#acl","text":"","title":"ACL"},{"location":"acl/ACL/#constructor","text":"constructor() public Constructor that gets called for the implementation contract.","title":"constructor"},{"location":"acl/ACL/#initialize","text":"function initialize() external ACL initializer.","title":"initialize"},{"location":"acl/ACL/#checkrole","text":"function checkRole(bytes32 role, address account) external view revert if the `account` does not have the specified role. Name Type Description role bytes32 the role specifier. account address the address to check the role for.","title":"checkRole"},{"location":"acl/ACL/#adminrole","text":"function adminRole() external pure returns (bytes32) Get the admin role describing bytes return role bytes","title":"adminRole"},{"location":"acl/ACL/#supervisorrole","text":"function supervisorRole() external pure returns (bytes32) Get the supervisor role describing bytes return role bytes","title":"supervisorRole"},{"location":"acl/ACL/#_authorizeupgrade","text":"function _authorizeUpgrade(address newImplementation) internal virtual _Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by {upgradeTo} and {upgradeToAndCall}. Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}. ```solidity function authorizeUpgrade(address) internal override onlyOwner {} ```","title":"_authorizeUpgrade"},{"location":"acl/ACL/#_revokerole","text":"function _revokeRole(bytes32 role, address account) internal virtual Overload {_revokeRole} to track enumerable memberships","title":"_revokeRole"},{"location":"acl/ACL/#_acl","text":"function _acl() internal view virtual returns (contract IACL) return the IACL address","title":"_acl"},{"location":"acl/AccessControlled/","text":"AccessControlled onlyAdmin modifier onlyAdmin() Modifier to make a function callable by the admin account. onlySupervisor modifier onlySupervisor() Modifier to make a function callable by a supervisor account. _acl function _acl() internal view virtual returns (contract IACL) return the IACL address","title":"AccessControlled"},{"location":"acl/AccessControlled/#accesscontrolled","text":"","title":"AccessControlled"},{"location":"acl/AccessControlled/#onlyadmin","text":"modifier onlyAdmin() Modifier to make a function callable by the admin account.","title":"onlyAdmin"},{"location":"acl/AccessControlled/#onlysupervisor","text":"modifier onlySupervisor() Modifier to make a function callable by a supervisor account.","title":"onlySupervisor"},{"location":"acl/AccessControlled/#_acl","text":"function _acl() internal view virtual returns (contract IACL) return the IACL address","title":"_acl"},{"location":"acl/AccessControlledUpgradeable/","text":"AccessControlledUpgradeable onlyAdmin modifier onlyAdmin() Modifier to make a function callable by the admin account. onlySupervisor modifier onlySupervisor() Modifier to make a function callable by a supervisor account. _acl function _acl() internal view virtual returns (contract IACL) return the IACL address","title":"AccessControlledUpgradeable"},{"location":"acl/AccessControlledUpgradeable/#accesscontrolledupgradeable","text":"","title":"AccessControlledUpgradeable"},{"location":"acl/AccessControlledUpgradeable/#onlyadmin","text":"modifier onlyAdmin() Modifier to make a function callable by the admin account.","title":"onlyAdmin"},{"location":"acl/AccessControlledUpgradeable/#onlysupervisor","text":"modifier onlySupervisor() Modifier to make a function callable by a supervisor account.","title":"onlySupervisor"},{"location":"acl/AccessControlledUpgradeable/#_acl","text":"function _acl() internal view virtual returns (contract IACL) return the IACL address","title":"_acl"},{"location":"acl/IACL/","text":"IACL RolesContractIncorrectlyConfigured error RolesContractIncorrectlyConfigured() Thrown when the Admin roles bytes is incorrectly formatted. CannotRemoveLastAdmin error CannotRemoveLastAdmin() Thrown when the attempting to remove the very last admin from ACL. checkRole function checkRole(bytes32 role, address account) external view revert if the `account` does not have the specified role. Name Type Description role bytes32 the role specifier. account address the address to check the role for. adminRole function adminRole() external pure returns (bytes32) Get the admin role describing bytes return role bytes supervisorRole function supervisorRole() external pure returns (bytes32) Get the supervisor role describing bytes return role bytes","title":"IACL"},{"location":"acl/IACL/#iacl","text":"","title":"IACL"},{"location":"acl/IACL/#rolescontractincorrectlyconfigured","text":"error RolesContractIncorrectlyConfigured() Thrown when the Admin roles bytes is incorrectly formatted.","title":"RolesContractIncorrectlyConfigured"},{"location":"acl/IACL/#cannotremovelastadmin","text":"error CannotRemoveLastAdmin() Thrown when the attempting to remove the very last admin from ACL.","title":"CannotRemoveLastAdmin"},{"location":"acl/IACL/#checkrole","text":"function checkRole(bytes32 role, address account) external view revert if the `account` does not have the specified role. Name Type Description role bytes32 the role specifier. account address the address to check the role for.","title":"checkRole"},{"location":"acl/IACL/#adminrole","text":"function adminRole() external pure returns (bytes32) Get the admin role describing bytes return role bytes","title":"adminRole"},{"location":"acl/IACL/#supervisorrole","text":"function supervisorRole() external pure returns (bytes32) Get the supervisor role describing bytes return role bytes","title":"supervisorRole"},{"location":"acl/Roles/","text":"Roles ADMIN bytes32 ADMIN This maps directly to the OpenZeppelins AccessControl DEFAULT_ADMIN SUPERVISOR bytes32 SUPERVISOR","title":"Roles"},{"location":"acl/Roles/#roles","text":"","title":"Roles"},{"location":"acl/Roles/#admin","text":"bytes32 ADMIN This maps directly to the OpenZeppelins AccessControl DEFAULT_ADMIN","title":"ADMIN"},{"location":"acl/Roles/#supervisor","text":"bytes32 SUPERVISOR","title":"SUPERVISOR"},{"location":"asset/AssetClassRegistry/","text":"AssetClassRegistry onlyRegisteredAssetClass modifier onlyRegisteredAssetClass(bytes4 assetClass) Modifier to make a function callable only for the registered asset class. constructor constructor() public initialize function initialize(address acl) external AssetClassRegistry initializer. Name Type Description acl address ACL contract address. registerAssetClass function registerAssetClass(bytes4 assetClass, struct IAssetClassRegistry.ClassConfig config) external Registers new asset class. Name Type Description assetClass bytes4 Asset class ID. config struct IAssetClassRegistry.ClassConfig Asset class initial configuration. setAssetClassVault function setAssetClassVault(bytes4 assetClass, address vault) external Sets asset class vault. Name Type Description assetClass bytes4 Asset class ID. vault address Asset class vault address. setAssetClassController function setAssetClassController(bytes4 assetClass, address controller) external Sets asset class controller. Name Type Description assetClass bytes4 Asset class ID. controller address Asset class controller address. assetClassConfig function assetClassConfig(bytes4 assetClass) external view returns (struct IAssetClassRegistry.ClassConfig) Returns asset class configuration. Name Type Description assetClass bytes4 Asset class ID. Name Type Description [0] struct IAssetClassRegistry.ClassConfig Asset class configuration. isRegisteredAssetClass function isRegisteredAssetClass(bytes4 assetClass) public view returns (bool) Checks asset class registration. Name Type Description assetClass bytes4 Asset class ID. checkRegisteredAssetClass function checkRegisteredAssetClass(bytes4 assetClass) public view Reverts if asset class is not registered. Name Type Description assetClass bytes4 Asset class ID. _authorizeUpgrade function _authorizeUpgrade(address newImplementation) internal _Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by {upgradeTo} and {upgradeToAndCall}. Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}. ```solidity function authorizeUpgrade(address) internal override onlyOwner {} ``` _checkValidAssetController function _checkValidAssetController(bytes4 assetClass, address controller) internal view Reverts if provided address is not a valid asset controller address. Name Type Description assetClass bytes4 Asset class ID. controller address Asset controller address. _checkValidAssetVault function _checkValidAssetVault(bytes4 assetClass, address vault) internal view Reverts if provided address is not a valid asset vault address. Name Type Description assetClass bytes4 Asset class ID. vault address Asset vault address. _acl function _acl() internal view returns (contract IACL) return the IACL address","title":"AssetClassRegistry"},{"location":"asset/AssetClassRegistry/#assetclassregistry","text":"","title":"AssetClassRegistry"},{"location":"asset/AssetClassRegistry/#onlyregisteredassetclass","text":"modifier onlyRegisteredAssetClass(bytes4 assetClass) Modifier to make a function callable only for the registered asset class.","title":"onlyRegisteredAssetClass"},{"location":"asset/AssetClassRegistry/#constructor","text":"constructor() public","title":"constructor"},{"location":"asset/AssetClassRegistry/#initialize","text":"function initialize(address acl) external AssetClassRegistry initializer. Name Type Description acl address ACL contract address.","title":"initialize"},{"location":"asset/AssetClassRegistry/#registerassetclass","text":"function registerAssetClass(bytes4 assetClass, struct IAssetClassRegistry.ClassConfig config) external Registers new asset class. Name Type Description assetClass bytes4 Asset class ID. config struct IAssetClassRegistry.ClassConfig Asset class initial configuration.","title":"registerAssetClass"},{"location":"asset/AssetClassRegistry/#setassetclassvault","text":"function setAssetClassVault(bytes4 assetClass, address vault) external Sets asset class vault. Name Type Description assetClass bytes4 Asset class ID. vault address Asset class vault address.","title":"setAssetClassVault"},{"location":"asset/AssetClassRegistry/#setassetclasscontroller","text":"function setAssetClassController(bytes4 assetClass, address controller) external Sets asset class controller. Name Type Description assetClass bytes4 Asset class ID. controller address Asset class controller address.","title":"setAssetClassController"},{"location":"asset/AssetClassRegistry/#assetclassconfig","text":"function assetClassConfig(bytes4 assetClass) external view returns (struct IAssetClassRegistry.ClassConfig) Returns asset class configuration. Name Type Description assetClass bytes4 Asset class ID. Name Type Description [0] struct IAssetClassRegistry.ClassConfig Asset class configuration.","title":"assetClassConfig"},{"location":"asset/AssetClassRegistry/#isregisteredassetclass","text":"function isRegisteredAssetClass(bytes4 assetClass) public view returns (bool) Checks asset class registration. Name Type Description assetClass bytes4 Asset class ID.","title":"isRegisteredAssetClass"},{"location":"asset/AssetClassRegistry/#checkregisteredassetclass","text":"function checkRegisteredAssetClass(bytes4 assetClass) public view Reverts if asset class is not registered. Name Type Description assetClass bytes4 Asset class ID.","title":"checkRegisteredAssetClass"},{"location":"asset/AssetClassRegistry/#_authorizeupgrade","text":"function _authorizeUpgrade(address newImplementation) internal _Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by {upgradeTo} and {upgradeToAndCall}. Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}. ```solidity function authorizeUpgrade(address) internal override onlyOwner {} ```","title":"_authorizeUpgrade"},{"location":"asset/AssetClassRegistry/#_checkvalidassetcontroller","text":"function _checkValidAssetController(bytes4 assetClass, address controller) internal view Reverts if provided address is not a valid asset controller address. Name Type Description assetClass bytes4 Asset class ID. controller address Asset controller address.","title":"_checkValidAssetController"},{"location":"asset/AssetClassRegistry/#_checkvalidassetvault","text":"function _checkValidAssetVault(bytes4 assetClass, address vault) internal view Reverts if provided address is not a valid asset vault address. Name Type Description assetClass bytes4 Asset class ID. vault address Asset vault address.","title":"_checkValidAssetVault"},{"location":"asset/AssetClassRegistry/#_acl","text":"function _acl() internal view returns (contract IACL) return the IACL address","title":"_acl"},{"location":"asset/AssetClassRegistryStorage/","text":"AssetClassRegistryStorage _aclContract contract IACL _aclContract ACL contract. _classes mapping(bytes4 &#x3D;&gt; struct IAssetClassRegistry.ClassConfig) _classes Mapping from asset class ID to the asset class configuration.","title":"AssetClassRegistryStorage"},{"location":"asset/AssetClassRegistryStorage/#assetclassregistrystorage","text":"","title":"AssetClassRegistryStorage"},{"location":"asset/AssetClassRegistryStorage/#_aclcontract","text":"contract IACL _aclContract ACL contract.","title":"_aclContract"},{"location":"asset/AssetClassRegistryStorage/#_classes","text":"mapping(bytes4 &#x3D;&gt; struct IAssetClassRegistry.ClassConfig) _classes Mapping from asset class ID to the asset class configuration.","title":"_classes"},{"location":"asset/AssetController/","text":"AssetController fallback fallback() external The fallback function is needed to ensure forward compatibility with Metahub. When introducing a new version of controller with additional external functions, it must be safe to call the those new functions on previous generation of controllers and it must not cause the transaction revert. supportsInterface function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._","title":"AssetController"},{"location":"asset/AssetController/#assetcontroller","text":"","title":"AssetController"},{"location":"asset/AssetController/#fallback","text":"fallback() external The fallback function is needed to ensure forward compatibility with Metahub. When introducing a new version of controller with additional external functions, it must be safe to call the those new functions on previous generation of controllers and it must not cause the transaction revert.","title":"fallback"},{"location":"asset/AssetController/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._","title":"supportsInterface"},{"location":"asset/AssetVault/","text":"AssetVault _During the normal operation time, only Metahub contract is allowed to initiate asset return to the original asset owner. In case of emergency, the vault admin can switch vault to recovery mode, therefore allowing anyone to initiate asset return. NOTE: There is no way to transfer asset from the vault to an arbitrary address. The asset can only be returned to the rightful owner. Warning: All tokens transferred to the vault contract directly (not by Metahub contract) will be lost forever!!!_ _recovery bool _recovery Vault recovery mode state. _metahub address _metahub Metahub address. _aclContract contract IACL _aclContract ACL contract. whenAssetDepositAllowed modifier whenAssetDepositAllowed(address operator) Modifier to check asset deposit possibility. whenAssetReturnAllowed modifier whenAssetReturnAllowed() Modifier to check asset return possibility. whenNotRecovery modifier whenNotRecovery() Modifier to make a function callable only when the vault is not in recovery mode. constructor constructor(address metahubContract, address aclContract) internal Constructor. Name Type Description metahubContract address Metahub contract address. aclContract address ACL contract address. pause function pause() external Pauses the vault. unpause function unpause() external Unpauses the vault. switchToRecoveryMode function switchToRecoveryMode() external Activates asset recovery mode. Emits a {RecoveryModeActivated} event. withdrawERC20Tokens function withdrawERC20Tokens(contract IERC20 token, address to, uint256 amount) external Send ERC20 tokens to an address. metahub function metahub() external view returns (address) Returns the Metahub address. isRecovery function isRecovery() external view returns (bool) Returns vault recovery mode flag state. Name Type Description [0] bool True when the vault is in recovery mode. supportsInterface function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._ _acl function _acl() internal view returns (contract IACL) return the IACL address","title":"AssetVault"},{"location":"asset/AssetVault/#assetvault","text":"_During the normal operation time, only Metahub contract is allowed to initiate asset return to the original asset owner. In case of emergency, the vault admin can switch vault to recovery mode, therefore allowing anyone to initiate asset return. NOTE: There is no way to transfer asset from the vault to an arbitrary address. The asset can only be returned to the rightful owner. Warning: All tokens transferred to the vault contract directly (not by Metahub contract) will be lost forever!!!_","title":"AssetVault"},{"location":"asset/AssetVault/#_recovery","text":"bool _recovery Vault recovery mode state.","title":"_recovery"},{"location":"asset/AssetVault/#_metahub","text":"address _metahub Metahub address.","title":"_metahub"},{"location":"asset/AssetVault/#_aclcontract","text":"contract IACL _aclContract ACL contract.","title":"_aclContract"},{"location":"asset/AssetVault/#whenassetdepositallowed","text":"modifier whenAssetDepositAllowed(address operator) Modifier to check asset deposit possibility.","title":"whenAssetDepositAllowed"},{"location":"asset/AssetVault/#whenassetreturnallowed","text":"modifier whenAssetReturnAllowed() Modifier to check asset return possibility.","title":"whenAssetReturnAllowed"},{"location":"asset/AssetVault/#whennotrecovery","text":"modifier whenNotRecovery() Modifier to make a function callable only when the vault is not in recovery mode.","title":"whenNotRecovery"},{"location":"asset/AssetVault/#constructor","text":"constructor(address metahubContract, address aclContract) internal Constructor. Name Type Description metahubContract address Metahub contract address. aclContract address ACL contract address.","title":"constructor"},{"location":"asset/AssetVault/#pause","text":"function pause() external Pauses the vault.","title":"pause"},{"location":"asset/AssetVault/#unpause","text":"function unpause() external Unpauses the vault.","title":"unpause"},{"location":"asset/AssetVault/#switchtorecoverymode","text":"function switchToRecoveryMode() external Activates asset recovery mode. Emits a {RecoveryModeActivated} event.","title":"switchToRecoveryMode"},{"location":"asset/AssetVault/#withdrawerc20tokens","text":"function withdrawERC20Tokens(contract IERC20 token, address to, uint256 amount) external Send ERC20 tokens to an address.","title":"withdrawERC20Tokens"},{"location":"asset/AssetVault/#metahub","text":"function metahub() external view returns (address) Returns the Metahub address.","title":"metahub"},{"location":"asset/AssetVault/#isrecovery","text":"function isRecovery() external view returns (bool) Returns vault recovery mode flag state. Name Type Description [0] bool True when the vault is in recovery mode.","title":"isRecovery"},{"location":"asset/AssetVault/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._","title":"supportsInterface"},{"location":"asset/AssetVault/#_acl","text":"function _acl() internal view returns (contract IACL) return the IACL address","title":"_acl"},{"location":"asset/Assets/","text":"Assets ERC721 bytes4 ERC721 ERC1155 bytes4 ERC1155 ASSET_ID_TYPEHASH bytes32 ASSET_ID_TYPEHASH ASSET_TYPEHASH bytes32 ASSET_TYPEHASH AssetIsAlreadyRegistered error AssetIsAlreadyRegistered(address asset) Thrown upon attempting to register an asset twice. Name Type Description asset address Duplicate asset address. AssetId struct AssetId { bytes4 class; bytes data; } hash function hash(struct Assets.AssetId assetId) internal pure returns (bytes32) Calculates Asset ID hash token function token(struct Assets.AssetId self) internal pure returns (address) Extracts token contract address from the Asset ID structure. The address is the common attribute for all assets regardless of their asset class. Asset struct Asset { struct Assets.AssetId id; uint256 value; } hash function hash(struct Assets.Asset asset) internal pure returns (bytes32) Calculates Asset hash token function token(struct Assets.Asset self) internal pure returns (address) Extracts token contract address from the Asset structure. The address is the common attribute for all assets regardless of their asset class. AssetConfig struct AssetConfig { contract IAssetController controller; bytes4 assetClass; contract IAssetVault vault; } Registry struct Registry { contract IAssetClassRegistry classRegistry; struct EnumerableSetUpgradeable.AddressSet assetIndex; mapping(address &#x3D;&gt; struct Assets.AssetConfig) assets; } registerAsset function registerAsset(struct Assets.Registry self, bytes4 assetClass, address asset) external Registers new asset. supportedAssets function supportedAssets(struct Assets.Registry self, uint256 offset, uint256 limit) external view returns (address[], struct Assets.AssetConfig[]) Returns the paginated list of currently registered listings and their corresponding asset configs. transferAssetToVault function transferAssetToVault(struct Assets.Registry self, struct Assets.Asset asset, address from) external Transfers an asset to the vault using associated controller. returnAssetFromVault function returnAssetFromVault(struct Assets.Registry self, struct Assets.Asset asset) external Transfers an asset from the vault using associated controller. assetCount function assetCount(struct Assets.Registry self) internal view returns (uint256) isRegisteredAsset function isRegisteredAsset(struct Assets.Registry self, address asset) internal view returns (bool) Checks asset registration by address. assetClassController function assetClassController(struct Assets.Registry self, bytes4 assetClass) internal view returns (address) Returns controller for asset class. Name Type Description self struct Assets.Registry assetClass bytes4 Asset class ID.","title":"Assets"},{"location":"asset/Assets/#assets","text":"","title":"Assets"},{"location":"asset/Assets/#erc721","text":"bytes4 ERC721","title":"ERC721"},{"location":"asset/Assets/#erc1155","text":"bytes4 ERC1155","title":"ERC1155"},{"location":"asset/Assets/#asset_id_typehash","text":"bytes32 ASSET_ID_TYPEHASH","title":"ASSET_ID_TYPEHASH"},{"location":"asset/Assets/#asset_typehash","text":"bytes32 ASSET_TYPEHASH","title":"ASSET_TYPEHASH"},{"location":"asset/Assets/#assetisalreadyregistered","text":"error AssetIsAlreadyRegistered(address asset) Thrown upon attempting to register an asset twice. Name Type Description asset address Duplicate asset address.","title":"AssetIsAlreadyRegistered"},{"location":"asset/Assets/#assetid","text":"struct AssetId { bytes4 class; bytes data; }","title":"AssetId"},{"location":"asset/Assets/#hash","text":"function hash(struct Assets.AssetId assetId) internal pure returns (bytes32) Calculates Asset ID hash","title":"hash"},{"location":"asset/Assets/#token","text":"function token(struct Assets.AssetId self) internal pure returns (address) Extracts token contract address from the Asset ID structure. The address is the common attribute for all assets regardless of their asset class.","title":"token"},{"location":"asset/Assets/#asset","text":"struct Asset { struct Assets.AssetId id; uint256 value; }","title":"Asset"},{"location":"asset/Assets/#hash_1","text":"function hash(struct Assets.Asset asset) internal pure returns (bytes32) Calculates Asset hash","title":"hash"},{"location":"asset/Assets/#token_1","text":"function token(struct Assets.Asset self) internal pure returns (address) Extracts token contract address from the Asset structure. The address is the common attribute for all assets regardless of their asset class.","title":"token"},{"location":"asset/Assets/#assetconfig","text":"struct AssetConfig { contract IAssetController controller; bytes4 assetClass; contract IAssetVault vault; }","title":"AssetConfig"},{"location":"asset/Assets/#registry","text":"struct Registry { contract IAssetClassRegistry classRegistry; struct EnumerableSetUpgradeable.AddressSet assetIndex; mapping(address &#x3D;&gt; struct Assets.AssetConfig) assets; }","title":"Registry"},{"location":"asset/Assets/#registerasset","text":"function registerAsset(struct Assets.Registry self, bytes4 assetClass, address asset) external Registers new asset.","title":"registerAsset"},{"location":"asset/Assets/#supportedassets","text":"function supportedAssets(struct Assets.Registry self, uint256 offset, uint256 limit) external view returns (address[], struct Assets.AssetConfig[]) Returns the paginated list of currently registered listings and their corresponding asset configs.","title":"supportedAssets"},{"location":"asset/Assets/#transferassettovault","text":"function transferAssetToVault(struct Assets.Registry self, struct Assets.Asset asset, address from) external Transfers an asset to the vault using associated controller.","title":"transferAssetToVault"},{"location":"asset/Assets/#returnassetfromvault","text":"function returnAssetFromVault(struct Assets.Registry self, struct Assets.Asset asset) external Transfers an asset from the vault using associated controller.","title":"returnAssetFromVault"},{"location":"asset/Assets/#assetcount","text":"function assetCount(struct Assets.Registry self) internal view returns (uint256)","title":"assetCount"},{"location":"asset/Assets/#isregisteredasset","text":"function isRegisteredAsset(struct Assets.Registry self, address asset) internal view returns (bool) Checks asset registration by address.","title":"isRegisteredAsset"},{"location":"asset/Assets/#assetclasscontroller","text":"function assetClassController(struct Assets.Registry self, bytes4 assetClass) internal view returns (address) Returns controller for asset class. Name Type Description self struct Assets.Registry assetClass bytes4 Asset class ID.","title":"assetClassController"},{"location":"asset/IAssetClassRegistry/","text":"IAssetClassRegistry AssetClassMismatch error AssetClassMismatch(bytes4 provided, bytes4 required) Thrown when the asset class supported by contract does not match the required one. Name Type Description provided bytes4 Provided class ID. required bytes4 Required class ID. AssetClassIsAlreadyRegistered error AssetClassIsAlreadyRegistered(bytes4 assetClass) Thrown upon attempting to register an asset class twice. Name Type Description assetClass bytes4 Duplicate asset class ID. UnregisteredAssetClass error UnregisteredAssetClass(bytes4 assetClass) Thrown upon attempting to work with unregistered asset class. Name Type Description assetClass bytes4 Asset class ID. InvalidAssetControllerInterface error InvalidAssetControllerInterface() Thrown when the asset controller contract does not implement the required interface. InvalidAssetVaultInterface error InvalidAssetVaultInterface() Thrown when the vault contract does not implement the required interface. AssetClassRegistered event AssetClassRegistered(bytes4 assetClass, address controller, address vault) Emitted when the new asset class is registered. Name Type Description assetClass bytes4 Asset class ID. controller address Controller address. vault address Vault address. AssetClassControllerChanged event AssetClassControllerChanged(bytes4 assetClass, address newController) Emitted when the asset class controller is changed. Name Type Description assetClass bytes4 Asset class ID. newController address New controller address. AssetClassVaultChanged event AssetClassVaultChanged(bytes4 assetClass, address newVault) Emitted when the asset class vault is changed. Name Type Description assetClass bytes4 Asset class ID. newVault address New vault address. ClassConfig struct ClassConfig { address vault; address controller; } registerAssetClass function registerAssetClass(bytes4 assetClass, struct IAssetClassRegistry.ClassConfig config) external Registers new asset class. Name Type Description assetClass bytes4 Asset class ID. config struct IAssetClassRegistry.ClassConfig Asset class initial configuration. setAssetClassVault function setAssetClassVault(bytes4 assetClass, address vault) external Sets asset class vault. Name Type Description assetClass bytes4 Asset class ID. vault address Asset class vault address. setAssetClassController function setAssetClassController(bytes4 assetClass, address controller) external Sets asset class controller. Name Type Description assetClass bytes4 Asset class ID. controller address Asset class controller address. assetClassConfig function assetClassConfig(bytes4 assetClass) external view returns (struct IAssetClassRegistry.ClassConfig) Returns asset class configuration. Name Type Description assetClass bytes4 Asset class ID. Name Type Description [0] struct IAssetClassRegistry.ClassConfig Asset class configuration. isRegisteredAssetClass function isRegisteredAssetClass(bytes4 assetClass) external view returns (bool) Checks asset class registration. Name Type Description assetClass bytes4 Asset class ID. checkRegisteredAssetClass function checkRegisteredAssetClass(bytes4 assetClass) external view Reverts if asset class is not registered. Name Type Description assetClass bytes4 Asset class ID.","title":"IAssetClassRegistry"},{"location":"asset/IAssetClassRegistry/#iassetclassregistry","text":"","title":"IAssetClassRegistry"},{"location":"asset/IAssetClassRegistry/#assetclassmismatch","text":"error AssetClassMismatch(bytes4 provided, bytes4 required) Thrown when the asset class supported by contract does not match the required one. Name Type Description provided bytes4 Provided class ID. required bytes4 Required class ID.","title":"AssetClassMismatch"},{"location":"asset/IAssetClassRegistry/#assetclassisalreadyregistered","text":"error AssetClassIsAlreadyRegistered(bytes4 assetClass) Thrown upon attempting to register an asset class twice. Name Type Description assetClass bytes4 Duplicate asset class ID.","title":"AssetClassIsAlreadyRegistered"},{"location":"asset/IAssetClassRegistry/#unregisteredassetclass","text":"error UnregisteredAssetClass(bytes4 assetClass) Thrown upon attempting to work with unregistered asset class. Name Type Description assetClass bytes4 Asset class ID.","title":"UnregisteredAssetClass"},{"location":"asset/IAssetClassRegistry/#invalidassetcontrollerinterface","text":"error InvalidAssetControllerInterface() Thrown when the asset controller contract does not implement the required interface.","title":"InvalidAssetControllerInterface"},{"location":"asset/IAssetClassRegistry/#invalidassetvaultinterface","text":"error InvalidAssetVaultInterface() Thrown when the vault contract does not implement the required interface.","title":"InvalidAssetVaultInterface"},{"location":"asset/IAssetClassRegistry/#assetclassregistered","text":"event AssetClassRegistered(bytes4 assetClass, address controller, address vault) Emitted when the new asset class is registered. Name Type Description assetClass bytes4 Asset class ID. controller address Controller address. vault address Vault address.","title":"AssetClassRegistered"},{"location":"asset/IAssetClassRegistry/#assetclasscontrollerchanged","text":"event AssetClassControllerChanged(bytes4 assetClass, address newController) Emitted when the asset class controller is changed. Name Type Description assetClass bytes4 Asset class ID. newController address New controller address.","title":"AssetClassControllerChanged"},{"location":"asset/IAssetClassRegistry/#assetclassvaultchanged","text":"event AssetClassVaultChanged(bytes4 assetClass, address newVault) Emitted when the asset class vault is changed. Name Type Description assetClass bytes4 Asset class ID. newVault address New vault address.","title":"AssetClassVaultChanged"},{"location":"asset/IAssetClassRegistry/#classconfig","text":"struct ClassConfig { address vault; address controller; }","title":"ClassConfig"},{"location":"asset/IAssetClassRegistry/#registerassetclass","text":"function registerAssetClass(bytes4 assetClass, struct IAssetClassRegistry.ClassConfig config) external Registers new asset class. Name Type Description assetClass bytes4 Asset class ID. config struct IAssetClassRegistry.ClassConfig Asset class initial configuration.","title":"registerAssetClass"},{"location":"asset/IAssetClassRegistry/#setassetclassvault","text":"function setAssetClassVault(bytes4 assetClass, address vault) external Sets asset class vault. Name Type Description assetClass bytes4 Asset class ID. vault address Asset class vault address.","title":"setAssetClassVault"},{"location":"asset/IAssetClassRegistry/#setassetclasscontroller","text":"function setAssetClassController(bytes4 assetClass, address controller) external Sets asset class controller. Name Type Description assetClass bytes4 Asset class ID. controller address Asset class controller address.","title":"setAssetClassController"},{"location":"asset/IAssetClassRegistry/#assetclassconfig","text":"function assetClassConfig(bytes4 assetClass) external view returns (struct IAssetClassRegistry.ClassConfig) Returns asset class configuration. Name Type Description assetClass bytes4 Asset class ID. Name Type Description [0] struct IAssetClassRegistry.ClassConfig Asset class configuration.","title":"assetClassConfig"},{"location":"asset/IAssetClassRegistry/#isregisteredassetclass","text":"function isRegisteredAssetClass(bytes4 assetClass) external view returns (bool) Checks asset class registration. Name Type Description assetClass bytes4 Asset class ID.","title":"isRegisteredAssetClass"},{"location":"asset/IAssetClassRegistry/#checkregisteredassetclass","text":"function checkRegisteredAssetClass(bytes4 assetClass) external view Reverts if asset class is not registered. Name Type Description assetClass bytes4 Asset class ID.","title":"checkRegisteredAssetClass"},{"location":"asset/IAssetController/","text":"IAssetController AssetClassMismatch error AssetClassMismatch(bytes4 provided, bytes4 required) Thrown when the asset has invalid class for specific operation. Name Type Description provided bytes4 Provided class ID. required bytes4 Required class ID. AssetTransfer event AssetTransfer(struct Assets.Asset asset, address from, address to, bytes data) Emitted when asset is transferred. Name Type Description asset struct Assets.Asset Asset being transferred. from address Asset sender. to address Asset recipient. data bytes Auxiliary data. assetClass function assetClass() external pure returns (bytes4) Returns controller asset class. Name Type Description [0] bytes4 Asset class ID. transfer function transfer(struct Assets.Asset asset, address from, address to, bytes data) external Transfers asset. Emits a {AssetTransfer} event. Name Type Description asset struct Assets.Asset Asset being transferred. from address Asset sender. to address Asset recipient. data bytes Auxiliary data. transferAssetToVault function transferAssetToVault(struct Assets.Asset asset, address assetOwner, address vault) external Transfers asset from owner to the vault contract. Name Type Description asset struct Assets.Asset Asset being transferred. assetOwner address Original asset owner address. vault address Asset vault contract address. returnAssetFromVault function returnAssetFromVault(struct Assets.Asset asset, address vault) external Transfers asset from the vault contract to the original owner. Name Type Description asset struct Assets.Asset Asset being transferred. vault address Asset vault contract address. collectionId function collectionId(struct Assets.AssetId assetId) external pure returns (bytes32) Decodes asset ID structure and returns collection identifier. The collection ID is byte32 value which is calculated based on the asset class. For example, ERC721 collection can be identified by address only, but for ERC1155 it should be calculated based on address and token ID. Name Type Description [0] bytes32 Collection ID.","title":"IAssetController"},{"location":"asset/IAssetController/#iassetcontroller","text":"","title":"IAssetController"},{"location":"asset/IAssetController/#assetclassmismatch","text":"error AssetClassMismatch(bytes4 provided, bytes4 required) Thrown when the asset has invalid class for specific operation. Name Type Description provided bytes4 Provided class ID. required bytes4 Required class ID.","title":"AssetClassMismatch"},{"location":"asset/IAssetController/#assettransfer","text":"event AssetTransfer(struct Assets.Asset asset, address from, address to, bytes data) Emitted when asset is transferred. Name Type Description asset struct Assets.Asset Asset being transferred. from address Asset sender. to address Asset recipient. data bytes Auxiliary data.","title":"AssetTransfer"},{"location":"asset/IAssetController/#assetclass","text":"function assetClass() external pure returns (bytes4) Returns controller asset class. Name Type Description [0] bytes4 Asset class ID.","title":"assetClass"},{"location":"asset/IAssetController/#transfer","text":"function transfer(struct Assets.Asset asset, address from, address to, bytes data) external Transfers asset. Emits a {AssetTransfer} event. Name Type Description asset struct Assets.Asset Asset being transferred. from address Asset sender. to address Asset recipient. data bytes Auxiliary data.","title":"transfer"},{"location":"asset/IAssetController/#transferassettovault","text":"function transferAssetToVault(struct Assets.Asset asset, address assetOwner, address vault) external Transfers asset from owner to the vault contract. Name Type Description asset struct Assets.Asset Asset being transferred. assetOwner address Original asset owner address. vault address Asset vault contract address.","title":"transferAssetToVault"},{"location":"asset/IAssetController/#returnassetfromvault","text":"function returnAssetFromVault(struct Assets.Asset asset, address vault) external Transfers asset from the vault contract to the original owner. Name Type Description asset struct Assets.Asset Asset being transferred. vault address Asset vault contract address.","title":"returnAssetFromVault"},{"location":"asset/IAssetController/#collectionid","text":"function collectionId(struct Assets.AssetId assetId) external pure returns (bytes32) Decodes asset ID structure and returns collection identifier. The collection ID is byte32 value which is calculated based on the asset class. For example, ERC721 collection can be identified by address only, but for ERC1155 it should be calculated based on address and token ID. Name Type Description [0] bytes32 Collection ID.","title":"collectionId"},{"location":"asset/IAssetManager/","text":"IAssetManager registerAsset function registerAsset(bytes4 assetClass, address original) external Register a new asset. Name Type Description assetClass bytes4 Asset class identifier. original address The original assets address. assetClassController function assetClassController(bytes4 assetClass) external view returns (address) Retrieve the asset class controller for a given assetClass. Name Type Description assetClass bytes4 Asset class identifier. Name Type Description [0] address The asset class controller. isWarperAdmin function isWarperAdmin(address warper, address account) external view returns (bool) Check if the given account is the admin of a warper. Name Type Description warper address Address of the warper. account address The users account to checked for the admin permissions on the warper. Name Type Description [0] bool True if the account is the admin of the warper. supportedAssetCount function supportedAssetCount() external view returns (uint256) Returns the number of currently supported assets. Name Type Description [0] uint256 Asset count. supportedAssets function supportedAssets(uint256 offset, uint256 limit) external view returns (address[], struct Assets.AssetConfig[]) Returns the list of all supported asset addresses. Name Type Description offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] address[] List of original asset addresses. [1] struct Assets.AssetConfig[] List of asset config structures.","title":"IAssetManager"},{"location":"asset/IAssetManager/#iassetmanager","text":"","title":"IAssetManager"},{"location":"asset/IAssetManager/#registerasset","text":"function registerAsset(bytes4 assetClass, address original) external Register a new asset. Name Type Description assetClass bytes4 Asset class identifier. original address The original assets address.","title":"registerAsset"},{"location":"asset/IAssetManager/#assetclasscontroller","text":"function assetClassController(bytes4 assetClass) external view returns (address) Retrieve the asset class controller for a given assetClass. Name Type Description assetClass bytes4 Asset class identifier. Name Type Description [0] address The asset class controller.","title":"assetClassController"},{"location":"asset/IAssetManager/#iswarperadmin","text":"function isWarperAdmin(address warper, address account) external view returns (bool) Check if the given account is the admin of a warper. Name Type Description warper address Address of the warper. account address The users account to checked for the admin permissions on the warper. Name Type Description [0] bool True if the account is the admin of the warper.","title":"isWarperAdmin"},{"location":"asset/IAssetManager/#supportedassetcount","text":"function supportedAssetCount() external view returns (uint256) Returns the number of currently supported assets. Name Type Description [0] uint256 Asset count.","title":"supportedAssetCount"},{"location":"asset/IAssetManager/#supportedassets","text":"function supportedAssets(uint256 offset, uint256 limit) external view returns (address[], struct Assets.AssetConfig[]) Returns the list of all supported asset addresses. Name Type Description offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] address[] List of original asset addresses. [1] struct Assets.AssetConfig[] List of asset config structures.","title":"supportedAssets"},{"location":"asset/IAssetVault/","text":"IAssetVault AssetNotFound error AssetNotFound() Thrown when the asset is not is found among vault inventory. VaultIsInRecoveryMode error VaultIsInRecoveryMode() Thrown when the function is called on the vault in recovery mode. AssetReturnIsNotAllowed error AssetReturnIsNotAllowed() Thrown when the asset return is not allowed, due to the vault state or the caller permissions. AssetDepositIsNotAllowed error AssetDepositIsNotAllowed() Thrown when the asset deposit is not allowed, due to the vault state or the caller permissions. RecoveryModeActivated event RecoveryModeActivated(address account) Emitted when the vault is switched to recovery mode by `account`. switchToRecoveryMode function switchToRecoveryMode() external Activates asset recovery mode. Emits a {RecoveryModeActivated} event. withdrawERC20Tokens function withdrawERC20Tokens(contract IERC20 token, address to, uint256 amount) external Send ERC20 tokens to an address. pause function pause() external Pauses the vault. unpause function unpause() external Unpauses the vault. assetClass function assetClass() external pure returns (bytes4) Returns vault asset class. Name Type Description [0] bytes4 Asset class ID. metahub function metahub() external view returns (address) Returns the Metahub address. isRecovery function isRecovery() external view returns (bool) Returns vault recovery mode flag state. Name Type Description [0] bool True when the vault is in recovery mode.","title":"IAssetVault"},{"location":"asset/IAssetVault/#iassetvault","text":"","title":"IAssetVault"},{"location":"asset/IAssetVault/#assetnotfound","text":"error AssetNotFound() Thrown when the asset is not is found among vault inventory.","title":"AssetNotFound"},{"location":"asset/IAssetVault/#vaultisinrecoverymode","text":"error VaultIsInRecoveryMode() Thrown when the function is called on the vault in recovery mode.","title":"VaultIsInRecoveryMode"},{"location":"asset/IAssetVault/#assetreturnisnotallowed","text":"error AssetReturnIsNotAllowed() Thrown when the asset return is not allowed, due to the vault state or the caller permissions.","title":"AssetReturnIsNotAllowed"},{"location":"asset/IAssetVault/#assetdepositisnotallowed","text":"error AssetDepositIsNotAllowed() Thrown when the asset deposit is not allowed, due to the vault state or the caller permissions.","title":"AssetDepositIsNotAllowed"},{"location":"asset/IAssetVault/#recoverymodeactivated","text":"event RecoveryModeActivated(address account) Emitted when the vault is switched to recovery mode by `account`.","title":"RecoveryModeActivated"},{"location":"asset/IAssetVault/#switchtorecoverymode","text":"function switchToRecoveryMode() external Activates asset recovery mode. Emits a {RecoveryModeActivated} event.","title":"switchToRecoveryMode"},{"location":"asset/IAssetVault/#withdrawerc20tokens","text":"function withdrawERC20Tokens(contract IERC20 token, address to, uint256 amount) external Send ERC20 tokens to an address.","title":"withdrawERC20Tokens"},{"location":"asset/IAssetVault/#pause","text":"function pause() external Pauses the vault.","title":"pause"},{"location":"asset/IAssetVault/#unpause","text":"function unpause() external Unpauses the vault.","title":"unpause"},{"location":"asset/IAssetVault/#assetclass","text":"function assetClass() external pure returns (bytes4) Returns vault asset class. Name Type Description [0] bytes4 Asset class ID.","title":"assetClass"},{"location":"asset/IAssetVault/#metahub","text":"function metahub() external view returns (address) Returns the Metahub address.","title":"metahub"},{"location":"asset/IAssetVault/#isrecovery","text":"function isRecovery() external view returns (bool) Returns vault recovery mode flag state. Name Type Description [0] bool True when the vault is in recovery mode.","title":"isRecovery"},{"location":"asset/ERC721/ERC721AssetController/","text":"ERC721AssetController InvalidERC721Value error InvalidERC721Value(uint256 value) Thrown when the asset value is invalid for ERC721 token standard. assetClass function assetClass() public pure returns (bytes4) Returns controller asset class. Name Type Description [0] bytes4 Asset class ID. transferAssetToVault function transferAssetToVault(struct Assets.Asset asset, address assetOwner, address vault) external Transfers asset from owner to the vault contract. Name Type Description asset struct Assets.Asset Asset being transferred. assetOwner address Original asset owner address. vault address Asset vault contract address. returnAssetFromVault function returnAssetFromVault(struct Assets.Asset asset, address vault) external Transfers asset from the vault contract to the original owner. Name Type Description asset struct Assets.Asset Asset being transferred. vault address Asset vault contract address. transfer function transfer(struct Assets.Asset asset, address from, address to, bytes data) external Transfers asset. Emits a {AssetTransfer} event. Name Type Description asset struct Assets.Asset Asset being transferred. from address Asset sender. to address Asset recipient. data bytes Auxiliary data. collectionId function collectionId(struct Assets.AssetId assetId) external pure returns (bytes32) Decodes asset ID structure and returns collection identifier. The collection ID is byte32 value which is calculated based on the asset class. For example, ERC721 collection can be identified by address only, but for ERC1155 it should be calculated based on address and token ID. Name Type Description [0] bytes32 Collection ID. _collectionId function _collectionId(address token) internal pure returns (bytes32) Calculates collection ID. Foe ERC721 tokens, the collection ID is calculated by hashing the contract address itself. _transferAsset function _transferAsset(struct Assets.Asset asset, address from, address to, bytes data) internal Executes asset transfer. _decodeAssetId function _decodeAssetId(struct Assets.AssetId id) internal pure returns (address token, uint256 tokenId) Decodes asset ID and extracts identification data. Name Type Description id struct Assets.AssetId Asset ID structure. Name Type Description token address Token contract address. tokenId uint256 Token ID. _encodeAssetId function _encodeAssetId(address token, uint256 tokenId) internal pure returns (struct Assets.AssetId) Encodes asset ID. Name Type Description token address Token contract address. tokenId uint256 Token ID. Name Type Description [0] struct Assets.AssetId Asset ID structure. _validateAsset function _validateAsset(struct Assets.Asset asset) internal pure Reverts if the asset params are not valid. Name Type Description asset struct Assets.Asset Asset structure.","title":"ERC721AssetController"},{"location":"asset/ERC721/ERC721AssetController/#erc721assetcontroller","text":"","title":"ERC721AssetController"},{"location":"asset/ERC721/ERC721AssetController/#invaliderc721value","text":"error InvalidERC721Value(uint256 value) Thrown when the asset value is invalid for ERC721 token standard.","title":"InvalidERC721Value"},{"location":"asset/ERC721/ERC721AssetController/#assetclass","text":"function assetClass() public pure returns (bytes4) Returns controller asset class. Name Type Description [0] bytes4 Asset class ID.","title":"assetClass"},{"location":"asset/ERC721/ERC721AssetController/#transferassettovault","text":"function transferAssetToVault(struct Assets.Asset asset, address assetOwner, address vault) external Transfers asset from owner to the vault contract. Name Type Description asset struct Assets.Asset Asset being transferred. assetOwner address Original asset owner address. vault address Asset vault contract address.","title":"transferAssetToVault"},{"location":"asset/ERC721/ERC721AssetController/#returnassetfromvault","text":"function returnAssetFromVault(struct Assets.Asset asset, address vault) external Transfers asset from the vault contract to the original owner. Name Type Description asset struct Assets.Asset Asset being transferred. vault address Asset vault contract address.","title":"returnAssetFromVault"},{"location":"asset/ERC721/ERC721AssetController/#transfer","text":"function transfer(struct Assets.Asset asset, address from, address to, bytes data) external Transfers asset. Emits a {AssetTransfer} event. Name Type Description asset struct Assets.Asset Asset being transferred. from address Asset sender. to address Asset recipient. data bytes Auxiliary data.","title":"transfer"},{"location":"asset/ERC721/ERC721AssetController/#collectionid","text":"function collectionId(struct Assets.AssetId assetId) external pure returns (bytes32) Decodes asset ID structure and returns collection identifier. The collection ID is byte32 value which is calculated based on the asset class. For example, ERC721 collection can be identified by address only, but for ERC1155 it should be calculated based on address and token ID. Name Type Description [0] bytes32 Collection ID.","title":"collectionId"},{"location":"asset/ERC721/ERC721AssetController/#_collectionid","text":"function _collectionId(address token) internal pure returns (bytes32) Calculates collection ID. Foe ERC721 tokens, the collection ID is calculated by hashing the contract address itself.","title":"_collectionId"},{"location":"asset/ERC721/ERC721AssetController/#_transferasset","text":"function _transferAsset(struct Assets.Asset asset, address from, address to, bytes data) internal Executes asset transfer.","title":"_transferAsset"},{"location":"asset/ERC721/ERC721AssetController/#_decodeassetid","text":"function _decodeAssetId(struct Assets.AssetId id) internal pure returns (address token, uint256 tokenId) Decodes asset ID and extracts identification data. Name Type Description id struct Assets.AssetId Asset ID structure. Name Type Description token address Token contract address. tokenId uint256 Token ID.","title":"_decodeAssetId"},{"location":"asset/ERC721/ERC721AssetController/#_encodeassetid","text":"function _encodeAssetId(address token, uint256 tokenId) internal pure returns (struct Assets.AssetId) Encodes asset ID. Name Type Description token address Token contract address. tokenId uint256 Token ID. Name Type Description [0] struct Assets.AssetId Asset ID structure.","title":"_encodeAssetId"},{"location":"asset/ERC721/ERC721AssetController/#_validateasset","text":"function _validateAsset(struct Assets.Asset asset) internal pure Reverts if the asset params are not valid. Name Type Description asset struct Assets.Asset Asset structure.","title":"_validateAsset"},{"location":"asset/ERC721/ERC721AssetVault/","text":"ERC721AssetVault _inventory mapping(address &#x3D;&gt; mapping(uint256 &#x3D;&gt; address)) _inventory Vault inventory Mapping token address -> token ID -> owner. constructor constructor(address operator, address acl) public Constructor. Name Type Description operator address First operator account. acl address ACL contract address onERC721Received function onERC721Received(address operator, address from, uint256 tokenId, bytes) external returns (bytes4) _Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`._ returnToOwner function returnToOwner(address token, uint256 tokenId) external Transfers the asset to the original owner, registered upon deposit. NOTE: The asset is always returns to the owner. There is no way to send the `asset` to an arbitrary address. Name Type Description token address Token address. tokenId uint256 Token ID. assetClass function assetClass() external pure returns (bytes4) Returns vault asset class. Name Type Description [0] bytes4 Asset class ID. supportsInterface function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._","title":"ERC721AssetVault"},{"location":"asset/ERC721/ERC721AssetVault/#erc721assetvault","text":"","title":"ERC721AssetVault"},{"location":"asset/ERC721/ERC721AssetVault/#_inventory","text":"mapping(address &#x3D;&gt; mapping(uint256 &#x3D;&gt; address)) _inventory Vault inventory Mapping token address -> token ID -> owner.","title":"_inventory"},{"location":"asset/ERC721/ERC721AssetVault/#constructor","text":"constructor(address operator, address acl) public Constructor. Name Type Description operator address First operator account. acl address ACL contract address","title":"constructor"},{"location":"asset/ERC721/ERC721AssetVault/#onerc721received","text":"function onERC721Received(address operator, address from, uint256 tokenId, bytes) external returns (bytes4) _Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`._","title":"onERC721Received"},{"location":"asset/ERC721/ERC721AssetVault/#returntoowner","text":"function returnToOwner(address token, uint256 tokenId) external Transfers the asset to the original owner, registered upon deposit. NOTE: The asset is always returns to the owner. There is no way to send the `asset` to an arbitrary address. Name Type Description token address Token address. tokenId uint256 Token ID.","title":"returnToOwner"},{"location":"asset/ERC721/ERC721AssetVault/#assetclass","text":"function assetClass() external pure returns (bytes4) Returns vault asset class. Name Type Description [0] bytes4 Asset class ID.","title":"assetClass"},{"location":"asset/ERC721/ERC721AssetVault/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._","title":"supportsInterface"},{"location":"asset/ERC721/IERC721AssetVault/","text":"IERC721AssetVault returnToOwner function returnToOwner(address token, uint256 tokenId) external Transfers the asset to the original owner, registered upon deposit. NOTE: The asset is always returns to the owner. There is no way to send the `asset` to an arbitrary address. Name Type Description token address Token address. tokenId uint256 Token ID.","title":"IERC721AssetVault"},{"location":"asset/ERC721/IERC721AssetVault/#ierc721assetvault","text":"","title":"IERC721AssetVault"},{"location":"asset/ERC721/IERC721AssetVault/#returntoowner","text":"function returnToOwner(address token, uint256 tokenId) external Transfers the asset to the original owner, registered upon deposit. NOTE: The asset is always returns to the owner. There is no way to send the `asset` to an arbitrary address. Name Type Description token address Token address. tokenId uint256 Token ID.","title":"returnToOwner"},{"location":"asset/utils/DelegateContext/","text":"DelegateContext FunctionMustBeCalledThroughDelegatecall error FunctionMustBeCalledThroughDelegatecall() Thrown when a function is called directly and not through a delegatecall. __self address __self onlyDelegatecall modifier onlyDelegatecall() Check that the execution is being performed through a delegatecall call.","title":"DelegateContext"},{"location":"asset/utils/DelegateContext/#delegatecontext","text":"","title":"DelegateContext"},{"location":"asset/utils/DelegateContext/#functionmustbecalledthroughdelegatecall","text":"error FunctionMustBeCalledThroughDelegatecall() Thrown when a function is called directly and not through a delegatecall.","title":"FunctionMustBeCalledThroughDelegatecall"},{"location":"asset/utils/DelegateContext/#__self","text":"address __self","title":"__self"},{"location":"asset/utils/DelegateContext/#onlydelegatecall","text":"modifier onlyDelegatecall() Check that the execution is being performed through a delegatecall call.","title":"onlyDelegatecall"},{"location":"listing/IListingController/","text":"IListingController ListingStrategyMismatch error ListingStrategyMismatch(bytes4 provided, bytes4 required) Thrown when the listing strategy ID does not match the required one. Name Type Description provided bytes4 Provided listing strategy ID. required bytes4 Required listing strategy ID. strategyId function strategyId() external pure returns (bytes4) Returns implemented strategy ID. Name Type Description [0] bytes4 Listing strategy ID. calculateRentalFee function calculateRentalFee(struct Listings.Params listingParams, struct Rentings.Params rentingParams) external view returns (uint256) Calculates rental fee based on renting params and implemented listing strategy. Name Type Description listingParams struct Listings.Params Listing strategy params. rentingParams struct Rentings.Params Renting params. Name Type Description [0] uint256 Asset rental fee (base tokens per second).","title":"IListingController"},{"location":"listing/IListingController/#ilistingcontroller","text":"","title":"IListingController"},{"location":"listing/IListingController/#listingstrategymismatch","text":"error ListingStrategyMismatch(bytes4 provided, bytes4 required) Thrown when the listing strategy ID does not match the required one. Name Type Description provided bytes4 Provided listing strategy ID. required bytes4 Required listing strategy ID.","title":"ListingStrategyMismatch"},{"location":"listing/IListingController/#strategyid","text":"function strategyId() external pure returns (bytes4) Returns implemented strategy ID. Name Type Description [0] bytes4 Listing strategy ID.","title":"strategyId"},{"location":"listing/IListingController/#calculaterentalfee","text":"function calculateRentalFee(struct Listings.Params listingParams, struct Rentings.Params rentingParams) external view returns (uint256) Calculates rental fee based on renting params and implemented listing strategy. Name Type Description listingParams struct Listings.Params Listing strategy params. rentingParams struct Rentings.Params Renting params. Name Type Description [0] uint256 Asset rental fee (base tokens per second).","title":"calculateRentalFee"},{"location":"listing/IListingManager/","text":"IListingManager CallerIsNotAssetLister error CallerIsNotAssetLister() Thrown when the message sender doesn't match the asset lister address. AssetIsLocked error AssetIsLocked() Thrown when the original asset cannot be withdrawn because of active rentals or other activity that requires asset to stay in the vault. AssetListed event AssetListed(uint256 listingId, uint256 listingGroupId, address lister, struct Assets.Asset asset, struct Listings.Params params, uint32 maxLockPeriod) Emitted when a new asset is listed for renting. Name Type Description listingId uint256 Listing ID. listingGroupId uint256 Listing group ID. lister address Lister account address. asset struct Assets.Asset Listing asset. params struct Listings.Params Listing strategy parameters. maxLockPeriod uint32 The maximum amount of time the original asset owner can wait before getting the asset back. AssetDelisted event AssetDelisted(uint256 listingId, address lister, uint32 unlocksAt) Emitted when the asset is no longer available for renting. Name Type Description listingId uint256 Listing ID. lister address Lister account address. unlocksAt uint32 The earliest possible time when the asset can be returned to the owner. AssetWithdrawn event AssetWithdrawn(uint256 listingId, address lister, struct Assets.Asset asset) Emitted when the asset is returned to the `lister`. Name Type Description listingId uint256 Listing ID. lister address Lister account address. asset struct Assets.Asset Returned asset. ListingPaused event ListingPaused(uint256 listingId) Emitted when the listing is paused. Name Type Description listingId uint256 Listing ID. ListingUnpaused event ListingUnpaused(uint256 listingId) Emitted when the listing pause is lifted. Name Type Description listingId uint256 Listing ID. listAsset function listAsset(struct Assets.Asset asset, struct Listings.Params params, uint32 maxLockPeriod, bool immediatePayout) external returns (uint256 listingId, uint256 listingGroupId) Performs new asset listing. Emits an {AssetListed} event. Name Type Description asset struct Assets.Asset Asset to be listed. params struct Listings.Params Listing strategy parameters. maxLockPeriod uint32 The maximum amount of time the original asset owner can wait before getting the asset back. immediatePayout bool Indicates whether the rental fee must be transferred to the lister on every renting. If FALSE, the rental fees get accumulated until withdrawn manually. Name Type Description listingId uint256 New listing ID. listingGroupId uint256 Listing group ID. delistAsset function delistAsset(uint256 listingId) external Marks the asset as being delisted. This operation in irreversible. After delisting, the asset can only be withdrawn when it has no active rentals. Emits an {AssetDelisted} event. Name Type Description listingId uint256 Listing ID. withdrawAsset function withdrawAsset(uint256 listingId) external Returns the asset back to the lister. Emits an {AssetWithdrawn} event. Name Type Description listingId uint256 Listing ID. pauseListing function pauseListing(uint256 listingId) external Puts the listing on pause. Emits a {ListingPaused} event. Name Type Description listingId uint256 Listing ID. unpauseListing function unpauseListing(uint256 listingId) external Lifts the listing pause. Emits a {ListingUnpaused} event. Name Type Description listingId uint256 Listing ID. listingInfo function listingInfo(uint256 listingId) external view returns (struct Listings.Listing) Returns the listing details by the listing ID. Name Type Description listingId uint256 Listing ID. Name Type Description [0] struct Listings.Listing Listing details. listingCount function listingCount() external view returns (uint256) Returns the number of currently registered listings. Name Type Description [0] uint256 Listing count. listings function listings(uint256 offset, uint256 limit) external view returns (uint256[], struct Listings.Listing[]) Returns the paginated list of currently registered listings. Name Type Description offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] uint256[] Listing IDs. [1] struct Listings.Listing[] Listings. userListingCount function userListingCount(address lister) external view returns (uint256) Returns the number of currently registered listings for the particular lister account. Name Type Description lister address Lister address. Name Type Description [0] uint256 Listing count. userListings function userListings(address lister, uint256 offset, uint256 limit) external view returns (uint256[], struct Listings.Listing[]) Returns the paginated list of currently registered listings for the particular lister account. Name Type Description lister address Lister address. offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] uint256[] Listing IDs. [1] struct Listings.Listing[] Listings. assetListingCount function assetListingCount(address original) external view returns (uint256) Returns the number of currently registered listings for the particular original asset address. Name Type Description original address Original asset address. Name Type Description [0] uint256 Listing count. assetListings function assetListings(address original, uint256 offset, uint256 limit) external view returns (uint256[], struct Listings.Listing[]) Returns the paginated list of currently registered listings for the particular original asset address. Name Type Description original address Original asset address. offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] uint256[] Listing IDs. [1] struct Listings.Listing[] Listings. listingController function listingController(bytes4 strategyId) external view returns (address) Returns listing strategy controller. Name Type Description strategyId bytes4 Listing strategy ID. Name Type Description [0] address Listing controller address.","title":"IListingManager"},{"location":"listing/IListingManager/#ilistingmanager","text":"","title":"IListingManager"},{"location":"listing/IListingManager/#callerisnotassetlister","text":"error CallerIsNotAssetLister() Thrown when the message sender doesn't match the asset lister address.","title":"CallerIsNotAssetLister"},{"location":"listing/IListingManager/#assetislocked","text":"error AssetIsLocked() Thrown when the original asset cannot be withdrawn because of active rentals or other activity that requires asset to stay in the vault.","title":"AssetIsLocked"},{"location":"listing/IListingManager/#assetlisted","text":"event AssetListed(uint256 listingId, uint256 listingGroupId, address lister, struct Assets.Asset asset, struct Listings.Params params, uint32 maxLockPeriod) Emitted when a new asset is listed for renting. Name Type Description listingId uint256 Listing ID. listingGroupId uint256 Listing group ID. lister address Lister account address. asset struct Assets.Asset Listing asset. params struct Listings.Params Listing strategy parameters. maxLockPeriod uint32 The maximum amount of time the original asset owner can wait before getting the asset back.","title":"AssetListed"},{"location":"listing/IListingManager/#assetdelisted","text":"event AssetDelisted(uint256 listingId, address lister, uint32 unlocksAt) Emitted when the asset is no longer available for renting. Name Type Description listingId uint256 Listing ID. lister address Lister account address. unlocksAt uint32 The earliest possible time when the asset can be returned to the owner.","title":"AssetDelisted"},{"location":"listing/IListingManager/#assetwithdrawn","text":"event AssetWithdrawn(uint256 listingId, address lister, struct Assets.Asset asset) Emitted when the asset is returned to the `lister`. Name Type Description listingId uint256 Listing ID. lister address Lister account address. asset struct Assets.Asset Returned asset.","title":"AssetWithdrawn"},{"location":"listing/IListingManager/#listingpaused","text":"event ListingPaused(uint256 listingId) Emitted when the listing is paused. Name Type Description listingId uint256 Listing ID.","title":"ListingPaused"},{"location":"listing/IListingManager/#listingunpaused","text":"event ListingUnpaused(uint256 listingId) Emitted when the listing pause is lifted. Name Type Description listingId uint256 Listing ID.","title":"ListingUnpaused"},{"location":"listing/IListingManager/#listasset","text":"function listAsset(struct Assets.Asset asset, struct Listings.Params params, uint32 maxLockPeriod, bool immediatePayout) external returns (uint256 listingId, uint256 listingGroupId) Performs new asset listing. Emits an {AssetListed} event. Name Type Description asset struct Assets.Asset Asset to be listed. params struct Listings.Params Listing strategy parameters. maxLockPeriod uint32 The maximum amount of time the original asset owner can wait before getting the asset back. immediatePayout bool Indicates whether the rental fee must be transferred to the lister on every renting. If FALSE, the rental fees get accumulated until withdrawn manually. Name Type Description listingId uint256 New listing ID. listingGroupId uint256 Listing group ID.","title":"listAsset"},{"location":"listing/IListingManager/#delistasset","text":"function delistAsset(uint256 listingId) external Marks the asset as being delisted. This operation in irreversible. After delisting, the asset can only be withdrawn when it has no active rentals. Emits an {AssetDelisted} event. Name Type Description listingId uint256 Listing ID.","title":"delistAsset"},{"location":"listing/IListingManager/#withdrawasset","text":"function withdrawAsset(uint256 listingId) external Returns the asset back to the lister. Emits an {AssetWithdrawn} event. Name Type Description listingId uint256 Listing ID.","title":"withdrawAsset"},{"location":"listing/IListingManager/#pauselisting","text":"function pauseListing(uint256 listingId) external Puts the listing on pause. Emits a {ListingPaused} event. Name Type Description listingId uint256 Listing ID.","title":"pauseListing"},{"location":"listing/IListingManager/#unpauselisting","text":"function unpauseListing(uint256 listingId) external Lifts the listing pause. Emits a {ListingUnpaused} event. Name Type Description listingId uint256 Listing ID.","title":"unpauseListing"},{"location":"listing/IListingManager/#listinginfo","text":"function listingInfo(uint256 listingId) external view returns (struct Listings.Listing) Returns the listing details by the listing ID. Name Type Description listingId uint256 Listing ID. Name Type Description [0] struct Listings.Listing Listing details.","title":"listingInfo"},{"location":"listing/IListingManager/#listingcount","text":"function listingCount() external view returns (uint256) Returns the number of currently registered listings. Name Type Description [0] uint256 Listing count.","title":"listingCount"},{"location":"listing/IListingManager/#listings","text":"function listings(uint256 offset, uint256 limit) external view returns (uint256[], struct Listings.Listing[]) Returns the paginated list of currently registered listings. Name Type Description offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] uint256[] Listing IDs. [1] struct Listings.Listing[] Listings.","title":"listings"},{"location":"listing/IListingManager/#userlistingcount","text":"function userListingCount(address lister) external view returns (uint256) Returns the number of currently registered listings for the particular lister account. Name Type Description lister address Lister address. Name Type Description [0] uint256 Listing count.","title":"userListingCount"},{"location":"listing/IListingManager/#userlistings","text":"function userListings(address lister, uint256 offset, uint256 limit) external view returns (uint256[], struct Listings.Listing[]) Returns the paginated list of currently registered listings for the particular lister account. Name Type Description lister address Lister address. offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] uint256[] Listing IDs. [1] struct Listings.Listing[] Listings.","title":"userListings"},{"location":"listing/IListingManager/#assetlistingcount","text":"function assetListingCount(address original) external view returns (uint256) Returns the number of currently registered listings for the particular original asset address. Name Type Description original address Original asset address. Name Type Description [0] uint256 Listing count.","title":"assetListingCount"},{"location":"listing/IListingManager/#assetlistings","text":"function assetListings(address original, uint256 offset, uint256 limit) external view returns (uint256[], struct Listings.Listing[]) Returns the paginated list of currently registered listings for the particular original asset address. Name Type Description original address Original asset address. offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] uint256[] Listing IDs. [1] struct Listings.Listing[] Listings.","title":"assetListings"},{"location":"listing/IListingManager/#listingcontroller","text":"function listingController(bytes4 strategyId) external view returns (address) Returns listing strategy controller. Name Type Description strategyId bytes4 Listing strategy ID. Name Type Description [0] address Listing controller address.","title":"listingController"},{"location":"listing/IListingStrategyRegistry/","text":"IListingStrategyRegistry InvalidListingControllerInterface error InvalidListingControllerInterface() Thrown when listing controller does not implement the required interface. ListingStrategyMismatch error ListingStrategyMismatch(bytes4 provided, bytes4 required) Thrown when the listing cannot be processed by the specific controller due to the listing strategy ID mismatch. Name Type Description provided bytes4 Provided listing strategy ID. required bytes4 Required listing strategy ID. ListingStrategyIsAlreadyRegistered error ListingStrategyIsAlreadyRegistered(bytes4 strategyId) Thrown upon attempting to register a listing strategy twice. Name Type Description strategyId bytes4 Duplicate listing strategy ID. UnregisteredListingStrategy error UnregisteredListingStrategy(bytes4 strategyId) Thrown upon attempting to work with unregistered listing strategy. Name Type Description strategyId bytes4 Listing strategy ID. ListingStrategyRegistered event ListingStrategyRegistered(bytes4 strategyId, address controller) Emitted when the new listing strategy is registered. Name Type Description strategyId bytes4 Listing strategy ID. controller address Controller address. ListingStrategyControllerChanged event ListingStrategyControllerChanged(bytes4 strategyId, address newController) Emitted when the listing strategy controller is changed. Name Type Description strategyId bytes4 Listing strategy ID. newController address Controller address. StrategyConfig struct StrategyConfig { address controller; } registerListingStrategy function registerListingStrategy(bytes4 strategyId, struct IListingStrategyRegistry.StrategyConfig config) external Registers new listing strategy. Name Type Description strategyId bytes4 Listing strategy ID. config struct IListingStrategyRegistry.StrategyConfig Listing strategy configuration. setListingController function setListingController(bytes4 strategyId, address controller) external Sets listing strategy controller. Name Type Description strategyId bytes4 Listing strategy ID. controller address Listing controller address. listingStrategy function listingStrategy(bytes4 strategyId) external view returns (struct IListingStrategyRegistry.StrategyConfig) Returns listing strategy configuration. Name Type Description strategyId bytes4 Listing strategy ID. Name Type Description [0] struct IListingStrategyRegistry.StrategyConfig Listing strategy information. listingController function listingController(bytes4 strategyId) external view returns (address) Returns listing strategy controller. Name Type Description strategyId bytes4 Listing strategy ID. Name Type Description [0] address Listing controller address. isRegisteredListingStrategy function isRegisteredListingStrategy(bytes4 strategyId) external view returns (bool) Checks listing strategy registration. Name Type Description strategyId bytes4 Listing strategy ID. checkRegisteredListingStrategy function checkRegisteredListingStrategy(bytes4 strategyId) external view Reverts if listing strategy is not registered. Name Type Description strategyId bytes4 Listing strategy ID.","title":"IListingStrategyRegistry"},{"location":"listing/IListingStrategyRegistry/#ilistingstrategyregistry","text":"","title":"IListingStrategyRegistry"},{"location":"listing/IListingStrategyRegistry/#invalidlistingcontrollerinterface","text":"error InvalidListingControllerInterface() Thrown when listing controller does not implement the required interface.","title":"InvalidListingControllerInterface"},{"location":"listing/IListingStrategyRegistry/#listingstrategymismatch","text":"error ListingStrategyMismatch(bytes4 provided, bytes4 required) Thrown when the listing cannot be processed by the specific controller due to the listing strategy ID mismatch. Name Type Description provided bytes4 Provided listing strategy ID. required bytes4 Required listing strategy ID.","title":"ListingStrategyMismatch"},{"location":"listing/IListingStrategyRegistry/#listingstrategyisalreadyregistered","text":"error ListingStrategyIsAlreadyRegistered(bytes4 strategyId) Thrown upon attempting to register a listing strategy twice. Name Type Description strategyId bytes4 Duplicate listing strategy ID.","title":"ListingStrategyIsAlreadyRegistered"},{"location":"listing/IListingStrategyRegistry/#unregisteredlistingstrategy","text":"error UnregisteredListingStrategy(bytes4 strategyId) Thrown upon attempting to work with unregistered listing strategy. Name Type Description strategyId bytes4 Listing strategy ID.","title":"UnregisteredListingStrategy"},{"location":"listing/IListingStrategyRegistry/#listingstrategyregistered","text":"event ListingStrategyRegistered(bytes4 strategyId, address controller) Emitted when the new listing strategy is registered. Name Type Description strategyId bytes4 Listing strategy ID. controller address Controller address.","title":"ListingStrategyRegistered"},{"location":"listing/IListingStrategyRegistry/#listingstrategycontrollerchanged","text":"event ListingStrategyControllerChanged(bytes4 strategyId, address newController) Emitted when the listing strategy controller is changed. Name Type Description strategyId bytes4 Listing strategy ID. newController address Controller address.","title":"ListingStrategyControllerChanged"},{"location":"listing/IListingStrategyRegistry/#strategyconfig","text":"struct StrategyConfig { address controller; }","title":"StrategyConfig"},{"location":"listing/IListingStrategyRegistry/#registerlistingstrategy","text":"function registerListingStrategy(bytes4 strategyId, struct IListingStrategyRegistry.StrategyConfig config) external Registers new listing strategy. Name Type Description strategyId bytes4 Listing strategy ID. config struct IListingStrategyRegistry.StrategyConfig Listing strategy configuration.","title":"registerListingStrategy"},{"location":"listing/IListingStrategyRegistry/#setlistingcontroller","text":"function setListingController(bytes4 strategyId, address controller) external Sets listing strategy controller. Name Type Description strategyId bytes4 Listing strategy ID. controller address Listing controller address.","title":"setListingController"},{"location":"listing/IListingStrategyRegistry/#listingstrategy","text":"function listingStrategy(bytes4 strategyId) external view returns (struct IListingStrategyRegistry.StrategyConfig) Returns listing strategy configuration. Name Type Description strategyId bytes4 Listing strategy ID. Name Type Description [0] struct IListingStrategyRegistry.StrategyConfig Listing strategy information.","title":"listingStrategy"},{"location":"listing/IListingStrategyRegistry/#listingcontroller","text":"function listingController(bytes4 strategyId) external view returns (address) Returns listing strategy controller. Name Type Description strategyId bytes4 Listing strategy ID. Name Type Description [0] address Listing controller address.","title":"listingController"},{"location":"listing/IListingStrategyRegistry/#isregisteredlistingstrategy","text":"function isRegisteredListingStrategy(bytes4 strategyId) external view returns (bool) Checks listing strategy registration. Name Type Description strategyId bytes4 Listing strategy ID.","title":"isRegisteredListingStrategy"},{"location":"listing/IListingStrategyRegistry/#checkregisteredlistingstrategy","text":"function checkRegisteredListingStrategy(bytes4 strategyId) external view Reverts if listing strategy is not registered. Name Type Description strategyId bytes4 Listing strategy ID.","title":"checkRegisteredListingStrategy"},{"location":"listing/ListingController/","text":"ListingController compatibleStrategy modifier compatibleStrategy(bytes4 checkedStrategyId) Modifier to check strategy compatibility. supportsInterface function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._ strategyId function strategyId() public pure virtual returns (bytes4) Returns implemented strategy ID. Name Type Description [0] bytes4 Listing strategy ID.","title":"ListingController"},{"location":"listing/ListingController/#listingcontroller","text":"","title":"ListingController"},{"location":"listing/ListingController/#compatiblestrategy","text":"modifier compatibleStrategy(bytes4 checkedStrategyId) Modifier to check strategy compatibility.","title":"compatibleStrategy"},{"location":"listing/ListingController/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._","title":"supportsInterface"},{"location":"listing/ListingController/#strategyid","text":"function strategyId() public pure virtual returns (bytes4) Returns implemented strategy ID. Name Type Description [0] bytes4 Listing strategy ID.","title":"strategyId"},{"location":"listing/ListingStrategyRegistry/","text":"ListingStrategyRegistry onlyRegisteredStrategy modifier onlyRegisteredStrategy(bytes4 strategyId) Modifier to make a function callable only for the registered listing strategy. constructor constructor() public initialize function initialize(address acl) external Contract initializer. Name Type Description acl address ACL contract address. registerListingStrategy function registerListingStrategy(bytes4 strategyId, struct IListingStrategyRegistry.StrategyConfig config) external Registers new listing strategy. Name Type Description strategyId bytes4 Listing strategy ID. config struct IListingStrategyRegistry.StrategyConfig Listing strategy configuration. setListingController function setListingController(bytes4 strategyId, address controller) external Sets listing strategy controller. Name Type Description strategyId bytes4 Listing strategy ID. controller address Listing controller address. listingController function listingController(bytes4 strategyId) external view returns (address) Returns listing strategy controller. Name Type Description strategyId bytes4 Listing strategy ID. Name Type Description [0] address Listing controller address. listingStrategy function listingStrategy(bytes4 strategyId) external view returns (struct IListingStrategyRegistry.StrategyConfig) Returns listing strategy configuration. Name Type Description strategyId bytes4 Listing strategy ID. Name Type Description [0] struct IListingStrategyRegistry.StrategyConfig Listing strategy information. isRegisteredListingStrategy function isRegisteredListingStrategy(bytes4 strategyId) public view returns (bool) Checks listing strategy registration. Name Type Description strategyId bytes4 Listing strategy ID. checkRegisteredListingStrategy function checkRegisteredListingStrategy(bytes4 strategyId) public view Reverts if listing strategy is not registered. Name Type Description strategyId bytes4 Listing strategy ID. _authorizeUpgrade function _authorizeUpgrade(address newImplementation) internal _Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by {upgradeTo} and {upgradeToAndCall}. Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}. ```solidity function authorizeUpgrade(address) internal override onlyOwner {} ``` _checkValidListingController function _checkValidListingController(bytes4 strategyId, address controller) internal view Reverts if provided address is not a valid listing controller. Name Type Description strategyId bytes4 Listing strategy ID. controller address Listing controller address. _acl function _acl() internal view returns (contract IACL) return the IACL address","title":"ListingStrategyRegistry"},{"location":"listing/ListingStrategyRegistry/#listingstrategyregistry","text":"","title":"ListingStrategyRegistry"},{"location":"listing/ListingStrategyRegistry/#onlyregisteredstrategy","text":"modifier onlyRegisteredStrategy(bytes4 strategyId) Modifier to make a function callable only for the registered listing strategy.","title":"onlyRegisteredStrategy"},{"location":"listing/ListingStrategyRegistry/#constructor","text":"constructor() public","title":"constructor"},{"location":"listing/ListingStrategyRegistry/#initialize","text":"function initialize(address acl) external Contract initializer. Name Type Description acl address ACL contract address.","title":"initialize"},{"location":"listing/ListingStrategyRegistry/#registerlistingstrategy","text":"function registerListingStrategy(bytes4 strategyId, struct IListingStrategyRegistry.StrategyConfig config) external Registers new listing strategy. Name Type Description strategyId bytes4 Listing strategy ID. config struct IListingStrategyRegistry.StrategyConfig Listing strategy configuration.","title":"registerListingStrategy"},{"location":"listing/ListingStrategyRegistry/#setlistingcontroller","text":"function setListingController(bytes4 strategyId, address controller) external Sets listing strategy controller. Name Type Description strategyId bytes4 Listing strategy ID. controller address Listing controller address.","title":"setListingController"},{"location":"listing/ListingStrategyRegistry/#listingcontroller","text":"function listingController(bytes4 strategyId) external view returns (address) Returns listing strategy controller. Name Type Description strategyId bytes4 Listing strategy ID. Name Type Description [0] address Listing controller address.","title":"listingController"},{"location":"listing/ListingStrategyRegistry/#listingstrategy","text":"function listingStrategy(bytes4 strategyId) external view returns (struct IListingStrategyRegistry.StrategyConfig) Returns listing strategy configuration. Name Type Description strategyId bytes4 Listing strategy ID. Name Type Description [0] struct IListingStrategyRegistry.StrategyConfig Listing strategy information.","title":"listingStrategy"},{"location":"listing/ListingStrategyRegistry/#isregisteredlistingstrategy","text":"function isRegisteredListingStrategy(bytes4 strategyId) public view returns (bool) Checks listing strategy registration. Name Type Description strategyId bytes4 Listing strategy ID.","title":"isRegisteredListingStrategy"},{"location":"listing/ListingStrategyRegistry/#checkregisteredlistingstrategy","text":"function checkRegisteredListingStrategy(bytes4 strategyId) public view Reverts if listing strategy is not registered. Name Type Description strategyId bytes4 Listing strategy ID.","title":"checkRegisteredListingStrategy"},{"location":"listing/ListingStrategyRegistry/#_authorizeupgrade","text":"function _authorizeUpgrade(address newImplementation) internal _Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by {upgradeTo} and {upgradeToAndCall}. Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}. ```solidity function authorizeUpgrade(address) internal override onlyOwner {} ```","title":"_authorizeUpgrade"},{"location":"listing/ListingStrategyRegistry/#_checkvalidlistingcontroller","text":"function _checkValidListingController(bytes4 strategyId, address controller) internal view Reverts if provided address is not a valid listing controller. Name Type Description strategyId bytes4 Listing strategy ID. controller address Listing controller address.","title":"_checkValidListingController"},{"location":"listing/ListingStrategyRegistry/#_acl","text":"function _acl() internal view returns (contract IACL) return the IACL address","title":"_acl"},{"location":"listing/ListingStrategyRegistryStorage/","text":"ListingStrategyRegistryStorage _aclContract contract IACL _aclContract ACL contract. _strategies mapping(bytes4 &#x3D;&gt; struct IListingStrategyRegistry.StrategyConfig) _strategies Mapping from listing strategy ID to the listing strategy configuration.","title":"ListingStrategyRegistryStorage"},{"location":"listing/ListingStrategyRegistryStorage/#listingstrategyregistrystorage","text":"","title":"ListingStrategyRegistryStorage"},{"location":"listing/ListingStrategyRegistryStorage/#_aclcontract","text":"contract IACL _aclContract ACL contract.","title":"_aclContract"},{"location":"listing/ListingStrategyRegistryStorage/#_strategies","text":"mapping(bytes4 &#x3D;&gt; struct IListingStrategyRegistry.StrategyConfig) _strategies Mapping from listing strategy ID to the listing strategy configuration.","title":"_strategies"},{"location":"listing/Listings/","text":"Listings NotListed error NotListed(uint256 listingId) Thrown when the `listingId` is invalid or the asset has been delisted. ListingIsNotRegistered error ListingIsNotRegistered(uint256 listingId) Thrown when the `listingId` has never been registered. ListingIsPaused error ListingIsPaused() Thrown when the operation is not allowed due to the listing being paused. ListingIsNotPaused error ListingIsNotPaused() Thrown when the operation is not allowed due to the listing not being paused. InvalidLockPeriod error InvalidLockPeriod(uint32 period) Thrown when attempting to lock the listed asset for the period longer than the lister allowed. UnsupportedListingStrategy error UnsupportedListingStrategy(bytes4 strategyId) Thrown when the listing strategy is not registered or deprecated. Name Type Description strategyId bytes4 Unsupported listing strategy ID. ListingGroupIsNotEmpty error ListingGroupIsNotEmpty(uint256 listingGroupId) Thrown when the operation is not allowed due to the listing group being nonempty. Name Type Description listingGroupId uint256 Listing group ID. InvalidListingGroupOwner error InvalidListingGroupOwner(uint256 listingGroupId, address account) Thrown when the provided `account` doesn't match the listing group owner address. Name Type Description listingGroupId uint256 Listing group ID. account address Invalid owner account. FIXED_PRICE bytes4 FIXED_PRICE FIXED_PRICE_WITH_REWARD bytes4 FIXED_PRICE_WITH_REWARD Params struct Params { bytes4 strategy; bytes data; } Listing struct Listing { struct Assets.Asset asset; struct Listings.Params params; address lister; uint32 maxLockPeriod; uint32 lockedTill; bool immediatePayout; bool delisted; bool paused; uint256 groupId; } ListerInfo struct ListerInfo { struct EnumerableSetUpgradeable.UintSet listingIndex; struct EnumerableSetUpgradeable.UintSet listingGroupIndex; } AssetInfo struct AssetInfo { struct EnumerableSetUpgradeable.UintSet listingIndex; } ListingGroupInfo struct ListingGroupInfo { string name; address owner; struct EnumerableSetUpgradeable.UintSet listingIndex; } Registry struct Registry { struct CountersUpgradeable.Counter listingIdTracker; contract IListingStrategyRegistry strategyRegistry; struct EnumerableSetUpgradeable.UintSet listingIndex; mapping(uint256 &#x3D;&gt; struct Listings.Listing) listings; mapping(address &#x3D;&gt; struct Listings.ListerInfo) listers; mapping(address &#x3D;&gt; struct Listings.AssetInfo) assets; struct CountersUpgradeable.Counter listingGroupIdTracker; mapping(uint256 &#x3D;&gt; struct Listings.ListingGroupInfo) listingGroups; } pause function pause(struct Listings.Listing self) internal Puts the listing on pause. unpause function unpause(struct Listings.Listing self) internal Lifts the listing pause. listed function listed(struct Listings.Listing self) internal view returns (bool) Determines whether the listing is active. checkNotPaused function checkNotPaused(struct Listings.Listing self) internal view Reverts if the listing is paused. isValidLockPeriod function isValidLockPeriod(struct Listings.Listing self, uint32 lockPeriod) internal view returns (bool) checkValidLockPeriod function checkValidLockPeriod(struct Listings.Listing self, uint32 lockPeriod) internal view Reverts if the lock period is not valid. addLock function addLock(struct Listings.Listing self, uint32 unlockTimestamp) internal Extends listing lock time. Does not modify the state if current lock time is larger. registerListingGroup function registerListingGroup(struct Listings.Registry self, string name, address owner) external returns (uint256 listingGroupId) Registers new listing group. Name Type Description self struct Listings.Registry name string The listing group name. owner address The listing group owner address. Name Type Description listingGroupId uint256 New listing group ID. removeListingGroup function removeListingGroup(struct Listings.Registry self, uint256 listingGroupId) external Removes listing group data. Name Type Description self struct Listings.Registry listingGroupId uint256 The ID of the listing group to be deleted. register function register(struct Listings.Registry self, struct Listings.Listing listing) external returns (uint256 listingId, uint256 listingGroupId) Registers new listing. Name Type Description listingId uint256 New listing ID. listingGroupId uint256 Effective listing group ID. remove function remove(struct Listings.Registry self, uint256 listingId) external Removes listing data. Name Type Description self struct Listings.Registry listingId uint256 The ID of the listing to be deleted. allListings function allListings(struct Listings.Registry self, uint256 offset, uint256 limit) external view returns (uint256[], struct Listings.Listing[]) Returns the paginated list of currently registered listings. userListings function userListings(struct Listings.Registry self, address lister, uint256 offset, uint256 limit) external view returns (uint256[], struct Listings.Listing[]) Returns the paginated list of currently registered listings for the particular lister account. assetListings function assetListings(struct Listings.Registry self, address original, uint256 offset, uint256 limit) external view returns (uint256[], struct Listings.Listing[]) Returns the paginated list of currently registered listings for the original asset. checkRegisteredListing function checkRegisteredListing(struct Listings.Registry self, uint256 listingId) external view Reverts if listing has not been registered. Name Type Description self struct Listings.Registry listingId uint256 Listing ID. checkListingGroupOwner function checkListingGroupOwner(struct Listings.Registry self, uint256 listingGroupId, address account) internal view Reverts if the provided `account` doesn't match the listing group owner address. Name Type Description self struct Listings.Registry listingGroupId uint256 Listing group ID. account address The account to check ownership for. isRegisteredListing function isRegisteredListing(struct Listings.Registry self, uint256 listingId) internal view returns (bool) Checks listing registration by ID. Name Type Description self struct Listings.Registry listingId uint256 Listing ID. checkSupportedListingStrategy function checkSupportedListingStrategy(struct Listings.Registry self, bytes4 strategyId) internal view Reverts if listing strategy is not supported. Name Type Description self struct Listings.Registry strategyId bytes4 Listing strategy ID. listingController function listingController(struct Listings.Registry self, bytes4 strategyId) internal view returns (contract IListingController) Returns listing controller for strategy. Name Type Description self struct Listings.Registry strategyId bytes4 Listing strategy ID. checkListed function checkListed(struct Listings.Registry self, uint256 listingId) internal view Reverts if listing is not registered or has been already delisted. Name Type Description self struct Listings.Registry listingId uint256 Listing ID. listingCount function listingCount(struct Listings.Registry self) internal view returns (uint256) Returns the number of currently registered listings. userListingCount function userListingCount(struct Listings.Registry self, address lister) internal view returns (uint256) Returns the number of currently registered listings for a particular lister account. assetListingCount function assetListingCount(struct Listings.Registry self, address original) internal view returns (uint256) Returns the number of currently registered listings for a particular original asset. paginateIndexedListings function paginateIndexedListings(struct Listings.Registry self, struct EnumerableSetUpgradeable.UintSet listingIndex, uint256 offset, uint256 limit) internal view returns (uint256[], struct Listings.Listing[]) Returns the paginated list of currently registered listing using provided index reference. _registerListingGroup function _registerListingGroup(struct Listings.Registry self, string name, address owner) private returns (uint256 listingGroupId) Registers new listing group. Name Type Description self struct Listings.Registry name string The listing group name. owner address The listing group owner address. Name Type Description listingGroupId uint256 New listing group ID.","title":"Listings"},{"location":"listing/Listings/#listings","text":"","title":"Listings"},{"location":"listing/Listings/#notlisted","text":"error NotListed(uint256 listingId) Thrown when the `listingId` is invalid or the asset has been delisted.","title":"NotListed"},{"location":"listing/Listings/#listingisnotregistered","text":"error ListingIsNotRegistered(uint256 listingId) Thrown when the `listingId` has never been registered.","title":"ListingIsNotRegistered"},{"location":"listing/Listings/#listingispaused","text":"error ListingIsPaused() Thrown when the operation is not allowed due to the listing being paused.","title":"ListingIsPaused"},{"location":"listing/Listings/#listingisnotpaused","text":"error ListingIsNotPaused() Thrown when the operation is not allowed due to the listing not being paused.","title":"ListingIsNotPaused"},{"location":"listing/Listings/#invalidlockperiod","text":"error InvalidLockPeriod(uint32 period) Thrown when attempting to lock the listed asset for the period longer than the lister allowed.","title":"InvalidLockPeriod"},{"location":"listing/Listings/#unsupportedlistingstrategy","text":"error UnsupportedListingStrategy(bytes4 strategyId) Thrown when the listing strategy is not registered or deprecated. Name Type Description strategyId bytes4 Unsupported listing strategy ID.","title":"UnsupportedListingStrategy"},{"location":"listing/Listings/#listinggroupisnotempty","text":"error ListingGroupIsNotEmpty(uint256 listingGroupId) Thrown when the operation is not allowed due to the listing group being nonempty. Name Type Description listingGroupId uint256 Listing group ID.","title":"ListingGroupIsNotEmpty"},{"location":"listing/Listings/#invalidlistinggroupowner","text":"error InvalidListingGroupOwner(uint256 listingGroupId, address account) Thrown when the provided `account` doesn't match the listing group owner address. Name Type Description listingGroupId uint256 Listing group ID. account address Invalid owner account.","title":"InvalidListingGroupOwner"},{"location":"listing/Listings/#fixed_price","text":"bytes4 FIXED_PRICE","title":"FIXED_PRICE"},{"location":"listing/Listings/#fixed_price_with_reward","text":"bytes4 FIXED_PRICE_WITH_REWARD","title":"FIXED_PRICE_WITH_REWARD"},{"location":"listing/Listings/#params","text":"struct Params { bytes4 strategy; bytes data; }","title":"Params"},{"location":"listing/Listings/#listing","text":"struct Listing { struct Assets.Asset asset; struct Listings.Params params; address lister; uint32 maxLockPeriod; uint32 lockedTill; bool immediatePayout; bool delisted; bool paused; uint256 groupId; }","title":"Listing"},{"location":"listing/Listings/#listerinfo","text":"struct ListerInfo { struct EnumerableSetUpgradeable.UintSet listingIndex; struct EnumerableSetUpgradeable.UintSet listingGroupIndex; }","title":"ListerInfo"},{"location":"listing/Listings/#assetinfo","text":"struct AssetInfo { struct EnumerableSetUpgradeable.UintSet listingIndex; }","title":"AssetInfo"},{"location":"listing/Listings/#listinggroupinfo","text":"struct ListingGroupInfo { string name; address owner; struct EnumerableSetUpgradeable.UintSet listingIndex; }","title":"ListingGroupInfo"},{"location":"listing/Listings/#registry","text":"struct Registry { struct CountersUpgradeable.Counter listingIdTracker; contract IListingStrategyRegistry strategyRegistry; struct EnumerableSetUpgradeable.UintSet listingIndex; mapping(uint256 &#x3D;&gt; struct Listings.Listing) listings; mapping(address &#x3D;&gt; struct Listings.ListerInfo) listers; mapping(address &#x3D;&gt; struct Listings.AssetInfo) assets; struct CountersUpgradeable.Counter listingGroupIdTracker; mapping(uint256 &#x3D;&gt; struct Listings.ListingGroupInfo) listingGroups; }","title":"Registry"},{"location":"listing/Listings/#pause","text":"function pause(struct Listings.Listing self) internal Puts the listing on pause.","title":"pause"},{"location":"listing/Listings/#unpause","text":"function unpause(struct Listings.Listing self) internal Lifts the listing pause.","title":"unpause"},{"location":"listing/Listings/#listed","text":"function listed(struct Listings.Listing self) internal view returns (bool) Determines whether the listing is active.","title":"listed"},{"location":"listing/Listings/#checknotpaused","text":"function checkNotPaused(struct Listings.Listing self) internal view Reverts if the listing is paused.","title":"checkNotPaused"},{"location":"listing/Listings/#isvalidlockperiod","text":"function isValidLockPeriod(struct Listings.Listing self, uint32 lockPeriod) internal view returns (bool)","title":"isValidLockPeriod"},{"location":"listing/Listings/#checkvalidlockperiod","text":"function checkValidLockPeriod(struct Listings.Listing self, uint32 lockPeriod) internal view Reverts if the lock period is not valid.","title":"checkValidLockPeriod"},{"location":"listing/Listings/#addlock","text":"function addLock(struct Listings.Listing self, uint32 unlockTimestamp) internal Extends listing lock time. Does not modify the state if current lock time is larger.","title":"addLock"},{"location":"listing/Listings/#registerlistinggroup","text":"function registerListingGroup(struct Listings.Registry self, string name, address owner) external returns (uint256 listingGroupId) Registers new listing group. Name Type Description self struct Listings.Registry name string The listing group name. owner address The listing group owner address. Name Type Description listingGroupId uint256 New listing group ID.","title":"registerListingGroup"},{"location":"listing/Listings/#removelistinggroup","text":"function removeListingGroup(struct Listings.Registry self, uint256 listingGroupId) external Removes listing group data. Name Type Description self struct Listings.Registry listingGroupId uint256 The ID of the listing group to be deleted.","title":"removeListingGroup"},{"location":"listing/Listings/#register","text":"function register(struct Listings.Registry self, struct Listings.Listing listing) external returns (uint256 listingId, uint256 listingGroupId) Registers new listing. Name Type Description listingId uint256 New listing ID. listingGroupId uint256 Effective listing group ID.","title":"register"},{"location":"listing/Listings/#remove","text":"function remove(struct Listings.Registry self, uint256 listingId) external Removes listing data. Name Type Description self struct Listings.Registry listingId uint256 The ID of the listing to be deleted.","title":"remove"},{"location":"listing/Listings/#alllistings","text":"function allListings(struct Listings.Registry self, uint256 offset, uint256 limit) external view returns (uint256[], struct Listings.Listing[]) Returns the paginated list of currently registered listings.","title":"allListings"},{"location":"listing/Listings/#userlistings","text":"function userListings(struct Listings.Registry self, address lister, uint256 offset, uint256 limit) external view returns (uint256[], struct Listings.Listing[]) Returns the paginated list of currently registered listings for the particular lister account.","title":"userListings"},{"location":"listing/Listings/#assetlistings","text":"function assetListings(struct Listings.Registry self, address original, uint256 offset, uint256 limit) external view returns (uint256[], struct Listings.Listing[]) Returns the paginated list of currently registered listings for the original asset.","title":"assetListings"},{"location":"listing/Listings/#checkregisteredlisting","text":"function checkRegisteredListing(struct Listings.Registry self, uint256 listingId) external view Reverts if listing has not been registered. Name Type Description self struct Listings.Registry listingId uint256 Listing ID.","title":"checkRegisteredListing"},{"location":"listing/Listings/#checklistinggroupowner","text":"function checkListingGroupOwner(struct Listings.Registry self, uint256 listingGroupId, address account) internal view Reverts if the provided `account` doesn't match the listing group owner address. Name Type Description self struct Listings.Registry listingGroupId uint256 Listing group ID. account address The account to check ownership for.","title":"checkListingGroupOwner"},{"location":"listing/Listings/#isregisteredlisting","text":"function isRegisteredListing(struct Listings.Registry self, uint256 listingId) internal view returns (bool) Checks listing registration by ID. Name Type Description self struct Listings.Registry listingId uint256 Listing ID.","title":"isRegisteredListing"},{"location":"listing/Listings/#checksupportedlistingstrategy","text":"function checkSupportedListingStrategy(struct Listings.Registry self, bytes4 strategyId) internal view Reverts if listing strategy is not supported. Name Type Description self struct Listings.Registry strategyId bytes4 Listing strategy ID.","title":"checkSupportedListingStrategy"},{"location":"listing/Listings/#listingcontroller","text":"function listingController(struct Listings.Registry self, bytes4 strategyId) internal view returns (contract IListingController) Returns listing controller for strategy. Name Type Description self struct Listings.Registry strategyId bytes4 Listing strategy ID.","title":"listingController"},{"location":"listing/Listings/#checklisted","text":"function checkListed(struct Listings.Registry self, uint256 listingId) internal view Reverts if listing is not registered or has been already delisted. Name Type Description self struct Listings.Registry listingId uint256 Listing ID.","title":"checkListed"},{"location":"listing/Listings/#listingcount","text":"function listingCount(struct Listings.Registry self) internal view returns (uint256) Returns the number of currently registered listings.","title":"listingCount"},{"location":"listing/Listings/#userlistingcount","text":"function userListingCount(struct Listings.Registry self, address lister) internal view returns (uint256) Returns the number of currently registered listings for a particular lister account.","title":"userListingCount"},{"location":"listing/Listings/#assetlistingcount","text":"function assetListingCount(struct Listings.Registry self, address original) internal view returns (uint256) Returns the number of currently registered listings for a particular original asset.","title":"assetListingCount"},{"location":"listing/Listings/#paginateindexedlistings","text":"function paginateIndexedListings(struct Listings.Registry self, struct EnumerableSetUpgradeable.UintSet listingIndex, uint256 offset, uint256 limit) internal view returns (uint256[], struct Listings.Listing[]) Returns the paginated list of currently registered listing using provided index reference.","title":"paginateIndexedListings"},{"location":"listing/Listings/#_registerlistinggroup","text":"function _registerListingGroup(struct Listings.Registry self, string name, address owner) private returns (uint256 listingGroupId) Registers new listing group. Name Type Description self struct Listings.Registry name string The listing group name. owner address The listing group owner address. Name Type Description listingGroupId uint256 New listing group ID.","title":"_registerListingGroup"},{"location":"listing/strategies/fixed-price/FixedPriceListingController/","text":"FixedPriceListingController constructor constructor() public initialize function initialize(address acl) external Contract initializer. Name Type Description acl address ACL contract address. calculateRentalFee function calculateRentalFee(struct Listings.Params strategyParams, struct Rentings.Params rentingParams) external pure returns (uint256) Calculates rental fee based on renting params and implemented listing strategy. Name Type Description strategyParams struct Listings.Params rentingParams struct Rentings.Params Renting params. Name Type Description [0] uint256 Asset rental fee (base tokens per second). supportsInterface function supportsInterface(bytes4 interfaceId) public view returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._ strategyId function strategyId() public pure returns (bytes4) Returns implemented strategy ID. Name Type Description [0] bytes4 Listing strategy ID. decodeStrategyParams function decodeStrategyParams(struct Listings.Params params) public pure returns (uint256 baseRate) Decodes listing strategy params. Name Type Description params struct Listings.Params Encoded listing strategy params. Name Type Description baseRate uint256 Asset renting base rate (base tokens per second). _authorizeUpgrade function _authorizeUpgrade(address newImplementation) internal _Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by {upgradeTo} and {upgradeToAndCall}. Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}. ```solidity function authorizeUpgrade(address) internal override onlyOwner {} ``` _acl function _acl() internal view returns (contract IACL) return the IACL address","title":"FixedPriceListingController"},{"location":"listing/strategies/fixed-price/FixedPriceListingController/#fixedpricelistingcontroller","text":"","title":"FixedPriceListingController"},{"location":"listing/strategies/fixed-price/FixedPriceListingController/#constructor","text":"constructor() public","title":"constructor"},{"location":"listing/strategies/fixed-price/FixedPriceListingController/#initialize","text":"function initialize(address acl) external Contract initializer. Name Type Description acl address ACL contract address.","title":"initialize"},{"location":"listing/strategies/fixed-price/FixedPriceListingController/#calculaterentalfee","text":"function calculateRentalFee(struct Listings.Params strategyParams, struct Rentings.Params rentingParams) external pure returns (uint256) Calculates rental fee based on renting params and implemented listing strategy. Name Type Description strategyParams struct Listings.Params rentingParams struct Rentings.Params Renting params. Name Type Description [0] uint256 Asset rental fee (base tokens per second).","title":"calculateRentalFee"},{"location":"listing/strategies/fixed-price/FixedPriceListingController/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) public view returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._","title":"supportsInterface"},{"location":"listing/strategies/fixed-price/FixedPriceListingController/#strategyid","text":"function strategyId() public pure returns (bytes4) Returns implemented strategy ID. Name Type Description [0] bytes4 Listing strategy ID.","title":"strategyId"},{"location":"listing/strategies/fixed-price/FixedPriceListingController/#decodestrategyparams","text":"function decodeStrategyParams(struct Listings.Params params) public pure returns (uint256 baseRate) Decodes listing strategy params. Name Type Description params struct Listings.Params Encoded listing strategy params. Name Type Description baseRate uint256 Asset renting base rate (base tokens per second).","title":"decodeStrategyParams"},{"location":"listing/strategies/fixed-price/FixedPriceListingController/#_authorizeupgrade","text":"function _authorizeUpgrade(address newImplementation) internal _Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by {upgradeTo} and {upgradeToAndCall}. Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}. ```solidity function authorizeUpgrade(address) internal override onlyOwner {} ```","title":"_authorizeUpgrade"},{"location":"listing/strategies/fixed-price/FixedPriceListingController/#_acl","text":"function _acl() internal view returns (contract IACL) return the IACL address","title":"_acl"},{"location":"listing/strategies/fixed-price/FixedPriceListingControllerStorage/","text":"FixedPriceListingControllerStorage _aclContract contract IACL _aclContract ACL contract.","title":"FixedPriceListingControllerStorage"},{"location":"listing/strategies/fixed-price/FixedPriceListingControllerStorage/#fixedpricelistingcontrollerstorage","text":"","title":"FixedPriceListingControllerStorage"},{"location":"listing/strategies/fixed-price/FixedPriceListingControllerStorage/#_aclcontract","text":"contract IACL _aclContract ACL contract.","title":"_aclContract"},{"location":"listing/strategies/fixed-price/IFixedPriceListingController/","text":"IFixedPriceListingController decodeStrategyParams function decodeStrategyParams(struct Listings.Params params) external pure returns (uint256 baseRate) Decodes listing strategy params. Name Type Description params struct Listings.Params Encoded listing strategy params. Name Type Description baseRate uint256 Asset renting base rate (base tokens per second).","title":"IFixedPriceListingController"},{"location":"listing/strategies/fixed-price/IFixedPriceListingController/#ifixedpricelistingcontroller","text":"","title":"IFixedPriceListingController"},{"location":"listing/strategies/fixed-price/IFixedPriceListingController/#decodestrategyparams","text":"function decodeStrategyParams(struct Listings.Params params) external pure returns (uint256 baseRate) Decodes listing strategy params. Name Type Description params struct Listings.Params Encoded listing strategy params. Name Type Description baseRate uint256 Asset renting base rate (base tokens per second).","title":"decodeStrategyParams"},{"location":"listing/strategies/fixed-price-with-reward/FixedPriceWithRewardListingController/","text":"FixedPriceWithRewardListingController constructor constructor() public initialize function initialize(address acl) external Contract initializer. Name Type Description acl address ACL contract address. calculateRentalFee function calculateRentalFee(struct Listings.Params strategyParams, struct Rentings.Params rentingParams) external pure returns (uint256) Calculates rental fee based on renting params and implemented listing strategy. Name Type Description strategyParams struct Listings.Params rentingParams struct Rentings.Params Renting params. Name Type Description [0] uint256 Asset rental fee (base tokens per second). supportsInterface function supportsInterface(bytes4 interfaceId) public view returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._ strategyId function strategyId() public pure returns (bytes4) Returns implemented strategy ID. Name Type Description [0] bytes4 Listing strategy ID. decodeStrategyParams function decodeStrategyParams(struct Listings.Params params) public pure returns (uint256 baseRate, uint16 baseRewardPercent) Decodes listing strategy params. Name Type Description params struct Listings.Params Encoded listing strategy params. Name Type Description baseRate uint256 Asset renting base rate (base tokens per second). baseRewardPercent uint16 Asset renting base reward percent. _authorizeUpgrade function _authorizeUpgrade(address newImplementation) internal _Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by {upgradeTo} and {upgradeToAndCall}. Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}. ```solidity function authorizeUpgrade(address) internal override onlyOwner {} ``` _acl function _acl() internal view returns (contract IACL) return the IACL address","title":"FixedPriceWithRewardListingController"},{"location":"listing/strategies/fixed-price-with-reward/FixedPriceWithRewardListingController/#fixedpricewithrewardlistingcontroller","text":"","title":"FixedPriceWithRewardListingController"},{"location":"listing/strategies/fixed-price-with-reward/FixedPriceWithRewardListingController/#constructor","text":"constructor() public","title":"constructor"},{"location":"listing/strategies/fixed-price-with-reward/FixedPriceWithRewardListingController/#initialize","text":"function initialize(address acl) external Contract initializer. Name Type Description acl address ACL contract address.","title":"initialize"},{"location":"listing/strategies/fixed-price-with-reward/FixedPriceWithRewardListingController/#calculaterentalfee","text":"function calculateRentalFee(struct Listings.Params strategyParams, struct Rentings.Params rentingParams) external pure returns (uint256) Calculates rental fee based on renting params and implemented listing strategy. Name Type Description strategyParams struct Listings.Params rentingParams struct Rentings.Params Renting params. Name Type Description [0] uint256 Asset rental fee (base tokens per second).","title":"calculateRentalFee"},{"location":"listing/strategies/fixed-price-with-reward/FixedPriceWithRewardListingController/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) public view returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._","title":"supportsInterface"},{"location":"listing/strategies/fixed-price-with-reward/FixedPriceWithRewardListingController/#strategyid","text":"function strategyId() public pure returns (bytes4) Returns implemented strategy ID. Name Type Description [0] bytes4 Listing strategy ID.","title":"strategyId"},{"location":"listing/strategies/fixed-price-with-reward/FixedPriceWithRewardListingController/#decodestrategyparams","text":"function decodeStrategyParams(struct Listings.Params params) public pure returns (uint256 baseRate, uint16 baseRewardPercent) Decodes listing strategy params. Name Type Description params struct Listings.Params Encoded listing strategy params. Name Type Description baseRate uint256 Asset renting base rate (base tokens per second). baseRewardPercent uint16 Asset renting base reward percent.","title":"decodeStrategyParams"},{"location":"listing/strategies/fixed-price-with-reward/FixedPriceWithRewardListingController/#_authorizeupgrade","text":"function _authorizeUpgrade(address newImplementation) internal _Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by {upgradeTo} and {upgradeToAndCall}. Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}. ```solidity function authorizeUpgrade(address) internal override onlyOwner {} ```","title":"_authorizeUpgrade"},{"location":"listing/strategies/fixed-price-with-reward/FixedPriceWithRewardListingController/#_acl","text":"function _acl() internal view returns (contract IACL) return the IACL address","title":"_acl"},{"location":"listing/strategies/fixed-price-with-reward/FixedPriceWithRewardListingControllerStorage/","text":"FixedPriceWithRewardListingControllerStorage _aclContract contract IACL _aclContract ACL contract.","title":"FixedPriceWithRewardListingControllerStorage"},{"location":"listing/strategies/fixed-price-with-reward/FixedPriceWithRewardListingControllerStorage/#fixedpricewithrewardlistingcontrollerstorage","text":"","title":"FixedPriceWithRewardListingControllerStorage"},{"location":"listing/strategies/fixed-price-with-reward/FixedPriceWithRewardListingControllerStorage/#_aclcontract","text":"contract IACL _aclContract ACL contract.","title":"_aclContract"},{"location":"listing/strategies/fixed-price-with-reward/IFixedPriceWithRewardListingController/","text":"IFixedPriceWithRewardListingController decodeStrategyParams function decodeStrategyParams(struct Listings.Params params) external pure returns (uint256 baseRate, uint16 baseRewardPercent) Decodes listing strategy params. Name Type Description params struct Listings.Params Encoded listing strategy params. Name Type Description baseRate uint256 Asset renting base rate (base tokens per second). baseRewardPercent uint16 Asset renting base reward percent.","title":"IFixedPriceWithRewardListingController"},{"location":"listing/strategies/fixed-price-with-reward/IFixedPriceWithRewardListingController/#ifixedpricewithrewardlistingcontroller","text":"","title":"IFixedPriceWithRewardListingController"},{"location":"listing/strategies/fixed-price-with-reward/IFixedPriceWithRewardListingController/#decodestrategyparams","text":"function decodeStrategyParams(struct Listings.Params params) external pure returns (uint256 baseRate, uint16 baseRewardPercent) Decodes listing strategy params. Name Type Description params struct Listings.Params Encoded listing strategy params. Name Type Description baseRate uint256 Asset renting base rate (base tokens per second). baseRewardPercent uint16 Asset renting base reward percent.","title":"decodeStrategyParams"},{"location":"metahub/IMetahub/","text":"IMetahub","title":"IMetahub"},{"location":"metahub/IMetahub/#imetahub","text":"","title":"IMetahub"},{"location":"metahub/IProtocolConfigManager/","text":"IProtocolConfigManager CallerIsNotWarperManager error CallerIsNotWarperManager() Raised when the caller is not the WarperManager contract. ProtocolRentalFeeChanged event ProtocolRentalFeeChanged(uint16 rentalFeePercent) Emitted when a protocol rental fee is changed. Name Type Description rentalFeePercent uint16 New protocol rental fee percentage. setProtocolRentalFeePercent function setProtocolRentalFeePercent(uint16 rentalFeePercent) external Updates the protocol rental fee percentage. Name Type Description rentalFeePercent uint16 New protocol rental fee percentage. protocolRentalFeePercent function protocolRentalFeePercent() external view returns (uint16) Returns the protocol rental fee percentage. Name Type Description [0] uint16 protocol fee percent. baseToken function baseToken() external view returns (address) Returns the base token that's used for stable price denomination. Name Type Description [0] address The base token address. warperController function warperController(address warper) external view returns (address) Get thee Warper Controller contracts address for a given warper. Name Type Description warper address the warper address. Name Type Description [0] address The Warper Controller address.","title":"IProtocolConfigManager"},{"location":"metahub/IProtocolConfigManager/#iprotocolconfigmanager","text":"","title":"IProtocolConfigManager"},{"location":"metahub/IProtocolConfigManager/#callerisnotwarpermanager","text":"error CallerIsNotWarperManager() Raised when the caller is not the WarperManager contract.","title":"CallerIsNotWarperManager"},{"location":"metahub/IProtocolConfigManager/#protocolrentalfeechanged","text":"event ProtocolRentalFeeChanged(uint16 rentalFeePercent) Emitted when a protocol rental fee is changed. Name Type Description rentalFeePercent uint16 New protocol rental fee percentage.","title":"ProtocolRentalFeeChanged"},{"location":"metahub/IProtocolConfigManager/#setprotocolrentalfeepercent","text":"function setProtocolRentalFeePercent(uint16 rentalFeePercent) external Updates the protocol rental fee percentage. Name Type Description rentalFeePercent uint16 New protocol rental fee percentage.","title":"setProtocolRentalFeePercent"},{"location":"metahub/IProtocolConfigManager/#protocolrentalfeepercent","text":"function protocolRentalFeePercent() external view returns (uint16) Returns the protocol rental fee percentage. Name Type Description [0] uint16 protocol fee percent.","title":"protocolRentalFeePercent"},{"location":"metahub/IProtocolConfigManager/#basetoken","text":"function baseToken() external view returns (address) Returns the base token that's used for stable price denomination. Name Type Description [0] address The base token address.","title":"baseToken"},{"location":"metahub/IProtocolConfigManager/#warpercontroller","text":"function warperController(address warper) external view returns (address) Get thee Warper Controller contracts address for a given warper. Name Type Description warper address the warper address. Name Type Description [0] address The Warper Controller address.","title":"warperController"},{"location":"metahub/Metahub/","text":"Metahub MetahubInitParams struct MetahubInitParams { contract IWarperManager warperManager; contract IListingStrategyRegistry listingStrategyRegistry; contract IUniverseRegistry universeRegistry; contract IAssetClassRegistry assetClassRegistry; contract IACL acl; contract IERC20Upgradeable baseToken; uint16 rentalFeePercent; } onlyUniverseOwner modifier onlyUniverseOwner(uint256 universeId) Modifier to make a function callable only by the universe owner. onlyWarperManager modifier onlyWarperManager() Modifier to make a function callable only by the WarperManager contract. onlyLister modifier onlyLister(uint256 listingId) Modifier to make a function callable only by the asset lister (original owner). listed modifier listed(uint256 listingId) Modifier to make sure the function is called for the active listing. listingExists modifier listingExists(uint256 listingId) Modifier to make sure the function is called for a listing that has been registered. constructor constructor() public initialize function initialize(struct Metahub.MetahubInitParams params) external Metahub initializer. Name Type Description params struct Metahub.MetahubInitParams Initialization params. setProtocolRentalFeePercent function setProtocolRentalFeePercent(uint16 rentalFeePercent) external Updates the protocol rental fee percentage. Name Type Description rentalFeePercent uint16 New protocol rental fee percentage. listAsset function listAsset(struct Assets.Asset asset, struct Listings.Params params, uint32 maxLockPeriod, bool immediatePayout) external returns (uint256 listingId, uint256 listingGroupId) Performs new asset listing. Emits an {AssetListed} event. Name Type Description asset struct Assets.Asset Asset to be listed. params struct Listings.Params Listing strategy parameters. maxLockPeriod uint32 The maximum amount of time the original asset owner can wait before getting the asset back. immediatePayout bool Indicates whether the rental fee must be transferred to the lister on every renting. If FALSE, the rental fees get accumulated until withdrawn manually. Name Type Description listingId uint256 New listing ID. listingGroupId uint256 Listing group ID. registerAsset function registerAsset(bytes4 assetClass, address original) external Register a new asset. Name Type Description assetClass bytes4 Asset class identifier. original address The original assets address. delistAsset function delistAsset(uint256 listingId) external Marks the asset as being delisted. This operation in irreversible. After delisting, the asset can only be withdrawn when it has no active rentals. Emits an {AssetDelisted} event. Name Type Description listingId uint256 Listing ID. withdrawAsset function withdrawAsset(uint256 listingId) external Returns the asset back to the lister. Emits an {AssetWithdrawn} event. Name Type Description listingId uint256 Listing ID. pauseListing function pauseListing(uint256 listingId) external Puts the listing on pause. Emits a {ListingPaused} event. Name Type Description listingId uint256 Listing ID. unpauseListing function unpauseListing(uint256 listingId) external Lifts the listing pause. Emits a {ListingUnpaused} event. Name Type Description listingId uint256 Listing ID. withdrawProtocolFunds function withdrawProtocolFunds(address token, uint256 amount, address to) external Transfers the specific `amount` of `token` from a protocol balance to an arbitrary address. Name Type Description token address The token address. amount uint256 The amount to be withdrawn. to address The payee address. withdrawUniverseFunds function withdrawUniverseFunds(uint256 universeId, address token, uint256 amount, address to) external Transfers the specific `amount` of `token` from a universe balance to an arbitrary address. Name Type Description universeId uint256 The universe ID. token address The token address. amount uint256 The amount to be withdrawn. to address The payee address. withdrawFunds function withdrawFunds(address token, uint256 amount, address to) external Transfers the specific `amount` of `token` from a user balance to an arbitrary address. Name Type Description token address The token address. amount uint256 The amount to be withdrawn. to address The payee address. rent function rent(struct Rentings.Params rentingParams, uint256 maxPaymentAmount) external returns (uint256) Performs renting operation. Name Type Description rentingParams struct Rentings.Params Renting parameters. maxPaymentAmount uint256 Maximal payment amount the renter is willing to pay. Name Type Description [0] uint256 New rental ID. assetClassController function assetClassController(bytes4 assetClass) external view returns (address) Retrieve the asset class controller for a given assetClass. Name Type Description assetClass bytes4 Asset class identifier. Name Type Description [0] address The asset class controller. supportedAssetCount function supportedAssetCount() external view returns (uint256) Returns the number of currently supported assets. Name Type Description [0] uint256 Asset count. supportedAssets function supportedAssets(uint256 offset, uint256 limit) external view returns (address[], struct Assets.AssetConfig[]) Returns the list of all supported asset addresses. Name Type Description offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] address[] List of original asset addresses. [1] struct Assets.AssetConfig[] List of asset config structures. isWarperAdmin function isWarperAdmin(address warper, address account) external view returns (bool) Check if the given account is the admin of a warper. Name Type Description warper address Address of the warper. account address The users account to checked for the admin permissions on the warper. Name Type Description [0] bool True if the account is the admin of the warper. estimateRent function estimateRent(struct Rentings.Params rentingParams) external view returns (struct Rentings.RentalFees) Evaluates renting params and returns rental fee breakdown. Name Type Description rentingParams struct Rentings.Params Renting parameters. Name Type Description [0] struct Rentings.RentalFees Rental fee breakdown. protocolRentalFeePercent function protocolRentalFeePercent() external view returns (uint16) Returns the protocol rental fee percentage. Name Type Description [0] uint16 protocol fee percent. baseToken function baseToken() external view returns (address) Returns the base token that's used for stable price denomination. Name Type Description [0] address The base token address. warperController function warperController(address warper) external view returns (address) Get thee Warper Controller contracts address for a given warper. Name Type Description warper address the warper address. Name Type Description [0] address The Warper Controller address. rentalAgreementInfo function rentalAgreementInfo(uint256 rentalId) external view returns (struct Rentings.Agreement) Returns the rental agreement details. Name Type Description rentalId uint256 Rental agreement ID. Name Type Description [0] struct Rentings.Agreement Rental agreement details. userRentalCount function userRentalCount(address renter) external view returns (uint256) Returns the number of currently registered rental agreements for particular renter account. Name Type Description renter address Renter address. Name Type Description [0] uint256 Rental agreement count. userRentalAgreements function userRentalAgreements(address renter, uint256 offset, uint256 limit) external view returns (uint256[], struct Rentings.Agreement[]) Returns the paginated list of currently registered rental agreements for particular renter account. Name Type Description renter address Renter address. offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] uint256[] Rental agreement IDs. [1] struct Rentings.Agreement[] Rental agreements. collectionRentedValue function collectionRentedValue(bytes32 warpedCollectionId, address renter) external view returns (uint256) Returns token amount from specific collection rented by particular account. Name Type Description warpedCollectionId bytes32 Warped collection ID. renter address The renter account address. Name Type Description [0] uint256 Rented value. assetRentalStatus function assetRentalStatus(struct Assets.AssetId warpedAssetId) external view returns (enum Rentings.RentalStatus) Returns the rental status of a given warped asset. Name Type Description warpedAssetId struct Assets.AssetId Warped asset ID. Name Type Description [0] enum Rentings.RentalStatus The asset rental status. listingInfo function listingInfo(uint256 listingId) external view returns (struct Listings.Listing) Returns the listing details by the listing ID. Name Type Description listingId uint256 Listing ID. Name Type Description [0] struct Listings.Listing Listing details. listingCount function listingCount() external view returns (uint256) Returns the number of currently registered listings. Name Type Description [0] uint256 Listing count. listings function listings(uint256 offset, uint256 limit) external view returns (uint256[], struct Listings.Listing[]) Returns the paginated list of currently registered listings. Name Type Description offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] uint256[] Listing IDs. [1] struct Listings.Listing[] Listings. userListingCount function userListingCount(address lister) external view returns (uint256) Returns the number of currently registered listings for the particular lister account. Name Type Description lister address Lister address. Name Type Description [0] uint256 Listing count. userListings function userListings(address lister, uint256 offset, uint256 limit) external view returns (uint256[], struct Listings.Listing[]) Returns the paginated list of currently registered listings for the particular lister account. Name Type Description lister address Lister address. offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] uint256[] Listing IDs. [1] struct Listings.Listing[] Listings. assetListingCount function assetListingCount(address original) external view returns (uint256) Returns the number of currently registered listings for the particular original asset address. Name Type Description original address Original asset address. Name Type Description [0] uint256 Listing count. assetListings function assetListings(address original, uint256 offset, uint256 limit) external view returns (uint256[], struct Listings.Listing[]) Returns the paginated list of currently registered listings for the particular original asset address. Name Type Description original address Original asset address. offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] uint256[] Listing IDs. [1] struct Listings.Listing[] Listings. listingController function listingController(bytes4 strategyId) external view returns (address) Returns listing strategy controller. Name Type Description strategyId bytes4 Listing strategy ID. Name Type Description [0] address Listing controller address. protocolBalance function protocolBalance(address token) external view returns (uint256) Returns the amount of `token`, currently accumulated by the protocol. Name Type Description token address The token address. Name Type Description [0] uint256 Balance of `token`. protocolBalances function protocolBalances() external view returns (struct Accounts.Balance[]) Returns the list of protocol balances in various tokens. Name Type Description [0] struct Accounts.Balance[] List of balances. universeBalance function universeBalance(uint256 universeId, address token) external view returns (uint256) Returns the amount of `token`, currently accumulated by the universe. Name Type Description universeId uint256 The universe ID. token address The token address. Name Type Description [0] uint256 Balance of `token`. universeBalances function universeBalances(uint256 universeId) external view returns (struct Accounts.Balance[]) Returns the list of universe balances in various tokens. Name Type Description universeId uint256 The universe ID. Name Type Description [0] struct Accounts.Balance[] List of balances. balance function balance(address account, address token) external view returns (uint256) Returns the amount of `token`, currently accumulated by the user. Name Type Description account address The account to query the balance for. token address The token address. Name Type Description [0] uint256 Balance of `token`. balances function balances(address account) external view returns (struct Accounts.Balance[]) Returns the list of user balances in various tokens. Name Type Description account address The account to query the balance for. Name Type Description [0] struct Accounts.Balance[] List of balances. _authorizeUpgrade function _authorizeUpgrade(address newImplementation) internal Checks whether the caller is authorized to upgrade the Metahub implementation. _warpListedAsset function _warpListedAsset(uint256 listingId, address warper, address renter) internal returns (bytes32 collectionId, struct Assets.Asset warpedAsset) Finds the listed asset and warps it, using corresponding warper controller. Name Type Description listingId uint256 Listing ID. warper address Warper address. renter address Renter address. Name Type Description collectionId bytes32 Warped collection ID. warpedAsset struct Assets.Asset Warped asset structure. _handleRentalPayment function _handleRentalPayment(struct Rentings.Params rentingParams, address payer, uint256 maxPaymentAmount) internal returns (struct Accounts.RentalEarnings rentalEarnings) Handles all rental payments. _executeWarperRentalHook function _executeWarperRentalHook(address warper, uint256 rentalId, struct Rentings.Agreement rentalAgreement, struct Accounts.RentalEarnings rentalEarnings) internal Executes warper rental hook using the corresponding controller. Name Type Description warper address Warper address. rentalId uint256 Rental Agreement ID. rentalAgreement struct Rentings.Agreement Newly registered rental agreement details. rentalEarnings struct Accounts.RentalEarnings The rental earnings breakdown. _acl function _acl() internal view returns (contract IACL) return the IACL address","title":"Metahub"},{"location":"metahub/Metahub/#metahub","text":"","title":"Metahub"},{"location":"metahub/Metahub/#metahubinitparams","text":"struct MetahubInitParams { contract IWarperManager warperManager; contract IListingStrategyRegistry listingStrategyRegistry; contract IUniverseRegistry universeRegistry; contract IAssetClassRegistry assetClassRegistry; contract IACL acl; contract IERC20Upgradeable baseToken; uint16 rentalFeePercent; }","title":"MetahubInitParams"},{"location":"metahub/Metahub/#onlyuniverseowner","text":"modifier onlyUniverseOwner(uint256 universeId) Modifier to make a function callable only by the universe owner.","title":"onlyUniverseOwner"},{"location":"metahub/Metahub/#onlywarpermanager","text":"modifier onlyWarperManager() Modifier to make a function callable only by the WarperManager contract.","title":"onlyWarperManager"},{"location":"metahub/Metahub/#onlylister","text":"modifier onlyLister(uint256 listingId) Modifier to make a function callable only by the asset lister (original owner).","title":"onlyLister"},{"location":"metahub/Metahub/#listed","text":"modifier listed(uint256 listingId) Modifier to make sure the function is called for the active listing.","title":"listed"},{"location":"metahub/Metahub/#listingexists","text":"modifier listingExists(uint256 listingId) Modifier to make sure the function is called for a listing that has been registered.","title":"listingExists"},{"location":"metahub/Metahub/#constructor","text":"constructor() public","title":"constructor"},{"location":"metahub/Metahub/#initialize","text":"function initialize(struct Metahub.MetahubInitParams params) external Metahub initializer. Name Type Description params struct Metahub.MetahubInitParams Initialization params.","title":"initialize"},{"location":"metahub/Metahub/#setprotocolrentalfeepercent","text":"function setProtocolRentalFeePercent(uint16 rentalFeePercent) external Updates the protocol rental fee percentage. Name Type Description rentalFeePercent uint16 New protocol rental fee percentage.","title":"setProtocolRentalFeePercent"},{"location":"metahub/Metahub/#listasset","text":"function listAsset(struct Assets.Asset asset, struct Listings.Params params, uint32 maxLockPeriod, bool immediatePayout) external returns (uint256 listingId, uint256 listingGroupId) Performs new asset listing. Emits an {AssetListed} event. Name Type Description asset struct Assets.Asset Asset to be listed. params struct Listings.Params Listing strategy parameters. maxLockPeriod uint32 The maximum amount of time the original asset owner can wait before getting the asset back. immediatePayout bool Indicates whether the rental fee must be transferred to the lister on every renting. If FALSE, the rental fees get accumulated until withdrawn manually. Name Type Description listingId uint256 New listing ID. listingGroupId uint256 Listing group ID.","title":"listAsset"},{"location":"metahub/Metahub/#registerasset","text":"function registerAsset(bytes4 assetClass, address original) external Register a new asset. Name Type Description assetClass bytes4 Asset class identifier. original address The original assets address.","title":"registerAsset"},{"location":"metahub/Metahub/#delistasset","text":"function delistAsset(uint256 listingId) external Marks the asset as being delisted. This operation in irreversible. After delisting, the asset can only be withdrawn when it has no active rentals. Emits an {AssetDelisted} event. Name Type Description listingId uint256 Listing ID.","title":"delistAsset"},{"location":"metahub/Metahub/#withdrawasset","text":"function withdrawAsset(uint256 listingId) external Returns the asset back to the lister. Emits an {AssetWithdrawn} event. Name Type Description listingId uint256 Listing ID.","title":"withdrawAsset"},{"location":"metahub/Metahub/#pauselisting","text":"function pauseListing(uint256 listingId) external Puts the listing on pause. Emits a {ListingPaused} event. Name Type Description listingId uint256 Listing ID.","title":"pauseListing"},{"location":"metahub/Metahub/#unpauselisting","text":"function unpauseListing(uint256 listingId) external Lifts the listing pause. Emits a {ListingUnpaused} event. Name Type Description listingId uint256 Listing ID.","title":"unpauseListing"},{"location":"metahub/Metahub/#withdrawprotocolfunds","text":"function withdrawProtocolFunds(address token, uint256 amount, address to) external Transfers the specific `amount` of `token` from a protocol balance to an arbitrary address. Name Type Description token address The token address. amount uint256 The amount to be withdrawn. to address The payee address.","title":"withdrawProtocolFunds"},{"location":"metahub/Metahub/#withdrawuniversefunds","text":"function withdrawUniverseFunds(uint256 universeId, address token, uint256 amount, address to) external Transfers the specific `amount` of `token` from a universe balance to an arbitrary address. Name Type Description universeId uint256 The universe ID. token address The token address. amount uint256 The amount to be withdrawn. to address The payee address.","title":"withdrawUniverseFunds"},{"location":"metahub/Metahub/#withdrawfunds","text":"function withdrawFunds(address token, uint256 amount, address to) external Transfers the specific `amount` of `token` from a user balance to an arbitrary address. Name Type Description token address The token address. amount uint256 The amount to be withdrawn. to address The payee address.","title":"withdrawFunds"},{"location":"metahub/Metahub/#rent","text":"function rent(struct Rentings.Params rentingParams, uint256 maxPaymentAmount) external returns (uint256) Performs renting operation. Name Type Description rentingParams struct Rentings.Params Renting parameters. maxPaymentAmount uint256 Maximal payment amount the renter is willing to pay. Name Type Description [0] uint256 New rental ID.","title":"rent"},{"location":"metahub/Metahub/#assetclasscontroller","text":"function assetClassController(bytes4 assetClass) external view returns (address) Retrieve the asset class controller for a given assetClass. Name Type Description assetClass bytes4 Asset class identifier. Name Type Description [0] address The asset class controller.","title":"assetClassController"},{"location":"metahub/Metahub/#supportedassetcount","text":"function supportedAssetCount() external view returns (uint256) Returns the number of currently supported assets. Name Type Description [0] uint256 Asset count.","title":"supportedAssetCount"},{"location":"metahub/Metahub/#supportedassets","text":"function supportedAssets(uint256 offset, uint256 limit) external view returns (address[], struct Assets.AssetConfig[]) Returns the list of all supported asset addresses. Name Type Description offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] address[] List of original asset addresses. [1] struct Assets.AssetConfig[] List of asset config structures.","title":"supportedAssets"},{"location":"metahub/Metahub/#iswarperadmin","text":"function isWarperAdmin(address warper, address account) external view returns (bool) Check if the given account is the admin of a warper. Name Type Description warper address Address of the warper. account address The users account to checked for the admin permissions on the warper. Name Type Description [0] bool True if the account is the admin of the warper.","title":"isWarperAdmin"},{"location":"metahub/Metahub/#estimaterent","text":"function estimateRent(struct Rentings.Params rentingParams) external view returns (struct Rentings.RentalFees) Evaluates renting params and returns rental fee breakdown. Name Type Description rentingParams struct Rentings.Params Renting parameters. Name Type Description [0] struct Rentings.RentalFees Rental fee breakdown.","title":"estimateRent"},{"location":"metahub/Metahub/#protocolrentalfeepercent","text":"function protocolRentalFeePercent() external view returns (uint16) Returns the protocol rental fee percentage. Name Type Description [0] uint16 protocol fee percent.","title":"protocolRentalFeePercent"},{"location":"metahub/Metahub/#basetoken","text":"function baseToken() external view returns (address) Returns the base token that's used for stable price denomination. Name Type Description [0] address The base token address.","title":"baseToken"},{"location":"metahub/Metahub/#warpercontroller","text":"function warperController(address warper) external view returns (address) Get thee Warper Controller contracts address for a given warper. Name Type Description warper address the warper address. Name Type Description [0] address The Warper Controller address.","title":"warperController"},{"location":"metahub/Metahub/#rentalagreementinfo","text":"function rentalAgreementInfo(uint256 rentalId) external view returns (struct Rentings.Agreement) Returns the rental agreement details. Name Type Description rentalId uint256 Rental agreement ID. Name Type Description [0] struct Rentings.Agreement Rental agreement details.","title":"rentalAgreementInfo"},{"location":"metahub/Metahub/#userrentalcount","text":"function userRentalCount(address renter) external view returns (uint256) Returns the number of currently registered rental agreements for particular renter account. Name Type Description renter address Renter address. Name Type Description [0] uint256 Rental agreement count.","title":"userRentalCount"},{"location":"metahub/Metahub/#userrentalagreements","text":"function userRentalAgreements(address renter, uint256 offset, uint256 limit) external view returns (uint256[], struct Rentings.Agreement[]) Returns the paginated list of currently registered rental agreements for particular renter account. Name Type Description renter address Renter address. offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] uint256[] Rental agreement IDs. [1] struct Rentings.Agreement[] Rental agreements.","title":"userRentalAgreements"},{"location":"metahub/Metahub/#collectionrentedvalue","text":"function collectionRentedValue(bytes32 warpedCollectionId, address renter) external view returns (uint256) Returns token amount from specific collection rented by particular account. Name Type Description warpedCollectionId bytes32 Warped collection ID. renter address The renter account address. Name Type Description [0] uint256 Rented value.","title":"collectionRentedValue"},{"location":"metahub/Metahub/#assetrentalstatus","text":"function assetRentalStatus(struct Assets.AssetId warpedAssetId) external view returns (enum Rentings.RentalStatus) Returns the rental status of a given warped asset. Name Type Description warpedAssetId struct Assets.AssetId Warped asset ID. Name Type Description [0] enum Rentings.RentalStatus The asset rental status.","title":"assetRentalStatus"},{"location":"metahub/Metahub/#listinginfo","text":"function listingInfo(uint256 listingId) external view returns (struct Listings.Listing) Returns the listing details by the listing ID. Name Type Description listingId uint256 Listing ID. Name Type Description [0] struct Listings.Listing Listing details.","title":"listingInfo"},{"location":"metahub/Metahub/#listingcount","text":"function listingCount() external view returns (uint256) Returns the number of currently registered listings. Name Type Description [0] uint256 Listing count.","title":"listingCount"},{"location":"metahub/Metahub/#listings","text":"function listings(uint256 offset, uint256 limit) external view returns (uint256[], struct Listings.Listing[]) Returns the paginated list of currently registered listings. Name Type Description offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] uint256[] Listing IDs. [1] struct Listings.Listing[] Listings.","title":"listings"},{"location":"metahub/Metahub/#userlistingcount","text":"function userListingCount(address lister) external view returns (uint256) Returns the number of currently registered listings for the particular lister account. Name Type Description lister address Lister address. Name Type Description [0] uint256 Listing count.","title":"userListingCount"},{"location":"metahub/Metahub/#userlistings","text":"function userListings(address lister, uint256 offset, uint256 limit) external view returns (uint256[], struct Listings.Listing[]) Returns the paginated list of currently registered listings for the particular lister account. Name Type Description lister address Lister address. offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] uint256[] Listing IDs. [1] struct Listings.Listing[] Listings.","title":"userListings"},{"location":"metahub/Metahub/#assetlistingcount","text":"function assetListingCount(address original) external view returns (uint256) Returns the number of currently registered listings for the particular original asset address. Name Type Description original address Original asset address. Name Type Description [0] uint256 Listing count.","title":"assetListingCount"},{"location":"metahub/Metahub/#assetlistings","text":"function assetListings(address original, uint256 offset, uint256 limit) external view returns (uint256[], struct Listings.Listing[]) Returns the paginated list of currently registered listings for the particular original asset address. Name Type Description original address Original asset address. offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] uint256[] Listing IDs. [1] struct Listings.Listing[] Listings.","title":"assetListings"},{"location":"metahub/Metahub/#listingcontroller","text":"function listingController(bytes4 strategyId) external view returns (address) Returns listing strategy controller. Name Type Description strategyId bytes4 Listing strategy ID. Name Type Description [0] address Listing controller address.","title":"listingController"},{"location":"metahub/Metahub/#protocolbalance","text":"function protocolBalance(address token) external view returns (uint256) Returns the amount of `token`, currently accumulated by the protocol. Name Type Description token address The token address. Name Type Description [0] uint256 Balance of `token`.","title":"protocolBalance"},{"location":"metahub/Metahub/#protocolbalances","text":"function protocolBalances() external view returns (struct Accounts.Balance[]) Returns the list of protocol balances in various tokens. Name Type Description [0] struct Accounts.Balance[] List of balances.","title":"protocolBalances"},{"location":"metahub/Metahub/#universebalance","text":"function universeBalance(uint256 universeId, address token) external view returns (uint256) Returns the amount of `token`, currently accumulated by the universe. Name Type Description universeId uint256 The universe ID. token address The token address. Name Type Description [0] uint256 Balance of `token`.","title":"universeBalance"},{"location":"metahub/Metahub/#universebalances","text":"function universeBalances(uint256 universeId) external view returns (struct Accounts.Balance[]) Returns the list of universe balances in various tokens. Name Type Description universeId uint256 The universe ID. Name Type Description [0] struct Accounts.Balance[] List of balances.","title":"universeBalances"},{"location":"metahub/Metahub/#balance","text":"function balance(address account, address token) external view returns (uint256) Returns the amount of `token`, currently accumulated by the user. Name Type Description account address The account to query the balance for. token address The token address. Name Type Description [0] uint256 Balance of `token`.","title":"balance"},{"location":"metahub/Metahub/#balances","text":"function balances(address account) external view returns (struct Accounts.Balance[]) Returns the list of user balances in various tokens. Name Type Description account address The account to query the balance for. Name Type Description [0] struct Accounts.Balance[] List of balances.","title":"balances"},{"location":"metahub/Metahub/#_authorizeupgrade","text":"function _authorizeUpgrade(address newImplementation) internal Checks whether the caller is authorized to upgrade the Metahub implementation.","title":"_authorizeUpgrade"},{"location":"metahub/Metahub/#_warplistedasset","text":"function _warpListedAsset(uint256 listingId, address warper, address renter) internal returns (bytes32 collectionId, struct Assets.Asset warpedAsset) Finds the listed asset and warps it, using corresponding warper controller. Name Type Description listingId uint256 Listing ID. warper address Warper address. renter address Renter address. Name Type Description collectionId bytes32 Warped collection ID. warpedAsset struct Assets.Asset Warped asset structure.","title":"_warpListedAsset"},{"location":"metahub/Metahub/#_handlerentalpayment","text":"function _handleRentalPayment(struct Rentings.Params rentingParams, address payer, uint256 maxPaymentAmount) internal returns (struct Accounts.RentalEarnings rentalEarnings) Handles all rental payments.","title":"_handleRentalPayment"},{"location":"metahub/Metahub/#_executewarperrentalhook","text":"function _executeWarperRentalHook(address warper, uint256 rentalId, struct Rentings.Agreement rentalAgreement, struct Accounts.RentalEarnings rentalEarnings) internal Executes warper rental hook using the corresponding controller. Name Type Description warper address Warper address. rentalId uint256 Rental Agreement ID. rentalAgreement struct Rentings.Agreement Newly registered rental agreement details. rentalEarnings struct Accounts.RentalEarnings The rental earnings breakdown.","title":"_executeWarperRentalHook"},{"location":"metahub/Metahub/#_acl","text":"function _acl() internal view returns (contract IACL) return the IACL address","title":"_acl"},{"location":"metahub/MetahubStorage/","text":"MetahubStorage _aclContract contract IACL _aclContract ACL contract. _protocolConfig struct Protocol.Config _protocolConfig Protocol configuration. _accountRegistry struct Accounts.Registry _accountRegistry Account registry contains the data about participants' accounts and their current balances. _universeRegistry contract IUniverseRegistry _universeRegistry Universe registry contains the data about all registered universes and their settings. _assetRegistry struct Assets.Registry _assetRegistry Asset registry contains the data about all registered assets and supported asset classes. _warperManager contract IWarperManager _warperManager Warper manager contains the data about all registered warpers. _listingRegistry struct Listings.Registry _listingRegistry Listing registry contains the data about all listings. _rentingRegistry struct Rentings.Registry _rentingRegistry Renting registry contains the data about all rentals.","title":"MetahubStorage"},{"location":"metahub/MetahubStorage/#metahubstorage","text":"","title":"MetahubStorage"},{"location":"metahub/MetahubStorage/#_aclcontract","text":"contract IACL _aclContract ACL contract.","title":"_aclContract"},{"location":"metahub/MetahubStorage/#_protocolconfig","text":"struct Protocol.Config _protocolConfig Protocol configuration.","title":"_protocolConfig"},{"location":"metahub/MetahubStorage/#_accountregistry","text":"struct Accounts.Registry _accountRegistry Account registry contains the data about participants' accounts and their current balances.","title":"_accountRegistry"},{"location":"metahub/MetahubStorage/#_universeregistry","text":"contract IUniverseRegistry _universeRegistry Universe registry contains the data about all registered universes and their settings.","title":"_universeRegistry"},{"location":"metahub/MetahubStorage/#_assetregistry","text":"struct Assets.Registry _assetRegistry Asset registry contains the data about all registered assets and supported asset classes.","title":"_assetRegistry"},{"location":"metahub/MetahubStorage/#_warpermanager","text":"contract IWarperManager _warperManager Warper manager contains the data about all registered warpers.","title":"_warperManager"},{"location":"metahub/MetahubStorage/#_listingregistry","text":"struct Listings.Registry _listingRegistry Listing registry contains the data about all listings.","title":"_listingRegistry"},{"location":"metahub/MetahubStorage/#_rentingregistry","text":"struct Rentings.Registry _rentingRegistry Renting registry contains the data about all rentals.","title":"_rentingRegistry"},{"location":"metahub/Protocol/","text":"Protocol BaseTokenMismatch error BaseTokenMismatch() Thrown when the provided token does not match with the configured base token. Config struct Config { contract IERC20Upgradeable baseToken; uint16 rentalFeePercent; } checkBaseToken function checkBaseToken(struct Protocol.Config self, address token) internal view Reverts if the `token` does not match the base one.","title":"Protocol"},{"location":"metahub/Protocol/#protocol","text":"","title":"Protocol"},{"location":"metahub/Protocol/#basetokenmismatch","text":"error BaseTokenMismatch() Thrown when the provided token does not match with the configured base token.","title":"BaseTokenMismatch"},{"location":"metahub/Protocol/#config","text":"struct Config { contract IERC20Upgradeable baseToken; uint16 rentalFeePercent; }","title":"Config"},{"location":"metahub/Protocol/#checkbasetoken","text":"function checkBaseToken(struct Protocol.Config self, address token) internal view Reverts if the `token` does not match the base one.","title":"checkBaseToken"},{"location":"mocks/ERC20Mock/","text":"ERC20Mock _decimals uint8 _decimals constructor constructor(string name, string symbol, uint8 decimals_, uint256 totalSupply) public mint function mint(address to, uint256 amount) public decimals function decimals() public view returns (uint8) _Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for display purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}._","title":"ERC20Mock"},{"location":"mocks/ERC20Mock/#erc20mock","text":"","title":"ERC20Mock"},{"location":"mocks/ERC20Mock/#_decimals","text":"uint8 _decimals","title":"_decimals"},{"location":"mocks/ERC20Mock/#constructor","text":"constructor(string name, string symbol, uint8 decimals_, uint256 totalSupply) public","title":"constructor"},{"location":"mocks/ERC20Mock/#mint","text":"function mint(address to, uint256 amount) public","title":"mint"},{"location":"mocks/ERC20Mock/#decimals","text":"function decimals() public view returns (uint8) _Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for display purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}._","title":"decimals"},{"location":"mocks/ERC721AssetVaultMock/","text":"ERC721AssetVaultMock","title":"ERC721AssetVaultMock"},{"location":"mocks/ERC721AssetVaultMock/#erc721assetvaultmock","text":"","title":"ERC721AssetVaultMock"},{"location":"mocks/ERC721InternalTest/","text":"ERC721InternalTest An NFT contract used for internal testing purposes. _tokenIdTracker struct Counters.Counter _tokenIdTracker _tokenURIs mapping(uint256 &#x3D;&gt; string) _tokenURIs constructor constructor(string name, string symbol) public mint function mint(string newTokenURI) public setTokenURI function setTokenURI(uint256 tokenId, string newTokenURI) public tokenURI function tokenURI(uint256 tokenId) public view virtual returns (string) See {IERC721Metadata-tokenURI}.","title":"ERC721InternalTest"},{"location":"mocks/ERC721InternalTest/#erc721internaltest","text":"An NFT contract used for internal testing purposes.","title":"ERC721InternalTest"},{"location":"mocks/ERC721InternalTest/#_tokenidtracker","text":"struct Counters.Counter _tokenIdTracker","title":"_tokenIdTracker"},{"location":"mocks/ERC721InternalTest/#_tokenuris","text":"mapping(uint256 &#x3D;&gt; string) _tokenURIs","title":"_tokenURIs"},{"location":"mocks/ERC721InternalTest/#constructor","text":"constructor(string name, string symbol) public","title":"constructor"},{"location":"mocks/ERC721InternalTest/#mint","text":"function mint(string newTokenURI) public","title":"mint"},{"location":"mocks/ERC721InternalTest/#settokenuri","text":"function setTokenURI(uint256 tokenId, string newTokenURI) public","title":"setTokenURI"},{"location":"mocks/ERC721InternalTest/#tokenuri","text":"function tokenURI(uint256 tokenId) public view virtual returns (string) See {IERC721Metadata-tokenURI}.","title":"tokenURI"},{"location":"mocks/ERC721Mock/","text":"ERC721Mock constructor constructor(string name, string symbol) public mint function mint(address to, uint256 tokenId) public","title":"ERC721Mock"},{"location":"mocks/ERC721Mock/#erc721mock","text":"","title":"ERC721Mock"},{"location":"mocks/ERC721Mock/#constructor","text":"constructor(string name, string symbol) public","title":"constructor"},{"location":"mocks/ERC721Mock/#mint","text":"function mint(address to, uint256 tokenId) public","title":"mint"},{"location":"mocks/ERC721Receiver/","text":"ERC721ReceiverMock Error enum Error { NONE, REVERT_WITH_MESSAGE, REVERT_WITHOUT_MESSAGE, PANIC } _retval bytes4 _retval _error enum ERC721ReceiverMock.Error _error Received event Received(address operator, address from, uint256 tokenId, bytes data) constructor constructor(bytes4 retval, enum ERC721ReceiverMock.Error error) public onERC721Received function onERC721Received(address operator, address from, uint256 tokenId, bytes data) public returns (bytes4) _Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`._","title":"ERC721Receiver"},{"location":"mocks/ERC721Receiver/#erc721receivermock","text":"","title":"ERC721ReceiverMock"},{"location":"mocks/ERC721Receiver/#error","text":"enum Error { NONE, REVERT_WITH_MESSAGE, REVERT_WITHOUT_MESSAGE, PANIC }","title":"Error"},{"location":"mocks/ERC721Receiver/#_retval","text":"bytes4 _retval","title":"_retval"},{"location":"mocks/ERC721Receiver/#_error","text":"enum ERC721ReceiverMock.Error _error","title":"_error"},{"location":"mocks/ERC721Receiver/#received","text":"event Received(address operator, address from, uint256 tokenId, bytes data)","title":"Received"},{"location":"mocks/ERC721Receiver/#constructor","text":"constructor(bytes4 retval, enum ERC721ReceiverMock.Error error) public","title":"constructor"},{"location":"mocks/ERC721Receiver/#onerc721received","text":"function onERC721Received(address operator, address from, uint256 tokenId, bytes data) public returns (bytes4) _Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`._","title":"onERC721Received"},{"location":"mocks/ERC721WarperControllerMock/","text":"ERC721WarperControllerMock _universePremium uint256 _universePremium _listerPremium uint256 _listerPremium setPremiums function setPremiums(uint256 universePremium, uint256 listerPremium) external calculatePremiums function calculatePremiums(struct Assets.Asset, struct Rentings.Params, uint256, uint256) external view returns (uint256, uint256)","title":"ERC721WarperControllerMock"},{"location":"mocks/ERC721WarperControllerMock/#erc721warpercontrollermock","text":"","title":"ERC721WarperControllerMock"},{"location":"mocks/ERC721WarperControllerMock/#_universepremium","text":"uint256 _universePremium","title":"_universePremium"},{"location":"mocks/ERC721WarperControllerMock/#_listerpremium","text":"uint256 _listerPremium","title":"_listerPremium"},{"location":"mocks/ERC721WarperControllerMock/#setpremiums","text":"function setPremiums(uint256 universePremium, uint256 listerPremium) external","title":"setPremiums"},{"location":"mocks/ERC721WarperControllerMock/#calculatepremiums","text":"function calculatePremiums(struct Assets.Asset, struct Rentings.Params, uint256, uint256) external view returns (uint256, uint256)","title":"calculatePremiums"},{"location":"mocks/MetahubV2Mock/","text":"MetahubV2Mock version function version() external pure returns (string)","title":"MetahubV2Mock"},{"location":"mocks/MetahubV2Mock/#metahubv2mock","text":"","title":"MetahubV2Mock"},{"location":"mocks/MetahubV2Mock/#version","text":"function version() external pure returns (string)","title":"version"},{"location":"mocks/SolidityInterfaces/","text":"SolidityInterfaces Interface struct Interface { string name; bytes4 id; } _list struct SolidityInterfaces.Interface[] _list constructor constructor() public list function list() external view returns (struct SolidityInterfaces.Interface[])","title":"SolidityInterfaces"},{"location":"mocks/SolidityInterfaces/#solidityinterfaces","text":"","title":"SolidityInterfaces"},{"location":"mocks/SolidityInterfaces/#interface","text":"struct Interface { string name; bytes4 id; }","title":"Interface"},{"location":"mocks/SolidityInterfaces/#_list","text":"struct SolidityInterfaces.Interface[] _list","title":"_list"},{"location":"mocks/SolidityInterfaces/#constructor","text":"constructor() public","title":"constructor"},{"location":"mocks/SolidityInterfaces/#list","text":"function list() external view returns (struct SolidityInterfaces.Interface[])","title":"list"},{"location":"mocks/WarperExtendingPreset/","text":"WarperExtendingPreset initValue uint8 initValue __initialize function __initialize(bytes config) public virtual Warper generic initialization method. Name Type Description config bytes Warper configuration parameters. _authorizeUpgrade function _authorizeUpgrade(address) internal _msgData function _msgData() internal view virtual returns (bytes) _msgSender function _msgSender() internal view virtual returns (address)","title":"WarperExtendingPreset"},{"location":"mocks/WarperExtendingPreset/#warperextendingpreset","text":"","title":"WarperExtendingPreset"},{"location":"mocks/WarperExtendingPreset/#initvalue","text":"uint8 initValue","title":"initValue"},{"location":"mocks/WarperExtendingPreset/#__initialize","text":"function __initialize(bytes config) public virtual Warper generic initialization method. Name Type Description config bytes Warper configuration parameters.","title":"__initialize"},{"location":"mocks/WarperExtendingPreset/#_authorizeupgrade","text":"function _authorizeUpgrade(address) internal","title":"_authorizeUpgrade"},{"location":"mocks/WarperExtendingPreset/#_msgdata","text":"function _msgData() internal view virtual returns (bytes)","title":"_msgData"},{"location":"mocks/WarperExtendingPreset/#_msgsender","text":"function _msgSender() internal view virtual returns (address)","title":"_msgSender"},{"location":"mocks/WarperPresetMock/","text":"WarperPresetMock _initValue uint256 _initValue _extraValue uint256 _extraValue __initialize function __initialize(bytes config) external Warper generic initialization method. Name Type Description config bytes Warper configuration parameters. setExtraValue function setExtraValue(uint256 value) external extraValue function extraValue() external view returns (uint256) initValue function initValue() external view returns (uint256) __assetClass function __assetClass() external pure returns (bytes4) Returns the warper asset class ID. supportsInterface function supportsInterface(bytes4 interfaceId) public view returns (bool)","title":"WarperPresetMock"},{"location":"mocks/WarperPresetMock/#warperpresetmock","text":"","title":"WarperPresetMock"},{"location":"mocks/WarperPresetMock/#_initvalue","text":"uint256 _initValue","title":"_initValue"},{"location":"mocks/WarperPresetMock/#_extravalue","text":"uint256 _extraValue","title":"_extraValue"},{"location":"mocks/WarperPresetMock/#__initialize","text":"function __initialize(bytes config) external Warper generic initialization method. Name Type Description config bytes Warper configuration parameters.","title":"__initialize"},{"location":"mocks/WarperPresetMock/#setextravalue","text":"function setExtraValue(uint256 value) external","title":"setExtraValue"},{"location":"mocks/WarperPresetMock/#extravalue","text":"function extraValue() external view returns (uint256)","title":"extraValue"},{"location":"mocks/WarperPresetMock/#initvalue","text":"function initValue() external view returns (uint256)","title":"initValue"},{"location":"mocks/WarperPresetMock/#__assetclass","text":"function __assetClass() external pure returns (bytes4) Returns the warper asset class ID.","title":"__assetClass"},{"location":"mocks/WarperPresetMock/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) public view returns (bool)","title":"supportsInterface"},{"location":"mocks/WarperRentalHook/","text":"WarperWithRenting rentalId uint256 rentalId tokenId uint256 tokenId amount uint256 amount rentalAgreement struct Rentings.Agreement rentalAgreement rentalEarnings struct Accounts.RentalEarnings rentalEarnings successState bool successState __initialize function __initialize(address original, address metahub) external virtual setSuccessState function setSuccessState(bool successState_) external __onRent function __onRent(uint256 rentalId_, uint256 tokenId_, uint256 amount_, struct Rentings.Agreement rentalAgreement_, struct Accounts.RentalEarnings rentalEarnings_) external returns (bool success, string errorMessage) supportsInterface function supportsInterface(bytes4 interfaceId) public view returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._","title":"WarperRentalHook"},{"location":"mocks/WarperRentalHook/#warperwithrenting","text":"","title":"WarperWithRenting"},{"location":"mocks/WarperRentalHook/#rentalid","text":"uint256 rentalId","title":"rentalId"},{"location":"mocks/WarperRentalHook/#tokenid","text":"uint256 tokenId","title":"tokenId"},{"location":"mocks/WarperRentalHook/#amount","text":"uint256 amount","title":"amount"},{"location":"mocks/WarperRentalHook/#rentalagreement","text":"struct Rentings.Agreement rentalAgreement","title":"rentalAgreement"},{"location":"mocks/WarperRentalHook/#rentalearnings","text":"struct Accounts.RentalEarnings rentalEarnings","title":"rentalEarnings"},{"location":"mocks/WarperRentalHook/#successstate","text":"bool successState","title":"successState"},{"location":"mocks/WarperRentalHook/#__initialize","text":"function __initialize(address original, address metahub) external virtual","title":"__initialize"},{"location":"mocks/WarperRentalHook/#setsuccessstate","text":"function setSuccessState(bool successState_) external","title":"setSuccessState"},{"location":"mocks/WarperRentalHook/#__onrent","text":"function __onRent(uint256 rentalId_, uint256 tokenId_, uint256 amount_, struct Rentings.Agreement rentalAgreement_, struct Accounts.RentalEarnings rentalEarnings_) external returns (bool success, string errorMessage)","title":"__onRent"},{"location":"mocks/WarperRentalHook/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) public view returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._","title":"supportsInterface"},{"location":"renting/IRentingManager/","text":"IRentingManager CallerIsNotRenter error CallerIsNotRenter() Thrown when the message sender doesn't match the renter address. AssetRented event AssetRented(uint256 rentalId, address renter, uint256 listingId, struct Assets.Asset warpedAsset, uint32 startTime, uint32 endTime) Emitted when the warped asset is rented. Name Type Description rentalId uint256 Rental agreement ID. renter address The renter account address. listingId uint256 The corresponding ID of the original asset listing. warpedAsset struct Assets.Asset Rented warped asset. startTime uint32 The rental agreement staring time. endTime uint32 The rental agreement ending time. collectionRentedValue function collectionRentedValue(bytes32 warpedCollectionId, address renter) external view returns (uint256) Returns token amount from specific collection rented by particular account. Name Type Description warpedCollectionId bytes32 Warped collection ID. renter address The renter account address. Name Type Description [0] uint256 Rented value. assetRentalStatus function assetRentalStatus(struct Assets.AssetId warpedAssetId) external view returns (enum Rentings.RentalStatus) Returns the rental status of a given warped asset. Name Type Description warpedAssetId struct Assets.AssetId Warped asset ID. Name Type Description [0] enum Rentings.RentalStatus The asset rental status. estimateRent function estimateRent(struct Rentings.Params rentingParams) external view returns (struct Rentings.RentalFees) Evaluates renting params and returns rental fee breakdown. Name Type Description rentingParams struct Rentings.Params Renting parameters. Name Type Description [0] struct Rentings.RentalFees Rental fee breakdown. rent function rent(struct Rentings.Params rentingParams, uint256 maxPaymentAmount) external returns (uint256) Performs renting operation. Name Type Description rentingParams struct Rentings.Params Renting parameters. maxPaymentAmount uint256 Maximal payment amount the renter is willing to pay. Name Type Description [0] uint256 New rental ID. rentalAgreementInfo function rentalAgreementInfo(uint256 rentalId) external view returns (struct Rentings.Agreement) Returns the rental agreement details. Name Type Description rentalId uint256 Rental agreement ID. Name Type Description [0] struct Rentings.Agreement Rental agreement details. userRentalCount function userRentalCount(address renter) external view returns (uint256) Returns the number of currently registered rental agreements for particular renter account. Name Type Description renter address Renter address. Name Type Description [0] uint256 Rental agreement count. userRentalAgreements function userRentalAgreements(address renter, uint256 offset, uint256 limit) external view returns (uint256[], struct Rentings.Agreement[]) Returns the paginated list of currently registered rental agreements for particular renter account. Name Type Description renter address Renter address. offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] uint256[] Rental agreement IDs. [1] struct Rentings.Agreement[] Rental agreements.","title":"IRentingManager"},{"location":"renting/IRentingManager/#irentingmanager","text":"","title":"IRentingManager"},{"location":"renting/IRentingManager/#callerisnotrenter","text":"error CallerIsNotRenter() Thrown when the message sender doesn't match the renter address.","title":"CallerIsNotRenter"},{"location":"renting/IRentingManager/#assetrented","text":"event AssetRented(uint256 rentalId, address renter, uint256 listingId, struct Assets.Asset warpedAsset, uint32 startTime, uint32 endTime) Emitted when the warped asset is rented. Name Type Description rentalId uint256 Rental agreement ID. renter address The renter account address. listingId uint256 The corresponding ID of the original asset listing. warpedAsset struct Assets.Asset Rented warped asset. startTime uint32 The rental agreement staring time. endTime uint32 The rental agreement ending time.","title":"AssetRented"},{"location":"renting/IRentingManager/#collectionrentedvalue","text":"function collectionRentedValue(bytes32 warpedCollectionId, address renter) external view returns (uint256) Returns token amount from specific collection rented by particular account. Name Type Description warpedCollectionId bytes32 Warped collection ID. renter address The renter account address. Name Type Description [0] uint256 Rented value.","title":"collectionRentedValue"},{"location":"renting/IRentingManager/#assetrentalstatus","text":"function assetRentalStatus(struct Assets.AssetId warpedAssetId) external view returns (enum Rentings.RentalStatus) Returns the rental status of a given warped asset. Name Type Description warpedAssetId struct Assets.AssetId Warped asset ID. Name Type Description [0] enum Rentings.RentalStatus The asset rental status.","title":"assetRentalStatus"},{"location":"renting/IRentingManager/#estimaterent","text":"function estimateRent(struct Rentings.Params rentingParams) external view returns (struct Rentings.RentalFees) Evaluates renting params and returns rental fee breakdown. Name Type Description rentingParams struct Rentings.Params Renting parameters. Name Type Description [0] struct Rentings.RentalFees Rental fee breakdown.","title":"estimateRent"},{"location":"renting/IRentingManager/#rent","text":"function rent(struct Rentings.Params rentingParams, uint256 maxPaymentAmount) external returns (uint256) Performs renting operation. Name Type Description rentingParams struct Rentings.Params Renting parameters. maxPaymentAmount uint256 Maximal payment amount the renter is willing to pay. Name Type Description [0] uint256 New rental ID.","title":"rent"},{"location":"renting/IRentingManager/#rentalagreementinfo","text":"function rentalAgreementInfo(uint256 rentalId) external view returns (struct Rentings.Agreement) Returns the rental agreement details. Name Type Description rentalId uint256 Rental agreement ID. Name Type Description [0] struct Rentings.Agreement Rental agreement details.","title":"rentalAgreementInfo"},{"location":"renting/IRentingManager/#userrentalcount","text":"function userRentalCount(address renter) external view returns (uint256) Returns the number of currently registered rental agreements for particular renter account. Name Type Description renter address Renter address. Name Type Description [0] uint256 Rental agreement count.","title":"userRentalCount"},{"location":"renting/IRentingManager/#userrentalagreements","text":"function userRentalAgreements(address renter, uint256 offset, uint256 limit) external view returns (uint256[], struct Rentings.Agreement[]) Returns the paginated list of currently registered rental agreements for particular renter account. Name Type Description renter address Renter address. offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] uint256[] Rental agreement IDs. [1] struct Rentings.Agreement[] Rental agreements.","title":"userRentalAgreements"},{"location":"renting/Rentings/","text":"Rentings HUNDRED_PERCENT uint16 HUNDRED_PERCENT A constant that represents one hundred percent for calculation. This defines a calculation precision for percentage values as two decimals. For example: 1 is 0.01%, 100 is 1%, 10_000 is 100%. RentalAgreementConflict error RentalAgreementConflict(uint256 conflictingRentalId) Thrown when a rental agreement is being registered for a specific warper ID, while the previous rental agreement for this warper is still effective. CannotDeleteEffectiveRentalAgreement error CannotDeleteEffectiveRentalAgreement(uint256 rentalId) Thrown when attempting to delete effective rental agreement data (before expiration). RentalStatus enum RentalStatus { NONE, AVAILABLE, RENTED } _GC_CYCLES uint256 _GC_CYCLES Defines the maximal allowed number of cycles when looking for expired rental agreements. RentalFees struct RentalFees { uint256 total; uint256 protocolFee; uint256 listerBaseFee; uint256 listerPremium; uint256 universeBaseFee; uint256 universePremium; } Params struct Params { uint256 listingId; address warper; address renter; uint32 rentalPeriod; address paymentToken; } Agreement struct Agreement { struct Assets.Asset warpedAsset; bytes32 collectionId; uint256 listingId; address renter; uint32 startTime; uint32 endTime; struct Listings.Params listingParams; } isEffective function isEffective(struct Rentings.Agreement self) internal view returns (bool) duration function duration(struct Rentings.Agreement self) internal pure returns (uint32) RenterInfo struct RenterInfo { struct EnumerableSetUpgradeable.UintSet rentalIndex; mapping(bytes32 &#x3D;&gt; struct EnumerableSetUpgradeable.UintSet) collectionRentalIndex; } AssetInfo struct AssetInfo { uint256 latestRentalId; } Registry struct Registry { struct CountersUpgradeable.Counter idTracker; mapping(uint256 &#x3D;&gt; struct Rentings.Agreement) agreements; mapping(address &#x3D;&gt; struct Rentings.RenterInfo) renters; mapping(bytes32 &#x3D;&gt; struct Rentings.AssetInfo) assets; } userRentalCount function userRentalCount(struct Rentings.Registry self, address renter) internal view returns (uint256) Returns the number of currently registered rental agreements for particular renter account. userRentalAgreements function userRentalAgreements(struct Rentings.Registry self, address renter, uint256 offset, uint256 limit) external view returns (uint256[], struct Rentings.Agreement[]) Returns the paginated list of currently registered rental agreements for particular renter account. deleteExpiredUserRentalAgreements function deleteExpiredUserRentalAgreements(struct Rentings.Registry self, address renter, bytes32 collectionId, uint256 toBeRemoved) external Finds expired user rental agreements associated with `collectionId` and deletes them. Deletes only first N entries defined by `toBeRemoved` param. The total number of cycles is capped by GC_CYCLES constant. register function register(struct Rentings.Registry self, struct Rentings.Agreement agreement) external returns (uint256 rentalId) Performs new rental agreement registration. removeExpiredRentalAgreement function removeExpiredRentalAgreement(struct Rentings.Registry self, uint256 rentalId) external Safely removes expired rental data from the registry. _removeRentalAgreement function _removeRentalAgreement(struct Rentings.Registry self, uint256 rentalId) private Removes rental data from the registry. collectionRentedValue function collectionRentedValue(struct Rentings.Registry self, address renter, bytes32 collectionId) external view returns (uint256 value) Finds all effective rental agreements from specific collection. Returns the total value rented by `renter`. assetRentalStatus function assetRentalStatus(struct Rentings.Registry self, struct Assets.AssetId assetId) external view returns (enum Rentings.RentalStatus) Returns asset rental status based on latest rental agreement. validateRentingParams function validateRentingParams(struct Rentings.Params params, struct Protocol.Config protocolConfig, struct Listings.Registry listingRegistry, contract IWarperManager warperManager) external view Main renting request validation function. calculateRentalFees function calculateRentalFees(struct Rentings.Params rentingParams, struct Protocol.Config protocolConfig, struct Listings.Registry listingRegistry, contract IWarperManager warperManager, contract IUniverseRegistry universeRegistry) external view returns (struct Rentings.RentalFees fees) Performs rental fee calculation and returns the fee breakdown.","title":"Rentings"},{"location":"renting/Rentings/#rentings","text":"","title":"Rentings"},{"location":"renting/Rentings/#hundred_percent","text":"uint16 HUNDRED_PERCENT A constant that represents one hundred percent for calculation. This defines a calculation precision for percentage values as two decimals. For example: 1 is 0.01%, 100 is 1%, 10_000 is 100%.","title":"HUNDRED_PERCENT"},{"location":"renting/Rentings/#rentalagreementconflict","text":"error RentalAgreementConflict(uint256 conflictingRentalId) Thrown when a rental agreement is being registered for a specific warper ID, while the previous rental agreement for this warper is still effective.","title":"RentalAgreementConflict"},{"location":"renting/Rentings/#cannotdeleteeffectiverentalagreement","text":"error CannotDeleteEffectiveRentalAgreement(uint256 rentalId) Thrown when attempting to delete effective rental agreement data (before expiration).","title":"CannotDeleteEffectiveRentalAgreement"},{"location":"renting/Rentings/#rentalstatus","text":"enum RentalStatus { NONE, AVAILABLE, RENTED }","title":"RentalStatus"},{"location":"renting/Rentings/#_gc_cycles","text":"uint256 _GC_CYCLES Defines the maximal allowed number of cycles when looking for expired rental agreements.","title":"_GC_CYCLES"},{"location":"renting/Rentings/#rentalfees","text":"struct RentalFees { uint256 total; uint256 protocolFee; uint256 listerBaseFee; uint256 listerPremium; uint256 universeBaseFee; uint256 universePremium; }","title":"RentalFees"},{"location":"renting/Rentings/#params","text":"struct Params { uint256 listingId; address warper; address renter; uint32 rentalPeriod; address paymentToken; }","title":"Params"},{"location":"renting/Rentings/#agreement","text":"struct Agreement { struct Assets.Asset warpedAsset; bytes32 collectionId; uint256 listingId; address renter; uint32 startTime; uint32 endTime; struct Listings.Params listingParams; }","title":"Agreement"},{"location":"renting/Rentings/#iseffective","text":"function isEffective(struct Rentings.Agreement self) internal view returns (bool)","title":"isEffective"},{"location":"renting/Rentings/#duration","text":"function duration(struct Rentings.Agreement self) internal pure returns (uint32)","title":"duration"},{"location":"renting/Rentings/#renterinfo","text":"struct RenterInfo { struct EnumerableSetUpgradeable.UintSet rentalIndex; mapping(bytes32 &#x3D;&gt; struct EnumerableSetUpgradeable.UintSet) collectionRentalIndex; }","title":"RenterInfo"},{"location":"renting/Rentings/#assetinfo","text":"struct AssetInfo { uint256 latestRentalId; }","title":"AssetInfo"},{"location":"renting/Rentings/#registry","text":"struct Registry { struct CountersUpgradeable.Counter idTracker; mapping(uint256 &#x3D;&gt; struct Rentings.Agreement) agreements; mapping(address &#x3D;&gt; struct Rentings.RenterInfo) renters; mapping(bytes32 &#x3D;&gt; struct Rentings.AssetInfo) assets; }","title":"Registry"},{"location":"renting/Rentings/#userrentalcount","text":"function userRentalCount(struct Rentings.Registry self, address renter) internal view returns (uint256) Returns the number of currently registered rental agreements for particular renter account.","title":"userRentalCount"},{"location":"renting/Rentings/#userrentalagreements","text":"function userRentalAgreements(struct Rentings.Registry self, address renter, uint256 offset, uint256 limit) external view returns (uint256[], struct Rentings.Agreement[]) Returns the paginated list of currently registered rental agreements for particular renter account.","title":"userRentalAgreements"},{"location":"renting/Rentings/#deleteexpireduserrentalagreements","text":"function deleteExpiredUserRentalAgreements(struct Rentings.Registry self, address renter, bytes32 collectionId, uint256 toBeRemoved) external Finds expired user rental agreements associated with `collectionId` and deletes them. Deletes only first N entries defined by `toBeRemoved` param. The total number of cycles is capped by GC_CYCLES constant.","title":"deleteExpiredUserRentalAgreements"},{"location":"renting/Rentings/#register","text":"function register(struct Rentings.Registry self, struct Rentings.Agreement agreement) external returns (uint256 rentalId) Performs new rental agreement registration.","title":"register"},{"location":"renting/Rentings/#removeexpiredrentalagreement","text":"function removeExpiredRentalAgreement(struct Rentings.Registry self, uint256 rentalId) external Safely removes expired rental data from the registry.","title":"removeExpiredRentalAgreement"},{"location":"renting/Rentings/#_removerentalagreement","text":"function _removeRentalAgreement(struct Rentings.Registry self, uint256 rentalId) private Removes rental data from the registry.","title":"_removeRentalAgreement"},{"location":"renting/Rentings/#collectionrentedvalue","text":"function collectionRentedValue(struct Rentings.Registry self, address renter, bytes32 collectionId) external view returns (uint256 value) Finds all effective rental agreements from specific collection. Returns the total value rented by `renter`.","title":"collectionRentedValue"},{"location":"renting/Rentings/#assetrentalstatus","text":"function assetRentalStatus(struct Rentings.Registry self, struct Assets.AssetId assetId) external view returns (enum Rentings.RentalStatus) Returns asset rental status based on latest rental agreement.","title":"assetRentalStatus"},{"location":"renting/Rentings/#validaterentingparams","text":"function validateRentingParams(struct Rentings.Params params, struct Protocol.Config protocolConfig, struct Listings.Registry listingRegistry, contract IWarperManager warperManager) external view Main renting request validation function.","title":"validateRentingParams"},{"location":"renting/Rentings/#calculaterentalfees","text":"function calculateRentalFees(struct Rentings.Params rentingParams, struct Protocol.Config protocolConfig, struct Listings.Registry listingRegistry, contract IWarperManager warperManager, contract IUniverseRegistry universeRegistry) external view returns (struct Rentings.RentalFees fees) Performs rental fee calculation and returns the fee breakdown.","title":"calculateRentalFees"},{"location":"universe/IUniverseRegistry/","text":"IUniverseRegistry AccountIsNotUniverseOwner error AccountIsNotUniverseOwner(address account) Thrown when a check is made where the given account must also be the universe owner. EmptyUniverseName error EmptyUniverseName() Thrown when a the supplied universe name is empty. QueryForNonexistentUniverse error QueryForNonexistentUniverse(uint256 universeId) Thrown when trying to read universe data for a universe is not registered. UniverseCreated event UniverseCreated(uint256 universeId, string name) Emitted when a universe is created. Name Type Description universeId uint256 Universe ID. name string Universe name. UniverseNameChanged event UniverseNameChanged(uint256 universeId, string name) Emitted when a universe name is changed. Name Type Description universeId uint256 Universe ID. name string The newly set name. UniverseRentalFeeChanged event UniverseRentalFeeChanged(uint256 universeId, uint16 rentalFeePercent) Emitted when universe rental fee is changed. Name Type Description universeId uint256 Universe ID. rentalFeePercent uint16 The newly rental fee. setUniverseTokenBaseURI function setUniverseTokenBaseURI(string baseURI) external Updates the universe token base URI. Name Type Description baseURI string New base URI. Must include a trailing slash (\"/\"). UniverseParams struct UniverseParams { string name; uint16 rentalFeePercent; } createUniverse function createUniverse(struct IUniverseRegistry.UniverseParams params) external returns (uint256) Creates new Universe. This includes minting new universe NFT, where the caller of this method becomes the universe owner. Name Type Description params struct IUniverseRegistry.UniverseParams The universe properties & initial configuration params. Name Type Description [0] uint256 Universe ID (universe token ID). setUniverseName function setUniverseName(uint256 universeId, string universeName) external Update the universe name. Name Type Description universeId uint256 The unique identifier for the universe. universeName string The universe name to set. setUniverseRentalFeePercent function setUniverseRentalFeePercent(uint256 universeId, uint16 rentalFeePercent) external Update the universe rental fee percent. Name Type Description universeId uint256 The unique identifier for the universe. rentalFeePercent uint16 The universe rental fee percent. universeOwner function universeOwner(uint256 universeId) external view returns (address) Returns Universe owner address. Name Type Description universeId uint256 Universe ID. Name Type Description [0] address Universe owner. universeRentalFeePercent function universeRentalFeePercent(uint256 universeId) external view returns (uint16) Returns Universe rental fee percent. Name Type Description universeId uint256 Universe ID. Name Type Description [0] uint16 universe fee percent. universeName function universeName(uint256 universeId) external view returns (string) Returns name. Name Type Description universeId uint256 Universe ID. Name Type Description [0] string universe name. universeToken function universeToken() external view returns (address) Returns the Universe token address. universeTokenBaseURI function universeTokenBaseURI() external view returns (string) Returns the Universe token base URI. universe function universe(uint256 universeId) external view returns (string name, uint16 rentalFeePercent) Aggregate and return Universe data. Name Type Description universeId uint256 Universe-specific ID. Name Type Description name string The name of the universe. rentalFeePercent uint16 The base percentage of the rental fee which the universe charges for using its warpers. checkUniverseOwner function checkUniverseOwner(uint256 universeId, address account) external view Reverts if the universe owner is not the provided account address. Name Type Description universeId uint256 Universe ID. account address The address of the expected owner. isUniverseOwner function isUniverseOwner(uint256 universeId, address account) external view returns (bool) Returns `true` if the universe owner is the supplied account address. Name Type Description universeId uint256 Universe ID. account address The address of the expected owner.","title":"IUniverseRegistry"},{"location":"universe/IUniverseRegistry/#iuniverseregistry","text":"","title":"IUniverseRegistry"},{"location":"universe/IUniverseRegistry/#accountisnotuniverseowner","text":"error AccountIsNotUniverseOwner(address account) Thrown when a check is made where the given account must also be the universe owner.","title":"AccountIsNotUniverseOwner"},{"location":"universe/IUniverseRegistry/#emptyuniversename","text":"error EmptyUniverseName() Thrown when a the supplied universe name is empty.","title":"EmptyUniverseName"},{"location":"universe/IUniverseRegistry/#queryfornonexistentuniverse","text":"error QueryForNonexistentUniverse(uint256 universeId) Thrown when trying to read universe data for a universe is not registered.","title":"QueryForNonexistentUniverse"},{"location":"universe/IUniverseRegistry/#universecreated","text":"event UniverseCreated(uint256 universeId, string name) Emitted when a universe is created. Name Type Description universeId uint256 Universe ID. name string Universe name.","title":"UniverseCreated"},{"location":"universe/IUniverseRegistry/#universenamechanged","text":"event UniverseNameChanged(uint256 universeId, string name) Emitted when a universe name is changed. Name Type Description universeId uint256 Universe ID. name string The newly set name.","title":"UniverseNameChanged"},{"location":"universe/IUniverseRegistry/#universerentalfeechanged","text":"event UniverseRentalFeeChanged(uint256 universeId, uint16 rentalFeePercent) Emitted when universe rental fee is changed. Name Type Description universeId uint256 Universe ID. rentalFeePercent uint16 The newly rental fee.","title":"UniverseRentalFeeChanged"},{"location":"universe/IUniverseRegistry/#setuniversetokenbaseuri","text":"function setUniverseTokenBaseURI(string baseURI) external Updates the universe token base URI. Name Type Description baseURI string New base URI. Must include a trailing slash (\"/\").","title":"setUniverseTokenBaseURI"},{"location":"universe/IUniverseRegistry/#universeparams","text":"struct UniverseParams { string name; uint16 rentalFeePercent; }","title":"UniverseParams"},{"location":"universe/IUniverseRegistry/#createuniverse","text":"function createUniverse(struct IUniverseRegistry.UniverseParams params) external returns (uint256) Creates new Universe. This includes minting new universe NFT, where the caller of this method becomes the universe owner. Name Type Description params struct IUniverseRegistry.UniverseParams The universe properties & initial configuration params. Name Type Description [0] uint256 Universe ID (universe token ID).","title":"createUniverse"},{"location":"universe/IUniverseRegistry/#setuniversename","text":"function setUniverseName(uint256 universeId, string universeName) external Update the universe name. Name Type Description universeId uint256 The unique identifier for the universe. universeName string The universe name to set.","title":"setUniverseName"},{"location":"universe/IUniverseRegistry/#setuniverserentalfeepercent","text":"function setUniverseRentalFeePercent(uint256 universeId, uint16 rentalFeePercent) external Update the universe rental fee percent. Name Type Description universeId uint256 The unique identifier for the universe. rentalFeePercent uint16 The universe rental fee percent.","title":"setUniverseRentalFeePercent"},{"location":"universe/IUniverseRegistry/#universeowner","text":"function universeOwner(uint256 universeId) external view returns (address) Returns Universe owner address. Name Type Description universeId uint256 Universe ID. Name Type Description [0] address Universe owner.","title":"universeOwner"},{"location":"universe/IUniverseRegistry/#universerentalfeepercent","text":"function universeRentalFeePercent(uint256 universeId) external view returns (uint16) Returns Universe rental fee percent. Name Type Description universeId uint256 Universe ID. Name Type Description [0] uint16 universe fee percent.","title":"universeRentalFeePercent"},{"location":"universe/IUniverseRegistry/#universename","text":"function universeName(uint256 universeId) external view returns (string) Returns name. Name Type Description universeId uint256 Universe ID. Name Type Description [0] string universe name.","title":"universeName"},{"location":"universe/IUniverseRegistry/#universetoken","text":"function universeToken() external view returns (address) Returns the Universe token address.","title":"universeToken"},{"location":"universe/IUniverseRegistry/#universetokenbaseuri","text":"function universeTokenBaseURI() external view returns (string) Returns the Universe token base URI.","title":"universeTokenBaseURI"},{"location":"universe/IUniverseRegistry/#universe","text":"function universe(uint256 universeId) external view returns (string name, uint16 rentalFeePercent) Aggregate and return Universe data. Name Type Description universeId uint256 Universe-specific ID. Name Type Description name string The name of the universe. rentalFeePercent uint16 The base percentage of the rental fee which the universe charges for using its warpers.","title":"universe"},{"location":"universe/IUniverseRegistry/#checkuniverseowner","text":"function checkUniverseOwner(uint256 universeId, address account) external view Reverts if the universe owner is not the provided account address. Name Type Description universeId uint256 Universe ID. account address The address of the expected owner.","title":"checkUniverseOwner"},{"location":"universe/IUniverseRegistry/#isuniverseowner","text":"function isUniverseOwner(uint256 universeId, address account) external view returns (bool) Returns `true` if the universe owner is the supplied account address. Name Type Description universeId uint256 Universe ID. account address The address of the expected owner.","title":"isUniverseOwner"},{"location":"universe/IUniverseToken/","text":"IUniverseToken mint function mint(address to) external returns (uint256) Mints new token and transfers it to `to` address. Name Type Description to address Universe owner address. Name Type Description [0] uint256 Minted token ID. currentId function currentId() external view returns (uint256) Returns current token ID.","title":"IUniverseToken"},{"location":"universe/IUniverseToken/#iuniversetoken","text":"","title":"IUniverseToken"},{"location":"universe/IUniverseToken/#mint","text":"function mint(address to) external returns (uint256) Mints new token and transfers it to `to` address. Name Type Description to address Universe owner address. Name Type Description [0] uint256 Minted token ID.","title":"mint"},{"location":"universe/IUniverseToken/#currentid","text":"function currentId() external view returns (uint256) Returns current token ID.","title":"currentId"},{"location":"universe/UniverseRegistry/","text":"UniverseRegistry onlyUniverseOwner modifier onlyUniverseOwner(uint256 universeId) Modifier to make a function callable only by the universe owner. onlyValidUniverseName modifier onlyValidUniverseName(string universeNameToCheck) Modifier to check if the universe name is valid. onlyRegisteredUniverse modifier onlyRegisteredUniverse(uint256 universeId) Modifier to check that the universe has been registered. constructor constructor() public Constructor that gets called for the implementation contract. initialize function initialize(address acl) external UniverseRegistry initializer. Name Type Description acl address Address of the ACL contract. setUniverseTokenBaseURI function setUniverseTokenBaseURI(string baseURI) external Updates the universe token base URI. Name Type Description baseURI string New base URI. Must include a trailing slash (\"/\"). createUniverse function createUniverse(struct IUniverseRegistry.UniverseParams params) external returns (uint256) Creates new Universe. This includes minting new universe NFT, where the caller of this method becomes the universe owner. Name Type Description params struct IUniverseRegistry.UniverseParams The universe properties & initial configuration params. Name Type Description [0] uint256 Universe ID (universe token ID). setUniverseName function setUniverseName(uint256 universeId, string name) external Update the universe name. Name Type Description universeId uint256 The unique identifier for the universe. name string setUniverseRentalFeePercent function setUniverseRentalFeePercent(uint256 universeId, uint16 rentalFeePercent) external Update the universe rental fee percent. Name Type Description universeId uint256 The unique identifier for the universe. rentalFeePercent uint16 The universe rental fee percent. universe function universe(uint256 universeId) external view returns (string name, uint16 rentalFeePercent) Aggregate and return Universe data. Name Type Description universeId uint256 Universe-specific ID. Name Type Description name string The name of the universe. rentalFeePercent uint16 The base percentage of the rental fee which the universe charges for using its warpers. universeToken function universeToken() external view returns (address) Returns the Universe token address. universeTokenBaseURI function universeTokenBaseURI() external view returns (string) Returns the Universe token base URI. universeRentalFeePercent function universeRentalFeePercent(uint256 universeId) external view returns (uint16 rentalFeePercent) Returns Universe rental fee percent. Name Type Description universeId uint256 Universe ID. Name Type Description rentalFeePercent uint16 universe fee percent. universeName function universeName(uint256 universeId) external view returns (string) Returns name. Name Type Description universeId uint256 Universe ID. Name Type Description [0] string universe name. checkUniverseOwner function checkUniverseOwner(uint256 universeId, address account) external view Reverts if the universe owner is not the provided account address. Name Type Description universeId uint256 Universe ID. account address The address of the expected owner. universeOwner function universeOwner(uint256 universeId) external view returns (address) Returns Universe owner address. Name Type Description universeId uint256 Universe ID. Name Type Description [0] address Universe owner. isUniverseOwner function isUniverseOwner(uint256 universeId, address account) external view returns (bool) Returns `true` if the universe owner is the supplied account address. Name Type Description universeId uint256 Universe ID. account address The address of the expected owner. _authorizeUpgrade function _authorizeUpgrade(address newImplementation) internal _Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by {upgradeTo} and {upgradeToAndCall}. Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}. ```solidity function authorizeUpgrade(address) internal override onlyOwner {} ``` _acl function _acl() internal view returns (contract IACL) return the IACL address _checkUniverseOwner function _checkUniverseOwner(uint256 universeId, address account) internal view Revert if the passed account is not the owner of the universe. _checkUniverseRegistered function _checkUniverseRegistered(uint256 universeId) internal view Revert if the universe has been registered properly. _isValidUniverseName function _isValidUniverseName(uint256 universeId) internal view returns (bool) Return `true` if the universe name is valid. _isUniverseOwner function _isUniverseOwner(uint256 universeId, address account) internal view returns (bool) Return `true` if the account is the owner of the universe.","title":"UniverseRegistry"},{"location":"universe/UniverseRegistry/#universeregistry","text":"","title":"UniverseRegistry"},{"location":"universe/UniverseRegistry/#onlyuniverseowner","text":"modifier onlyUniverseOwner(uint256 universeId) Modifier to make a function callable only by the universe owner.","title":"onlyUniverseOwner"},{"location":"universe/UniverseRegistry/#onlyvaliduniversename","text":"modifier onlyValidUniverseName(string universeNameToCheck) Modifier to check if the universe name is valid.","title":"onlyValidUniverseName"},{"location":"universe/UniverseRegistry/#onlyregistereduniverse","text":"modifier onlyRegisteredUniverse(uint256 universeId) Modifier to check that the universe has been registered.","title":"onlyRegisteredUniverse"},{"location":"universe/UniverseRegistry/#constructor","text":"constructor() public Constructor that gets called for the implementation contract.","title":"constructor"},{"location":"universe/UniverseRegistry/#initialize","text":"function initialize(address acl) external UniverseRegistry initializer. Name Type Description acl address Address of the ACL contract.","title":"initialize"},{"location":"universe/UniverseRegistry/#setuniversetokenbaseuri","text":"function setUniverseTokenBaseURI(string baseURI) external Updates the universe token base URI. Name Type Description baseURI string New base URI. Must include a trailing slash (\"/\").","title":"setUniverseTokenBaseURI"},{"location":"universe/UniverseRegistry/#createuniverse","text":"function createUniverse(struct IUniverseRegistry.UniverseParams params) external returns (uint256) Creates new Universe. This includes minting new universe NFT, where the caller of this method becomes the universe owner. Name Type Description params struct IUniverseRegistry.UniverseParams The universe properties & initial configuration params. Name Type Description [0] uint256 Universe ID (universe token ID).","title":"createUniverse"},{"location":"universe/UniverseRegistry/#setuniversename","text":"function setUniverseName(uint256 universeId, string name) external Update the universe name. Name Type Description universeId uint256 The unique identifier for the universe. name string","title":"setUniverseName"},{"location":"universe/UniverseRegistry/#setuniverserentalfeepercent","text":"function setUniverseRentalFeePercent(uint256 universeId, uint16 rentalFeePercent) external Update the universe rental fee percent. Name Type Description universeId uint256 The unique identifier for the universe. rentalFeePercent uint16 The universe rental fee percent.","title":"setUniverseRentalFeePercent"},{"location":"universe/UniverseRegistry/#universe","text":"function universe(uint256 universeId) external view returns (string name, uint16 rentalFeePercent) Aggregate and return Universe data. Name Type Description universeId uint256 Universe-specific ID. Name Type Description name string The name of the universe. rentalFeePercent uint16 The base percentage of the rental fee which the universe charges for using its warpers.","title":"universe"},{"location":"universe/UniverseRegistry/#universetoken","text":"function universeToken() external view returns (address) Returns the Universe token address.","title":"universeToken"},{"location":"universe/UniverseRegistry/#universetokenbaseuri","text":"function universeTokenBaseURI() external view returns (string) Returns the Universe token base URI.","title":"universeTokenBaseURI"},{"location":"universe/UniverseRegistry/#universerentalfeepercent","text":"function universeRentalFeePercent(uint256 universeId) external view returns (uint16 rentalFeePercent) Returns Universe rental fee percent. Name Type Description universeId uint256 Universe ID. Name Type Description rentalFeePercent uint16 universe fee percent.","title":"universeRentalFeePercent"},{"location":"universe/UniverseRegistry/#universename","text":"function universeName(uint256 universeId) external view returns (string) Returns name. Name Type Description universeId uint256 Universe ID. Name Type Description [0] string universe name.","title":"universeName"},{"location":"universe/UniverseRegistry/#checkuniverseowner","text":"function checkUniverseOwner(uint256 universeId, address account) external view Reverts if the universe owner is not the provided account address. Name Type Description universeId uint256 Universe ID. account address The address of the expected owner.","title":"checkUniverseOwner"},{"location":"universe/UniverseRegistry/#universeowner","text":"function universeOwner(uint256 universeId) external view returns (address) Returns Universe owner address. Name Type Description universeId uint256 Universe ID. Name Type Description [0] address Universe owner.","title":"universeOwner"},{"location":"universe/UniverseRegistry/#isuniverseowner","text":"function isUniverseOwner(uint256 universeId, address account) external view returns (bool) Returns `true` if the universe owner is the supplied account address. Name Type Description universeId uint256 Universe ID. account address The address of the expected owner.","title":"isUniverseOwner"},{"location":"universe/UniverseRegistry/#_authorizeupgrade","text":"function _authorizeUpgrade(address newImplementation) internal _Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by {upgradeTo} and {upgradeToAndCall}. Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}. ```solidity function authorizeUpgrade(address) internal override onlyOwner {} ```","title":"_authorizeUpgrade"},{"location":"universe/UniverseRegistry/#_acl","text":"function _acl() internal view returns (contract IACL) return the IACL address","title":"_acl"},{"location":"universe/UniverseRegistry/#_checkuniverseowner","text":"function _checkUniverseOwner(uint256 universeId, address account) internal view Revert if the passed account is not the owner of the universe.","title":"_checkUniverseOwner"},{"location":"universe/UniverseRegistry/#_checkuniverseregistered","text":"function _checkUniverseRegistered(uint256 universeId) internal view Revert if the universe has been registered properly.","title":"_checkUniverseRegistered"},{"location":"universe/UniverseRegistry/#_isvaliduniversename","text":"function _isValidUniverseName(uint256 universeId) internal view returns (bool) Return `true` if the universe name is valid.","title":"_isValidUniverseName"},{"location":"universe/UniverseRegistry/#_isuniverseowner","text":"function _isUniverseOwner(uint256 universeId, address account) internal view returns (bool) Return `true` if the account is the owner of the universe.","title":"_isUniverseOwner"},{"location":"universe/UniverseRegistryStorage/","text":"UniverseRegistryStorage Universe struct Universe { string name; uint16 rentalFeePercent; } _aclContract contract IACL _aclContract ACL contract address. _universeToken contract IUniverseToken _universeToken Universe token address. _baseURI string _baseURI Universe token base URI. _universes mapping(uint256 &#x3D;&gt; struct UniverseRegistryStorage.Universe) _universes Mapping from token ID to the Universe structure.","title":"UniverseRegistryStorage"},{"location":"universe/UniverseRegistryStorage/#universeregistrystorage","text":"","title":"UniverseRegistryStorage"},{"location":"universe/UniverseRegistryStorage/#universe","text":"struct Universe { string name; uint16 rentalFeePercent; }","title":"Universe"},{"location":"universe/UniverseRegistryStorage/#_aclcontract","text":"contract IACL _aclContract ACL contract address.","title":"_aclContract"},{"location":"universe/UniverseRegistryStorage/#_universetoken","text":"contract IUniverseToken _universeToken Universe token address.","title":"_universeToken"},{"location":"universe/UniverseRegistryStorage/#_baseuri","text":"string _baseURI Universe token base URI.","title":"_baseURI"},{"location":"universe/UniverseRegistryStorage/#_universes","text":"mapping(uint256 &#x3D;&gt; struct UniverseRegistryStorage.Universe) _universes Mapping from token ID to the Universe structure.","title":"_universes"},{"location":"universe/UniverseToken/","text":"UniverseToken CallerIsNotRegistry error CallerIsNotRegistry() Thrown when the message sender doesn't match the registries address. _registry contract IUniverseRegistry _registry Registry. _tokenIdTracker struct Counters.Counter _tokenIdTracker Token ID counter. onlyRegistry modifier onlyRegistry() Modifier to make a function callable only by the registry contract. constructor constructor(contract IUniverseRegistry registry) public UniverseToken constructor. Name Type Description registry contract IUniverseRegistry Universe registry. mint function mint(address to) external returns (uint256 tokenId) Mints new token and transfers it to `to` address. Name Type Description to address Universe owner address. Name Type Description tokenId uint256 Minted token ID. currentId function currentId() external view returns (uint256) Returns current token ID. supportsInterface function supportsInterface(bytes4 interfaceId) public view returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._ _baseURI function _baseURI() internal view returns (string) Base URI for computing {tokenURI}. If set, the resulting URI for each token will be the concatenation of the `baseURI` and the `tokenId`. Empty by default, can be overridden in child contracts.","title":"UniverseToken"},{"location":"universe/UniverseToken/#universetoken","text":"","title":"UniverseToken"},{"location":"universe/UniverseToken/#callerisnotregistry","text":"error CallerIsNotRegistry() Thrown when the message sender doesn't match the registries address.","title":"CallerIsNotRegistry"},{"location":"universe/UniverseToken/#_registry","text":"contract IUniverseRegistry _registry Registry.","title":"_registry"},{"location":"universe/UniverseToken/#_tokenidtracker","text":"struct Counters.Counter _tokenIdTracker Token ID counter.","title":"_tokenIdTracker"},{"location":"universe/UniverseToken/#onlyregistry","text":"modifier onlyRegistry() Modifier to make a function callable only by the registry contract.","title":"onlyRegistry"},{"location":"universe/UniverseToken/#constructor","text":"constructor(contract IUniverseRegistry registry) public UniverseToken constructor. Name Type Description registry contract IUniverseRegistry Universe registry.","title":"constructor"},{"location":"universe/UniverseToken/#mint","text":"function mint(address to) external returns (uint256 tokenId) Mints new token and transfers it to `to` address. Name Type Description to address Universe owner address. Name Type Description tokenId uint256 Minted token ID.","title":"mint"},{"location":"universe/UniverseToken/#currentid","text":"function currentId() external view returns (uint256) Returns current token ID.","title":"currentId"},{"location":"universe/UniverseToken/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) public view returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._","title":"supportsInterface"},{"location":"universe/UniverseToken/#_baseuri","text":"function _baseURI() internal view returns (string) Base URI for computing {tokenURI}. If set, the resulting URI for each token will be the concatenation of the `baseURI` and the `tokenId`. Empty by default, can be overridden in child contracts.","title":"_baseURI"},{"location":"warper/IWarper/","text":"IWarper __original function __original() external view returns (address) Returns the original asset address. __metahub function __metahub() external view returns (address) Returns the Metahub address. __assetClass function __assetClass() external view returns (bytes4) Returns the warper asset class ID. __supportedInterfaces function __supportedInterfaces(bytes4[] interfaceIds) external view returns (bool[]) Validates if a warper supports multiple interfaces at once. Name Type Description [0] bool[] an array of `bool` flags in order as the `interfaceIds` were passed.","title":"IWarper"},{"location":"warper/IWarper/#iwarper","text":"","title":"IWarper"},{"location":"warper/IWarper/#__original","text":"function __original() external view returns (address) Returns the original asset address.","title":"__original"},{"location":"warper/IWarper/#__metahub","text":"function __metahub() external view returns (address) Returns the Metahub address.","title":"__metahub"},{"location":"warper/IWarper/#__assetclass","text":"function __assetClass() external view returns (bytes4) Returns the warper asset class ID.","title":"__assetClass"},{"location":"warper/IWarper/#__supportedinterfaces","text":"function __supportedInterfaces(bytes4[] interfaceIds) external view returns (bool[]) Validates if a warper supports multiple interfaces at once. Name Type Description [0] bool[] an array of `bool` flags in order as the `interfaceIds` were passed.","title":"__supportedInterfaces"},{"location":"warper/IWarperController/","text":"IWarperController IncompatibleWarperInterface error IncompatibleWarperInterface() Thrown if warper interface is not compatible with the controller. InvalidAssetForWarper error InvalidAssetForWarper(address warper, address asset) Thrown upon attempting to use the warper with an asset different from the one expected by the warper. AlreadyRented error AlreadyRented() Thrown upon attempting to rent a warped asset which is already rented. warp function warp(struct Assets.Asset asset, address warper, address to) external returns (bytes32 warpedCollectionId, struct Assets.Asset warpedAsset) Takes an existing asset and then mints a warper token representing it. Used in Metahub->Warper communication. Name Type Description asset struct Assets.Asset The asset that must be warped. warper address Warper contract to used for warping. to address The account which will receive the warped asset. Name Type Description warpedCollectionId bytes32 Warped collection ID. warpedAsset struct Assets.Asset Warper asset structure. executeRentingHooks function executeRentingHooks(uint256 rentalId, struct Rentings.Agreement rentalAgreement, struct Accounts.RentalEarnings rentalEarnings) external Executes warper rental hook. Name Type Description rentalId uint256 Rental agreement ID. rentalAgreement struct Rentings.Agreement Newly registered rental agreement details. rentalEarnings struct Accounts.RentalEarnings The rental earnings breakdown. isCompatibleWarper function isCompatibleWarper(address warper) external view returns (bool) Validates that the warper interface is supported by the current WarperController. Name Type Description warper address Warper whose interface we must validate. Name Type Description [0] bool bool - `true` if warper is supported. checkCompatibleWarper function checkCompatibleWarper(address warper) external view Reverts if provided warper is not compatible with the controller. validateRentingParams function validateRentingParams(struct Assets.Asset asset, struct Rentings.Params rentingParams) external view Validates renting params taking into account various warper mechanics. Throws an error if the specified asset cannot be rented with particular renting parameters. Name Type Description asset struct Assets.Asset Asset being rented. rentingParams struct Rentings.Params Renting parameters. calculatePremiums function calculatePremiums(struct Assets.Asset asset, struct Rentings.Params rentingParams, uint256 universeFee, uint256 listerFee) external view returns (uint256 universePremium, uint256 listerPremium) Calculates the universe and/or lister premiums. Those are extra amounts that should be added the the resulting rental fee paid by renter. Name Type Description asset struct Assets.Asset Asset being rented. rentingParams struct Rentings.Params Renting parameters. universeFee uint256 The current value of the universe fee component. listerFee uint256 The current value of the lister fee component. Name Type Description universePremium uint256 The universe premium amount. listerPremium uint256 The lister premium amount.","title":"IWarperController"},{"location":"warper/IWarperController/#iwarpercontroller","text":"","title":"IWarperController"},{"location":"warper/IWarperController/#incompatiblewarperinterface","text":"error IncompatibleWarperInterface() Thrown if warper interface is not compatible with the controller.","title":"IncompatibleWarperInterface"},{"location":"warper/IWarperController/#invalidassetforwarper","text":"error InvalidAssetForWarper(address warper, address asset) Thrown upon attempting to use the warper with an asset different from the one expected by the warper.","title":"InvalidAssetForWarper"},{"location":"warper/IWarperController/#alreadyrented","text":"error AlreadyRented() Thrown upon attempting to rent a warped asset which is already rented.","title":"AlreadyRented"},{"location":"warper/IWarperController/#warp","text":"function warp(struct Assets.Asset asset, address warper, address to) external returns (bytes32 warpedCollectionId, struct Assets.Asset warpedAsset) Takes an existing asset and then mints a warper token representing it. Used in Metahub->Warper communication. Name Type Description asset struct Assets.Asset The asset that must be warped. warper address Warper contract to used for warping. to address The account which will receive the warped asset. Name Type Description warpedCollectionId bytes32 Warped collection ID. warpedAsset struct Assets.Asset Warper asset structure.","title":"warp"},{"location":"warper/IWarperController/#executerentinghooks","text":"function executeRentingHooks(uint256 rentalId, struct Rentings.Agreement rentalAgreement, struct Accounts.RentalEarnings rentalEarnings) external Executes warper rental hook. Name Type Description rentalId uint256 Rental agreement ID. rentalAgreement struct Rentings.Agreement Newly registered rental agreement details. rentalEarnings struct Accounts.RentalEarnings The rental earnings breakdown.","title":"executeRentingHooks"},{"location":"warper/IWarperController/#iscompatiblewarper","text":"function isCompatibleWarper(address warper) external view returns (bool) Validates that the warper interface is supported by the current WarperController. Name Type Description warper address Warper whose interface we must validate. Name Type Description [0] bool bool - `true` if warper is supported.","title":"isCompatibleWarper"},{"location":"warper/IWarperController/#checkcompatiblewarper","text":"function checkCompatibleWarper(address warper) external view Reverts if provided warper is not compatible with the controller.","title":"checkCompatibleWarper"},{"location":"warper/IWarperController/#validaterentingparams","text":"function validateRentingParams(struct Assets.Asset asset, struct Rentings.Params rentingParams) external view Validates renting params taking into account various warper mechanics. Throws an error if the specified asset cannot be rented with particular renting parameters. Name Type Description asset struct Assets.Asset Asset being rented. rentingParams struct Rentings.Params Renting parameters.","title":"validateRentingParams"},{"location":"warper/IWarperController/#calculatepremiums","text":"function calculatePremiums(struct Assets.Asset asset, struct Rentings.Params rentingParams, uint256 universeFee, uint256 listerFee) external view returns (uint256 universePremium, uint256 listerPremium) Calculates the universe and/or lister premiums. Those are extra amounts that should be added the the resulting rental fee paid by renter. Name Type Description asset struct Assets.Asset Asset being rented. rentingParams struct Rentings.Params Renting parameters. universeFee uint256 The current value of the universe fee component. listerFee uint256 The current value of the lister fee component. Name Type Description universePremium uint256 The universe premium amount. listerPremium uint256 The lister premium amount.","title":"calculatePremiums"},{"location":"warper/IWarperManager/","text":"IWarperManager WarperRegistrationParams struct WarperRegistrationParams { string name; uint256 universeId; bool paused; } WarperRegistered event WarperRegistered(uint256 universeId, address warper, address original, bytes4 assetClass) Emitted when a new warper is registered. Name Type Description universeId uint256 Universe ID. warper address Warper address. original address Original asset address. assetClass bytes4 Asset class ID (identical for the `original` and `warper`). WarperDeregistered event WarperDeregistered(address warper) Emitted when the warper is no longer registered. Name Type Description warper address Warper address. WarperPaused event WarperPaused(address warper) Emitted when the warper is paused. Name Type Description warper address Address. WarperUnpaused event WarperUnpaused(address warper) Emitted when the warper pause is lifted. Name Type Description warper address Address. registerWarper function registerWarper(address warper, struct IWarperManager.WarperRegistrationParams params) external Registers a new warper. The warper must be deployed and configured prior to registration, since it becomes available for renting immediately. Name Type Description warper address Warper address. params struct IWarperManager.WarperRegistrationParams Warper registration params. deregisterWarper function deregisterWarper(address warper) external Deletes warper registration information. All current rental agreements with the warper will stay intact, but the new rentals won't be possible. Name Type Description warper address Warper address. pauseWarper function pauseWarper(address warper) external Puts the warper on pause. Emits a {WarperPaused} event. Name Type Description warper address Address. unpauseWarper function unpauseWarper(address warper) external Lifts the warper pause. Emits a {WarperUnpaused} event. Name Type Description warper address Address. setWarperController function setWarperController(address[] warpers, address controller) external Sets the new controller address for one or multiple registered warpers. Name Type Description warpers address[] A list of registered warper addresses which controller will be changed. controller address Warper controller address. checkSupportedAsset function checkSupportedAsset(address asset) external view Reverts if asset is not supported. Name Type Description asset address Asset address. checkRegisteredWarper function checkRegisteredWarper(address warper) external view Reverts if warper is not registered. universeWarperCount function universeWarperCount(uint256 universeId) external view returns (uint256) Returns the number of warpers belonging to the particular universe. Name Type Description universeId uint256 The universe ID. Name Type Description [0] uint256 Warper count. universeWarpers function universeWarpers(uint256 universeId, uint256 offset, uint256 limit) external view returns (address[], struct Warpers.Warper[]) Returns the list of warpers belonging to the particular universe. Name Type Description universeId uint256 The universe ID. offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] address[] List of warper addresses. [1] struct Warpers.Warper[] List of warpers. assetWarperCount function assetWarperCount(address original) external view returns (uint256) Returns the number of warpers associated with the particular original asset. Name Type Description original address Original asset address. Name Type Description [0] uint256 Warper count. assetWarpers function assetWarpers(address original, uint256 offset, uint256 limit) external view returns (address[], struct Warpers.Warper[]) Returns the list of warpers associated with the particular original asset. Name Type Description original address Original asset address. offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] address[] List of warper addresses. [1] struct Warpers.Warper[] List of warpers. warperPresetFactory function warperPresetFactory() external view returns (address) Returns warper preset factory address. metahub function metahub() external view returns (address) Returns the Metahub address. isWarperAdmin function isWarperAdmin(address warper, address account) external view returns (bool) Checks whether `account` is the `warper` admin. Name Type Description warper address Warper address. account address Account address. Name Type Description [0] bool True if the `account` is the admin of the `warper` and false otherwise. warperInfo function warperInfo(address warper) external view returns (struct Warpers.Warper) Returns registered warper details. Name Type Description warper address Warper address. Name Type Description [0] struct Warpers.Warper Warper details. warperController function warperController(address warper) external view returns (address) Returns warper controller address. Name Type Description warper address Warper address. Name Type Description [0] address Current controller.","title":"IWarperManager"},{"location":"warper/IWarperManager/#iwarpermanager","text":"","title":"IWarperManager"},{"location":"warper/IWarperManager/#warperregistrationparams","text":"struct WarperRegistrationParams { string name; uint256 universeId; bool paused; }","title":"WarperRegistrationParams"},{"location":"warper/IWarperManager/#warperregistered","text":"event WarperRegistered(uint256 universeId, address warper, address original, bytes4 assetClass) Emitted when a new warper is registered. Name Type Description universeId uint256 Universe ID. warper address Warper address. original address Original asset address. assetClass bytes4 Asset class ID (identical for the `original` and `warper`).","title":"WarperRegistered"},{"location":"warper/IWarperManager/#warperderegistered","text":"event WarperDeregistered(address warper) Emitted when the warper is no longer registered. Name Type Description warper address Warper address.","title":"WarperDeregistered"},{"location":"warper/IWarperManager/#warperpaused","text":"event WarperPaused(address warper) Emitted when the warper is paused. Name Type Description warper address Address.","title":"WarperPaused"},{"location":"warper/IWarperManager/#warperunpaused","text":"event WarperUnpaused(address warper) Emitted when the warper pause is lifted. Name Type Description warper address Address.","title":"WarperUnpaused"},{"location":"warper/IWarperManager/#registerwarper","text":"function registerWarper(address warper, struct IWarperManager.WarperRegistrationParams params) external Registers a new warper. The warper must be deployed and configured prior to registration, since it becomes available for renting immediately. Name Type Description warper address Warper address. params struct IWarperManager.WarperRegistrationParams Warper registration params.","title":"registerWarper"},{"location":"warper/IWarperManager/#deregisterwarper","text":"function deregisterWarper(address warper) external Deletes warper registration information. All current rental agreements with the warper will stay intact, but the new rentals won't be possible. Name Type Description warper address Warper address.","title":"deregisterWarper"},{"location":"warper/IWarperManager/#pausewarper","text":"function pauseWarper(address warper) external Puts the warper on pause. Emits a {WarperPaused} event. Name Type Description warper address Address.","title":"pauseWarper"},{"location":"warper/IWarperManager/#unpausewarper","text":"function unpauseWarper(address warper) external Lifts the warper pause. Emits a {WarperUnpaused} event. Name Type Description warper address Address.","title":"unpauseWarper"},{"location":"warper/IWarperManager/#setwarpercontroller","text":"function setWarperController(address[] warpers, address controller) external Sets the new controller address for one or multiple registered warpers. Name Type Description warpers address[] A list of registered warper addresses which controller will be changed. controller address Warper controller address.","title":"setWarperController"},{"location":"warper/IWarperManager/#checksupportedasset","text":"function checkSupportedAsset(address asset) external view Reverts if asset is not supported. Name Type Description asset address Asset address.","title":"checkSupportedAsset"},{"location":"warper/IWarperManager/#checkregisteredwarper","text":"function checkRegisteredWarper(address warper) external view Reverts if warper is not registered.","title":"checkRegisteredWarper"},{"location":"warper/IWarperManager/#universewarpercount","text":"function universeWarperCount(uint256 universeId) external view returns (uint256) Returns the number of warpers belonging to the particular universe. Name Type Description universeId uint256 The universe ID. Name Type Description [0] uint256 Warper count.","title":"universeWarperCount"},{"location":"warper/IWarperManager/#universewarpers","text":"function universeWarpers(uint256 universeId, uint256 offset, uint256 limit) external view returns (address[], struct Warpers.Warper[]) Returns the list of warpers belonging to the particular universe. Name Type Description universeId uint256 The universe ID. offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] address[] List of warper addresses. [1] struct Warpers.Warper[] List of warpers.","title":"universeWarpers"},{"location":"warper/IWarperManager/#assetwarpercount","text":"function assetWarperCount(address original) external view returns (uint256) Returns the number of warpers associated with the particular original asset. Name Type Description original address Original asset address. Name Type Description [0] uint256 Warper count.","title":"assetWarperCount"},{"location":"warper/IWarperManager/#assetwarpers","text":"function assetWarpers(address original, uint256 offset, uint256 limit) external view returns (address[], struct Warpers.Warper[]) Returns the list of warpers associated with the particular original asset. Name Type Description original address Original asset address. offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] address[] List of warper addresses. [1] struct Warpers.Warper[] List of warpers.","title":"assetWarpers"},{"location":"warper/IWarperManager/#warperpresetfactory","text":"function warperPresetFactory() external view returns (address) Returns warper preset factory address.","title":"warperPresetFactory"},{"location":"warper/IWarperManager/#metahub","text":"function metahub() external view returns (address) Returns the Metahub address.","title":"metahub"},{"location":"warper/IWarperManager/#iswarperadmin","text":"function isWarperAdmin(address warper, address account) external view returns (bool) Checks whether `account` is the `warper` admin. Name Type Description warper address Warper address. account address Account address. Name Type Description [0] bool True if the `account` is the admin of the `warper` and false otherwise.","title":"isWarperAdmin"},{"location":"warper/IWarperManager/#warperinfo","text":"function warperInfo(address warper) external view returns (struct Warpers.Warper) Returns registered warper details. Name Type Description warper address Warper address. Name Type Description [0] struct Warpers.Warper Warper details.","title":"warperInfo"},{"location":"warper/IWarperManager/#warpercontroller","text":"function warperController(address warper) external view returns (address) Returns warper controller address. Name Type Description warper address Warper address. Name Type Description [0] address Current controller.","title":"warperController"},{"location":"warper/IWarperPreset/","text":"IWarperPreset __initialize function __initialize(bytes config) external Warper generic initialization method. Name Type Description config bytes Warper configuration parameters.","title":"IWarperPreset"},{"location":"warper/IWarperPreset/#iwarperpreset","text":"","title":"IWarperPreset"},{"location":"warper/IWarperPreset/#__initialize","text":"function __initialize(bytes config) external Warper generic initialization method. Name Type Description config bytes Warper configuration parameters.","title":"__initialize"},{"location":"warper/IWarperPresetFactory/","text":"IWarperPresetFactory InvalidWarperPresetInterface error InvalidWarperPresetInterface() Thrown when the implementation does not support the IWarperPreset interface DuplicateWarperPresetId error DuplicateWarperPresetId(bytes32 presetId) Thrown when the warper preset id is already present in the storage. DisabledWarperPreset error DisabledWarperPreset(bytes32 presetId) Thrown when the warper preset has been disabled, when it was expected for it to be enabled. EnabledWarperPreset error EnabledWarperPreset(bytes32 presetId) Thrown when the warper preset has been enabled, when it was expected for it to be disabled. WarperPresetNotRegistered error WarperPresetNotRegistered(bytes32 presetId) Thrown when it was expected for the warper preset to be registeredr. EmptyPresetData error EmptyPresetData() Thrown when the provided preset initialization data is empty. WarperPreset struct WarperPreset { bytes32 id; address implementation; bool enabled; } WarperPresetAdded event WarperPresetAdded(bytes32 presetId, address implementation) Emitted when new warper preset is added. WarperPresetDisabled event WarperPresetDisabled(bytes32 presetId) Emitted when a warper preset is disabled. WarperPresetEnabled event WarperPresetEnabled(bytes32 presetId) Emitted when a warper preset is enabled. WarperPresetRemoved event WarperPresetRemoved(bytes32 presetId) Emitted when a warper preset is enabled. WarperPresetDeployed event WarperPresetDeployed(bytes32 presetId, address warper) Emitted when a warper preset is deployed. addPreset function addPreset(bytes32 presetId, address implementation) external Stores the association between `presetId` and `implementation` address. NOTE: Warper `implementation` must be deployed beforehand. Name Type Description presetId bytes32 Warper preset id. implementation address Warper implementation address. removePreset function removePreset(bytes32 presetId) external Removes the association between `presetId` and its implementation. Name Type Description presetId bytes32 Warper preset id. enablePreset function enablePreset(bytes32 presetId) external Enables warper preset, which makes it deployable. Name Type Description presetId bytes32 Warper preset id. disablePreset function disablePreset(bytes32 presetId) external Disable warper preset, which makes non-deployable. Name Type Description presetId bytes32 Warper preset id. deployPreset function deployPreset(bytes32 presetId, bytes initData) external returns (address) Deploys a new warper from the preset identified by `presetId`. Name Type Description presetId bytes32 Warper preset id. initData bytes Warper initialization payload. Name Type Description [0] address Deployed warper address. presetEnabled function presetEnabled(bytes32 presetId) external view returns (bool) Checks whether warper preset is enabled and available for deployment. Name Type Description presetId bytes32 Warper preset id. presets function presets() external view returns (struct IWarperPresetFactory.WarperPreset[]) Returns the list of all registered warper presets. preset function preset(bytes32 presetId) external view returns (struct IWarperPresetFactory.WarperPreset) Returns the warper preset details. Name Type Description presetId bytes32 Warper preset id.","title":"IWarperPresetFactory"},{"location":"warper/IWarperPresetFactory/#iwarperpresetfactory","text":"","title":"IWarperPresetFactory"},{"location":"warper/IWarperPresetFactory/#invalidwarperpresetinterface","text":"error InvalidWarperPresetInterface() Thrown when the implementation does not support the IWarperPreset interface","title":"InvalidWarperPresetInterface"},{"location":"warper/IWarperPresetFactory/#duplicatewarperpresetid","text":"error DuplicateWarperPresetId(bytes32 presetId) Thrown when the warper preset id is already present in the storage.","title":"DuplicateWarperPresetId"},{"location":"warper/IWarperPresetFactory/#disabledwarperpreset","text":"error DisabledWarperPreset(bytes32 presetId) Thrown when the warper preset has been disabled, when it was expected for it to be enabled.","title":"DisabledWarperPreset"},{"location":"warper/IWarperPresetFactory/#enabledwarperpreset","text":"error EnabledWarperPreset(bytes32 presetId) Thrown when the warper preset has been enabled, when it was expected for it to be disabled.","title":"EnabledWarperPreset"},{"location":"warper/IWarperPresetFactory/#warperpresetnotregistered","text":"error WarperPresetNotRegistered(bytes32 presetId) Thrown when it was expected for the warper preset to be registeredr.","title":"WarperPresetNotRegistered"},{"location":"warper/IWarperPresetFactory/#emptypresetdata","text":"error EmptyPresetData() Thrown when the provided preset initialization data is empty.","title":"EmptyPresetData"},{"location":"warper/IWarperPresetFactory/#warperpreset","text":"struct WarperPreset { bytes32 id; address implementation; bool enabled; }","title":"WarperPreset"},{"location":"warper/IWarperPresetFactory/#warperpresetadded","text":"event WarperPresetAdded(bytes32 presetId, address implementation) Emitted when new warper preset is added.","title":"WarperPresetAdded"},{"location":"warper/IWarperPresetFactory/#warperpresetdisabled","text":"event WarperPresetDisabled(bytes32 presetId) Emitted when a warper preset is disabled.","title":"WarperPresetDisabled"},{"location":"warper/IWarperPresetFactory/#warperpresetenabled","text":"event WarperPresetEnabled(bytes32 presetId) Emitted when a warper preset is enabled.","title":"WarperPresetEnabled"},{"location":"warper/IWarperPresetFactory/#warperpresetremoved","text":"event WarperPresetRemoved(bytes32 presetId) Emitted when a warper preset is enabled.","title":"WarperPresetRemoved"},{"location":"warper/IWarperPresetFactory/#warperpresetdeployed","text":"event WarperPresetDeployed(bytes32 presetId, address warper) Emitted when a warper preset is deployed.","title":"WarperPresetDeployed"},{"location":"warper/IWarperPresetFactory/#addpreset","text":"function addPreset(bytes32 presetId, address implementation) external Stores the association between `presetId` and `implementation` address. NOTE: Warper `implementation` must be deployed beforehand. Name Type Description presetId bytes32 Warper preset id. implementation address Warper implementation address.","title":"addPreset"},{"location":"warper/IWarperPresetFactory/#removepreset","text":"function removePreset(bytes32 presetId) external Removes the association between `presetId` and its implementation. Name Type Description presetId bytes32 Warper preset id.","title":"removePreset"},{"location":"warper/IWarperPresetFactory/#enablepreset","text":"function enablePreset(bytes32 presetId) external Enables warper preset, which makes it deployable. Name Type Description presetId bytes32 Warper preset id.","title":"enablePreset"},{"location":"warper/IWarperPresetFactory/#disablepreset","text":"function disablePreset(bytes32 presetId) external Disable warper preset, which makes non-deployable. Name Type Description presetId bytes32 Warper preset id.","title":"disablePreset"},{"location":"warper/IWarperPresetFactory/#deploypreset","text":"function deployPreset(bytes32 presetId, bytes initData) external returns (address) Deploys a new warper from the preset identified by `presetId`. Name Type Description presetId bytes32 Warper preset id. initData bytes Warper initialization payload. Name Type Description [0] address Deployed warper address.","title":"deployPreset"},{"location":"warper/IWarperPresetFactory/#presetenabled","text":"function presetEnabled(bytes32 presetId) external view returns (bool) Checks whether warper preset is enabled and available for deployment. Name Type Description presetId bytes32 Warper preset id.","title":"presetEnabled"},{"location":"warper/IWarperPresetFactory/#presets","text":"function presets() external view returns (struct IWarperPresetFactory.WarperPreset[]) Returns the list of all registered warper presets.","title":"presets"},{"location":"warper/IWarperPresetFactory/#preset","text":"function preset(bytes32 presetId) external view returns (struct IWarperPresetFactory.WarperPreset) Returns the warper preset details. Name Type Description presetId bytes32 Warper preset id.","title":"preset"},{"location":"warper/Warper/","text":"Warper InvalidOriginalTokenInterface error InvalidOriginalTokenInterface(address original, bytes4 requiredInterfaceId) Thrown when the original asset contract does not implement the interface, expected by Warper. receive receive() external payable virtual Forwards the current call to the original asset contract. Will run if call data is empty. fallback fallback() external payable virtual Forwards the current call to the original asset contract`. Will run if no other function in the contract matches the call data. _Warper_init function _Warper_init(address original, address metahub) internal Warper initializer. supportsInterface function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._ __supportedInterfaces function __supportedInterfaces(bytes4[] interfaceIds) external view returns (bool[]) Validates if a warper supports multiple interfaces at once. Name Type Description [0] bool[] an array of `bool` flags in order as the `interfaceIds` were passed. __original function __original() external view returns (address) Returns the original NFT address. __metahub function __metahub() external view returns (address) Returns the Metahub address. _fallback function _fallback() internal virtual _Forwards the current call to the original asset contract`. This function does not return to its internal call site, it will return directly to the external caller._ _beforeFallback function _beforeFallback() internal virtual _Hook that is called before falling back to the original. Can happen as part of a manual `_fallback` call, or as part of the Solidity `fallback` or `receive` functions. If overridden should call `super. beforeFallback()`. _validateOriginal function _validateOriginal(address original) internal virtual _Validates the original NFT. If overridden should call `super. validateOriginal()`.","title":"Warper"},{"location":"warper/Warper/#warper","text":"","title":"Warper"},{"location":"warper/Warper/#invalidoriginaltokeninterface","text":"error InvalidOriginalTokenInterface(address original, bytes4 requiredInterfaceId) Thrown when the original asset contract does not implement the interface, expected by Warper.","title":"InvalidOriginalTokenInterface"},{"location":"warper/Warper/#receive","text":"receive() external payable virtual Forwards the current call to the original asset contract. Will run if call data is empty.","title":"receive"},{"location":"warper/Warper/#fallback","text":"fallback() external payable virtual Forwards the current call to the original asset contract`. Will run if no other function in the contract matches the call data.","title":"fallback"},{"location":"warper/Warper/#_warper_init","text":"function _Warper_init(address original, address metahub) internal Warper initializer.","title":"_Warper_init"},{"location":"warper/Warper/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._","title":"supportsInterface"},{"location":"warper/Warper/#__supportedinterfaces","text":"function __supportedInterfaces(bytes4[] interfaceIds) external view returns (bool[]) Validates if a warper supports multiple interfaces at once. Name Type Description [0] bool[] an array of `bool` flags in order as the `interfaceIds` were passed.","title":"__supportedInterfaces"},{"location":"warper/Warper/#__original","text":"function __original() external view returns (address) Returns the original NFT address.","title":"__original"},{"location":"warper/Warper/#__metahub","text":"function __metahub() external view returns (address) Returns the Metahub address.","title":"__metahub"},{"location":"warper/Warper/#_fallback","text":"function _fallback() internal virtual _Forwards the current call to the original asset contract`. This function does not return to its internal call site, it will return directly to the external caller._","title":"_fallback"},{"location":"warper/Warper/#_beforefallback","text":"function _beforeFallback() internal virtual _Hook that is called before falling back to the original. Can happen as part of a manual `_fallback` call, or as part of the Solidity `fallback` or `receive` functions. If overridden should call `super. beforeFallback()`.","title":"_beforeFallback"},{"location":"warper/Warper/#_validateoriginal","text":"function _validateOriginal(address original) internal virtual _Validates the original NFT. If overridden should call `super. validateOriginal()`.","title":"_validateOriginal"},{"location":"warper/WarperManager/","text":"WarperManager WarperManagerInitParams struct WarperManagerInitParams { contract IWarperPresetFactory warperPresetFactory; contract IAssetClassRegistry assetClassRegistry; contract IUniverseRegistry universeRegistry; contract IACL acl; } onlyWarperAdmin modifier onlyWarperAdmin(address warper) Modifier to make a function callable only by the warpers admin (universe owner). onlyRegisteredWarper modifier onlyRegisteredWarper(address warper) Modifier to make sure that the warper has been registered beforehand. onlyUniverseOwner modifier onlyUniverseOwner(uint256 universeId) Modifier to make a function callable only by the universe owner. whileMetahub modifier whileMetahub(uint256 universeId) Modifier to make a function callable only by the universe owner. initialize function initialize(struct WarperManager.WarperManagerInitParams params) external Metahub initializer. Name Type Description params struct WarperManager.WarperManagerInitParams Initialization params. setMetahub function setMetahub(contract IMetahub metahub_) external Set Metahub post-initialization to avoid circular dependencies. registerWarper function registerWarper(address warper, struct IWarperManager.WarperRegistrationParams params) external Registers a new warper. The warper must be deployed and configured prior to registration, since it becomes available for renting immediately. Name Type Description warper address Warper address. params struct IWarperManager.WarperRegistrationParams Warper registration params. deregisterWarper function deregisterWarper(address warper) external Deletes warper registration information. All current rental agreements with the warper will stay intact, but the new rentals won't be possible. Name Type Description warper address Warper address. pauseWarper function pauseWarper(address warper) external Puts the warper on pause. Emits a {WarperPaused} event. Name Type Description warper address Address. unpauseWarper function unpauseWarper(address warper) external Lifts the warper pause. Emits a {WarperUnpaused} event. Name Type Description warper address Address. setWarperController function setWarperController(address[] warpers, address controller) external Sets the new controller address for one or multiple registered warpers. Name Type Description warpers address[] A list of registered warper addresses which controller will be changed. controller address Warper controller address. warperPresetFactory function warperPresetFactory() external view returns (address) Returns warper preset factory address. metahub function metahub() external view returns (address) Returns the Metahub address. universeWarperCount function universeWarperCount(uint256 universeId) external view returns (uint256) Returns the number of warpers belonging to the particular universe. Name Type Description universeId uint256 The universe ID. Name Type Description [0] uint256 Warper count. universeWarpers function universeWarpers(uint256 universeId, uint256 offset, uint256 limit) external view returns (address[], struct Warpers.Warper[]) Returns the list of warpers belonging to the particular universe. Name Type Description universeId uint256 The universe ID. offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] address[] List of warper addresses. [1] struct Warpers.Warper[] List of warpers. assetWarperCount function assetWarperCount(address original) external view returns (uint256) Returns the number of warpers associated with the particular original asset. Name Type Description original address Original asset address. Name Type Description [0] uint256 Warper count. assetWarpers function assetWarpers(address original, uint256 offset, uint256 limit) external view returns (address[], struct Warpers.Warper[]) Returns the list of warpers associated with the particular original asset. Name Type Description original address Original asset address. offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] address[] List of warper addresses. [1] struct Warpers.Warper[] List of warpers. isWarperAdmin function isWarperAdmin(address warper, address account) external view returns (bool) Checks whether `account` is the `warper` admin. Name Type Description warper address Warper address. account address Account address. Name Type Description [0] bool True if the `account` is the admin of the `warper` and false otherwise. warperInfo function warperInfo(address warper) external view returns (struct Warpers.Warper) Returns registered warper details. Name Type Description warper address Warper address. Name Type Description [0] struct Warpers.Warper Warper details. checkSupportedAsset function checkSupportedAsset(address asset) external view Reverts if asset is not supported. Name Type Description asset address Asset address. checkRegisteredWarper function checkRegisteredWarper(address warper) external view Reverts if warper is not registered. warperController function warperController(address warper) external view returns (address) Returns warper controller address. Name Type Description warper address Warper address. Name Type Description [0] address Current controller. _authorizeUpgrade function _authorizeUpgrade(address newImplementation) internal Checks whether the caller is authorized to upgrade the Metahub implementation. _checkWarperAdmin function _checkWarperAdmin(address warper, address account) internal view Reverts if the warpers universe owner is not the provided account address. Name Type Description warper address Warpers address. account address The address that's expected to be the warpers universe owner. _acl function _acl() internal view returns (contract IACL) return the IACL address","title":"WarperManager"},{"location":"warper/WarperManager/#warpermanager","text":"","title":"WarperManager"},{"location":"warper/WarperManager/#warpermanagerinitparams","text":"struct WarperManagerInitParams { contract IWarperPresetFactory warperPresetFactory; contract IAssetClassRegistry assetClassRegistry; contract IUniverseRegistry universeRegistry; contract IACL acl; }","title":"WarperManagerInitParams"},{"location":"warper/WarperManager/#onlywarperadmin","text":"modifier onlyWarperAdmin(address warper) Modifier to make a function callable only by the warpers admin (universe owner).","title":"onlyWarperAdmin"},{"location":"warper/WarperManager/#onlyregisteredwarper","text":"modifier onlyRegisteredWarper(address warper) Modifier to make sure that the warper has been registered beforehand.","title":"onlyRegisteredWarper"},{"location":"warper/WarperManager/#onlyuniverseowner","text":"modifier onlyUniverseOwner(uint256 universeId) Modifier to make a function callable only by the universe owner.","title":"onlyUniverseOwner"},{"location":"warper/WarperManager/#whilemetahub","text":"modifier whileMetahub(uint256 universeId) Modifier to make a function callable only by the universe owner.","title":"whileMetahub"},{"location":"warper/WarperManager/#initialize","text":"function initialize(struct WarperManager.WarperManagerInitParams params) external Metahub initializer. Name Type Description params struct WarperManager.WarperManagerInitParams Initialization params.","title":"initialize"},{"location":"warper/WarperManager/#setmetahub","text":"function setMetahub(contract IMetahub metahub_) external Set Metahub post-initialization to avoid circular dependencies.","title":"setMetahub"},{"location":"warper/WarperManager/#registerwarper","text":"function registerWarper(address warper, struct IWarperManager.WarperRegistrationParams params) external Registers a new warper. The warper must be deployed and configured prior to registration, since it becomes available for renting immediately. Name Type Description warper address Warper address. params struct IWarperManager.WarperRegistrationParams Warper registration params.","title":"registerWarper"},{"location":"warper/WarperManager/#deregisterwarper","text":"function deregisterWarper(address warper) external Deletes warper registration information. All current rental agreements with the warper will stay intact, but the new rentals won't be possible. Name Type Description warper address Warper address.","title":"deregisterWarper"},{"location":"warper/WarperManager/#pausewarper","text":"function pauseWarper(address warper) external Puts the warper on pause. Emits a {WarperPaused} event. Name Type Description warper address Address.","title":"pauseWarper"},{"location":"warper/WarperManager/#unpausewarper","text":"function unpauseWarper(address warper) external Lifts the warper pause. Emits a {WarperUnpaused} event. Name Type Description warper address Address.","title":"unpauseWarper"},{"location":"warper/WarperManager/#setwarpercontroller","text":"function setWarperController(address[] warpers, address controller) external Sets the new controller address for one or multiple registered warpers. Name Type Description warpers address[] A list of registered warper addresses which controller will be changed. controller address Warper controller address.","title":"setWarperController"},{"location":"warper/WarperManager/#warperpresetfactory","text":"function warperPresetFactory() external view returns (address) Returns warper preset factory address.","title":"warperPresetFactory"},{"location":"warper/WarperManager/#metahub","text":"function metahub() external view returns (address) Returns the Metahub address.","title":"metahub"},{"location":"warper/WarperManager/#universewarpercount","text":"function universeWarperCount(uint256 universeId) external view returns (uint256) Returns the number of warpers belonging to the particular universe. Name Type Description universeId uint256 The universe ID. Name Type Description [0] uint256 Warper count.","title":"universeWarperCount"},{"location":"warper/WarperManager/#universewarpers","text":"function universeWarpers(uint256 universeId, uint256 offset, uint256 limit) external view returns (address[], struct Warpers.Warper[]) Returns the list of warpers belonging to the particular universe. Name Type Description universeId uint256 The universe ID. offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] address[] List of warper addresses. [1] struct Warpers.Warper[] List of warpers.","title":"universeWarpers"},{"location":"warper/WarperManager/#assetwarpercount","text":"function assetWarperCount(address original) external view returns (uint256) Returns the number of warpers associated with the particular original asset. Name Type Description original address Original asset address. Name Type Description [0] uint256 Warper count.","title":"assetWarperCount"},{"location":"warper/WarperManager/#assetwarpers","text":"function assetWarpers(address original, uint256 offset, uint256 limit) external view returns (address[], struct Warpers.Warper[]) Returns the list of warpers associated with the particular original asset. Name Type Description original address Original asset address. offset uint256 Starting index. limit uint256 Max number of items. Name Type Description [0] address[] List of warper addresses. [1] struct Warpers.Warper[] List of warpers.","title":"assetWarpers"},{"location":"warper/WarperManager/#iswarperadmin","text":"function isWarperAdmin(address warper, address account) external view returns (bool) Checks whether `account` is the `warper` admin. Name Type Description warper address Warper address. account address Account address. Name Type Description [0] bool True if the `account` is the admin of the `warper` and false otherwise.","title":"isWarperAdmin"},{"location":"warper/WarperManager/#warperinfo","text":"function warperInfo(address warper) external view returns (struct Warpers.Warper) Returns registered warper details. Name Type Description warper address Warper address. Name Type Description [0] struct Warpers.Warper Warper details.","title":"warperInfo"},{"location":"warper/WarperManager/#checksupportedasset","text":"function checkSupportedAsset(address asset) external view Reverts if asset is not supported. Name Type Description asset address Asset address.","title":"checkSupportedAsset"},{"location":"warper/WarperManager/#checkregisteredwarper","text":"function checkRegisteredWarper(address warper) external view Reverts if warper is not registered.","title":"checkRegisteredWarper"},{"location":"warper/WarperManager/#warpercontroller","text":"function warperController(address warper) external view returns (address) Returns warper controller address. Name Type Description warper address Warper address. Name Type Description [0] address Current controller.","title":"warperController"},{"location":"warper/WarperManager/#_authorizeupgrade","text":"function _authorizeUpgrade(address newImplementation) internal Checks whether the caller is authorized to upgrade the Metahub implementation.","title":"_authorizeUpgrade"},{"location":"warper/WarperManager/#_checkwarperadmin","text":"function _checkWarperAdmin(address warper, address account) internal view Reverts if the warpers universe owner is not the provided account address. Name Type Description warper address Warpers address. account address The address that's expected to be the warpers universe owner.","title":"_checkWarperAdmin"},{"location":"warper/WarperManager/#_acl","text":"function _acl() internal view returns (contract IACL) return the IACL address","title":"_acl"},{"location":"warper/WarperManagerStorage/","text":"WarperManagerStorage _aclContract contract IACL _aclContract ACL contract. _warperRegistry struct Warpers.Registry _warperRegistry _assetClassRegistry contract IAssetClassRegistry _assetClassRegistry _metahub contract IMetahub _metahub _universeRegistry contract IUniverseRegistry _universeRegistry","title":"WarperManagerStorage"},{"location":"warper/WarperManagerStorage/#warpermanagerstorage","text":"","title":"WarperManagerStorage"},{"location":"warper/WarperManagerStorage/#_aclcontract","text":"contract IACL _aclContract ACL contract.","title":"_aclContract"},{"location":"warper/WarperManagerStorage/#_warperregistry","text":"struct Warpers.Registry _warperRegistry","title":"_warperRegistry"},{"location":"warper/WarperManagerStorage/#_assetclassregistry","text":"contract IAssetClassRegistry _assetClassRegistry","title":"_assetClassRegistry"},{"location":"warper/WarperManagerStorage/#_metahub","text":"contract IMetahub _metahub","title":"_metahub"},{"location":"warper/WarperManagerStorage/#_universeregistry","text":"contract IUniverseRegistry _universeRegistry","title":"_universeRegistry"},{"location":"warper/WarperPresetFactory/","text":"WarperPresetFactory whenEnabled modifier whenEnabled(bytes32 presetId) Modifier to check that the preset is currently enabled. whenDisabled modifier whenDisabled(bytes32 presetId) Modifier to check that the preset is currently disabled. presetIsRegistered modifier presetIsRegistered(bytes32 presetId) Modifier to check that the preset is registered. constructor constructor() public Constructor that gets called for the implementation contract. initialize function initialize(address acl) external WarperPresetFactory initializer. Name Type Description acl address Address of the ACL contract. addPreset function addPreset(bytes32 presetId, address implementation) external Stores the association between `presetId` and `implementation` address. NOTE: Warper `implementation` must be deployed beforehand. Name Type Description presetId bytes32 Warper preset id. implementation address Warper implementation address. removePreset function removePreset(bytes32 presetId) external Removes the association between `presetId` and its implementation. Name Type Description presetId bytes32 Warper preset id. enablePreset function enablePreset(bytes32 presetId) external Enables warper preset, which makes it deployable. Name Type Description presetId bytes32 Warper preset id. disablePreset function disablePreset(bytes32 presetId) external Disable warper preset, which makes non-deployable. Name Type Description presetId bytes32 Warper preset id. deployPreset function deployPreset(bytes32 presetId, bytes initData) external returns (address) Deploys a new warper from the preset identified by `presetId`. Name Type Description presetId bytes32 Warper preset id. initData bytes Warper initialization payload. Name Type Description [0] address Deployed warper address. presetEnabled function presetEnabled(bytes32 presetId) external view returns (bool) Checks whether warper preset is enabled and available for deployment. Name Type Description presetId bytes32 Warper preset id. presets function presets() external view returns (struct IWarperPresetFactory.WarperPreset[]) Returns the list of all registered warper presets. preset function preset(bytes32 presetId) external view returns (struct IWarperPresetFactory.WarperPreset) Returns the warper preset details. Name Type Description presetId bytes32 Warper preset id. _authorizeUpgrade function _authorizeUpgrade(address newImplementation) internal virtual _Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by {upgradeTo} and {upgradeToAndCall}. Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}. ```solidity function authorizeUpgrade(address) internal override onlyOwner {} ``` _acl function _acl() internal view virtual returns (contract IACL) return the IACL address","title":"WarperPresetFactory"},{"location":"warper/WarperPresetFactory/#warperpresetfactory","text":"","title":"WarperPresetFactory"},{"location":"warper/WarperPresetFactory/#whenenabled","text":"modifier whenEnabled(bytes32 presetId) Modifier to check that the preset is currently enabled.","title":"whenEnabled"},{"location":"warper/WarperPresetFactory/#whendisabled","text":"modifier whenDisabled(bytes32 presetId) Modifier to check that the preset is currently disabled.","title":"whenDisabled"},{"location":"warper/WarperPresetFactory/#presetisregistered","text":"modifier presetIsRegistered(bytes32 presetId) Modifier to check that the preset is registered.","title":"presetIsRegistered"},{"location":"warper/WarperPresetFactory/#constructor","text":"constructor() public Constructor that gets called for the implementation contract.","title":"constructor"},{"location":"warper/WarperPresetFactory/#initialize","text":"function initialize(address acl) external WarperPresetFactory initializer. Name Type Description acl address Address of the ACL contract.","title":"initialize"},{"location":"warper/WarperPresetFactory/#addpreset","text":"function addPreset(bytes32 presetId, address implementation) external Stores the association between `presetId` and `implementation` address. NOTE: Warper `implementation` must be deployed beforehand. Name Type Description presetId bytes32 Warper preset id. implementation address Warper implementation address.","title":"addPreset"},{"location":"warper/WarperPresetFactory/#removepreset","text":"function removePreset(bytes32 presetId) external Removes the association between `presetId` and its implementation. Name Type Description presetId bytes32 Warper preset id.","title":"removePreset"},{"location":"warper/WarperPresetFactory/#enablepreset","text":"function enablePreset(bytes32 presetId) external Enables warper preset, which makes it deployable. Name Type Description presetId bytes32 Warper preset id.","title":"enablePreset"},{"location":"warper/WarperPresetFactory/#disablepreset","text":"function disablePreset(bytes32 presetId) external Disable warper preset, which makes non-deployable. Name Type Description presetId bytes32 Warper preset id.","title":"disablePreset"},{"location":"warper/WarperPresetFactory/#deploypreset","text":"function deployPreset(bytes32 presetId, bytes initData) external returns (address) Deploys a new warper from the preset identified by `presetId`. Name Type Description presetId bytes32 Warper preset id. initData bytes Warper initialization payload. Name Type Description [0] address Deployed warper address.","title":"deployPreset"},{"location":"warper/WarperPresetFactory/#presetenabled","text":"function presetEnabled(bytes32 presetId) external view returns (bool) Checks whether warper preset is enabled and available for deployment. Name Type Description presetId bytes32 Warper preset id.","title":"presetEnabled"},{"location":"warper/WarperPresetFactory/#presets","text":"function presets() external view returns (struct IWarperPresetFactory.WarperPreset[]) Returns the list of all registered warper presets.","title":"presets"},{"location":"warper/WarperPresetFactory/#preset","text":"function preset(bytes32 presetId) external view returns (struct IWarperPresetFactory.WarperPreset) Returns the warper preset details. Name Type Description presetId bytes32 Warper preset id.","title":"preset"},{"location":"warper/WarperPresetFactory/#_authorizeupgrade","text":"function _authorizeUpgrade(address newImplementation) internal virtual _Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by {upgradeTo} and {upgradeToAndCall}. Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}. ```solidity function authorizeUpgrade(address) internal override onlyOwner {} ```","title":"_authorizeUpgrade"},{"location":"warper/WarperPresetFactory/#_acl","text":"function _acl() internal view virtual returns (contract IACL) return the IACL address","title":"_acl"},{"location":"warper/WarperPresetFactoryStorage/","text":"WarperPresetFactoryStorage _aclContract contract IACL _aclContract The ACL contract address. _presets mapping(bytes32 &#x3D;&gt; struct IWarperPresetFactory.WarperPreset) _presets Mapping presetId to preset struct. _presetIds struct EnumerableSetUpgradeable.Bytes32Set _presetIds Registered presets.","title":"WarperPresetFactoryStorage"},{"location":"warper/WarperPresetFactoryStorage/#warperpresetfactorystorage","text":"","title":"WarperPresetFactoryStorage"},{"location":"warper/WarperPresetFactoryStorage/#_aclcontract","text":"contract IACL _aclContract The ACL contract address.","title":"_aclContract"},{"location":"warper/WarperPresetFactoryStorage/#_presets","text":"mapping(bytes32 &#x3D;&gt; struct IWarperPresetFactory.WarperPreset) _presets Mapping presetId to preset struct.","title":"_presets"},{"location":"warper/WarperPresetFactoryStorage/#_presetids","text":"struct EnumerableSetUpgradeable.Bytes32Set _presetIds Registered presets.","title":"_presetIds"},{"location":"warper/Warpers/","text":"Warpers InvalidWarperInterface error InvalidWarperInterface() Thrown if provided warper address does not implement warper interface. WarperHasIncorrectMetahubReference error WarperHasIncorrectMetahubReference(address provided, address required) Thrown when the warper returned metahub address differs from the one it is being registered in. Name Type Description provided address Metahub address returned by warper. required address Required metahub address. WarperIsNotRegistered error WarperIsNotRegistered(address warper) Thrown when performing action or accessing data of an unknown warper. Name Type Description warper address Warper address. WarperIsAlreadyRegistered error WarperIsAlreadyRegistered(address warper) Thrown upon attempting to register a warper twice. Name Type Description warper address Duplicate warper address. WarperIsPaused error WarperIsPaused() Thrown when the operation is not allowed due to the warper being paused. WarperIsNotPaused error WarperIsNotPaused() Thrown when the operation is not allowed due to the warper not being paused. UnsupportedAsset error UnsupportedAsset(address asset) Thrown when there are no registered warpers for a particular asset. Name Type Description asset address Asset address. IncompatibleAsset error IncompatibleAsset(address asset) Thrown upon attempting to use the warper which is not registered for the provided asset. Warper struct Warper { bytes4 assetClass; address original; bool paused; contract IWarperController controller; string name; uint256 universeId; } checkCompatibleAsset function checkCompatibleAsset(struct Warpers.Warper self, struct Assets.Asset asset) internal pure Reverts if the warper original does not match the `asset`; pause function pause(struct Warpers.Warper self) internal Puts the warper on pause. unpause function unpause(struct Warpers.Warper self) internal Lifts the warper pause. checkNotPaused function checkNotPaused(struct Warpers.Warper self) internal pure Reverts if the warper is paused. Registry struct Registry { contract IWarperPresetFactory presetFactory; struct EnumerableSetUpgradeable.AddressSet warperIndex; mapping(uint256 &#x3D;&gt; struct EnumerableSetUpgradeable.AddressSet) universeWarperIndex; mapping(address &#x3D;&gt; struct EnumerableSetUpgradeable.AddressSet) assetWarperIndex; mapping(address &#x3D;&gt; struct Warpers.Warper) warpers; } registerWarper function registerWarper(struct Warpers.Registry self, address warper, struct IWarperManager.WarperRegistrationParams params, contract IAssetClassRegistry assetClassRegistry) internal returns (bytes4 assetClass, address original) Performs warper registration. Name Type Description self struct Warpers.Registry warper address Warper address. params struct IWarperManager.WarperRegistrationParams Warper registration params. assetClassRegistry contract IAssetClassRegistry _register function _register(struct Warpers.Registry self, address warperAddress, struct Warpers.Warper warper) private Performs warper registration. remove function remove(struct Warpers.Registry self, address warperAddress) internal Removes warper data from the registry. universeWarpers function universeWarpers(struct Warpers.Registry self, uint256 universeId, uint256 offset, uint256 limit) internal view returns (address[], struct Warpers.Warper[]) Returns the paginated list of warpers belonging to the particular universe. assetWarpers function assetWarpers(struct Warpers.Registry self, address original, uint256 offset, uint256 limit) internal view returns (address[], struct Warpers.Warper[]) Returns the paginated list of warpers associated with the particular original asset. isRegisteredWarper function isRegisteredWarper(struct Warpers.Registry self, address warper) internal view returns (bool) Checks warper registration by address. checkRegisteredWarper function checkRegisteredWarper(struct Warpers.Registry self, address warper) internal view Reverts if warper is not registered. checkSupportedAsset function checkSupportedAsset(struct Warpers.Registry self, address asset) internal view Reverts if asset is not supported. Name Type Description self struct Warpers.Registry asset address Asset address. isSupportedAsset function isSupportedAsset(struct Warpers.Registry self, address asset) internal view returns (bool) Checks asset support by address. The supported asset should have at least one warper. Name Type Description self struct Warpers.Registry asset address Asset address. universeWarperCount function universeWarperCount(struct Warpers.Registry self, uint256 universeId) internal view returns (uint256) Returns the number of warpers belonging to the particular universe. assetWarperCount function assetWarperCount(struct Warpers.Registry self, address original) internal view returns (uint256) Returns the number of warpers associated with the particular original asset. paginateIndexedWarpers function paginateIndexedWarpers(struct Warpers.Registry self, struct EnumerableSetUpgradeable.AddressSet warperIndex, uint256 offset, uint256 limit) internal view returns (address[], struct Warpers.Warper[]) Returns the paginated list of registered warpers using provided index reference.","title":"Warpers"},{"location":"warper/Warpers/#warpers","text":"","title":"Warpers"},{"location":"warper/Warpers/#invalidwarperinterface","text":"error InvalidWarperInterface() Thrown if provided warper address does not implement warper interface.","title":"InvalidWarperInterface"},{"location":"warper/Warpers/#warperhasincorrectmetahubreference","text":"error WarperHasIncorrectMetahubReference(address provided, address required) Thrown when the warper returned metahub address differs from the one it is being registered in. Name Type Description provided address Metahub address returned by warper. required address Required metahub address.","title":"WarperHasIncorrectMetahubReference"},{"location":"warper/Warpers/#warperisnotregistered","text":"error WarperIsNotRegistered(address warper) Thrown when performing action or accessing data of an unknown warper. Name Type Description warper address Warper address.","title":"WarperIsNotRegistered"},{"location":"warper/Warpers/#warperisalreadyregistered","text":"error WarperIsAlreadyRegistered(address warper) Thrown upon attempting to register a warper twice. Name Type Description warper address Duplicate warper address.","title":"WarperIsAlreadyRegistered"},{"location":"warper/Warpers/#warperispaused","text":"error WarperIsPaused() Thrown when the operation is not allowed due to the warper being paused.","title":"WarperIsPaused"},{"location":"warper/Warpers/#warperisnotpaused","text":"error WarperIsNotPaused() Thrown when the operation is not allowed due to the warper not being paused.","title":"WarperIsNotPaused"},{"location":"warper/Warpers/#unsupportedasset","text":"error UnsupportedAsset(address asset) Thrown when there are no registered warpers for a particular asset. Name Type Description asset address Asset address.","title":"UnsupportedAsset"},{"location":"warper/Warpers/#incompatibleasset","text":"error IncompatibleAsset(address asset) Thrown upon attempting to use the warper which is not registered for the provided asset.","title":"IncompatibleAsset"},{"location":"warper/Warpers/#warper","text":"struct Warper { bytes4 assetClass; address original; bool paused; contract IWarperController controller; string name; uint256 universeId; }","title":"Warper"},{"location":"warper/Warpers/#checkcompatibleasset","text":"function checkCompatibleAsset(struct Warpers.Warper self, struct Assets.Asset asset) internal pure Reverts if the warper original does not match the `asset`;","title":"checkCompatibleAsset"},{"location":"warper/Warpers/#pause","text":"function pause(struct Warpers.Warper self) internal Puts the warper on pause.","title":"pause"},{"location":"warper/Warpers/#unpause","text":"function unpause(struct Warpers.Warper self) internal Lifts the warper pause.","title":"unpause"},{"location":"warper/Warpers/#checknotpaused","text":"function checkNotPaused(struct Warpers.Warper self) internal pure Reverts if the warper is paused.","title":"checkNotPaused"},{"location":"warper/Warpers/#registry","text":"struct Registry { contract IWarperPresetFactory presetFactory; struct EnumerableSetUpgradeable.AddressSet warperIndex; mapping(uint256 &#x3D;&gt; struct EnumerableSetUpgradeable.AddressSet) universeWarperIndex; mapping(address &#x3D;&gt; struct EnumerableSetUpgradeable.AddressSet) assetWarperIndex; mapping(address &#x3D;&gt; struct Warpers.Warper) warpers; }","title":"Registry"},{"location":"warper/Warpers/#registerwarper","text":"function registerWarper(struct Warpers.Registry self, address warper, struct IWarperManager.WarperRegistrationParams params, contract IAssetClassRegistry assetClassRegistry) internal returns (bytes4 assetClass, address original) Performs warper registration. Name Type Description self struct Warpers.Registry warper address Warper address. params struct IWarperManager.WarperRegistrationParams Warper registration params. assetClassRegistry contract IAssetClassRegistry","title":"registerWarper"},{"location":"warper/Warpers/#_register","text":"function _register(struct Warpers.Registry self, address warperAddress, struct Warpers.Warper warper) private Performs warper registration.","title":"_register"},{"location":"warper/Warpers/#remove","text":"function remove(struct Warpers.Registry self, address warperAddress) internal Removes warper data from the registry.","title":"remove"},{"location":"warper/Warpers/#universewarpers","text":"function universeWarpers(struct Warpers.Registry self, uint256 universeId, uint256 offset, uint256 limit) internal view returns (address[], struct Warpers.Warper[]) Returns the paginated list of warpers belonging to the particular universe.","title":"universeWarpers"},{"location":"warper/Warpers/#assetwarpers","text":"function assetWarpers(struct Warpers.Registry self, address original, uint256 offset, uint256 limit) internal view returns (address[], struct Warpers.Warper[]) Returns the paginated list of warpers associated with the particular original asset.","title":"assetWarpers"},{"location":"warper/Warpers/#isregisteredwarper","text":"function isRegisteredWarper(struct Warpers.Registry self, address warper) internal view returns (bool) Checks warper registration by address.","title":"isRegisteredWarper"},{"location":"warper/Warpers/#checkregisteredwarper","text":"function checkRegisteredWarper(struct Warpers.Registry self, address warper) internal view Reverts if warper is not registered.","title":"checkRegisteredWarper"},{"location":"warper/Warpers/#checksupportedasset","text":"function checkSupportedAsset(struct Warpers.Registry self, address asset) internal view Reverts if asset is not supported. Name Type Description self struct Warpers.Registry asset address Asset address.","title":"checkSupportedAsset"},{"location":"warper/Warpers/#issupportedasset","text":"function isSupportedAsset(struct Warpers.Registry self, address asset) internal view returns (bool) Checks asset support by address. The supported asset should have at least one warper. Name Type Description self struct Warpers.Registry asset address Asset address.","title":"isSupportedAsset"},{"location":"warper/Warpers/#universewarpercount","text":"function universeWarperCount(struct Warpers.Registry self, uint256 universeId) internal view returns (uint256) Returns the number of warpers belonging to the particular universe.","title":"universeWarperCount"},{"location":"warper/Warpers/#assetwarpercount","text":"function assetWarperCount(struct Warpers.Registry self, address original) internal view returns (uint256) Returns the number of warpers associated with the particular original asset.","title":"assetWarperCount"},{"location":"warper/Warpers/#paginateindexedwarpers","text":"function paginateIndexedWarpers(struct Warpers.Registry self, struct EnumerableSetUpgradeable.AddressSet warperIndex, uint256 offset, uint256 limit) internal view returns (address[], struct Warpers.Warper[]) Returns the paginated list of registered warpers using provided index reference.","title":"paginateIndexedWarpers"},{"location":"warper/ERC721/ERC721Warper/","text":"ERC721Warper _owners mapping(uint256 &#x3D;&gt; address) _owners Mapping from token ID to owner address __assetClass function __assetClass() external pure returns (bytes4) Returns the warper asset class ID. setApprovalForAll function setApprovalForAll(address, bool) external virtual Method is disabled, kept only for interface compatibility purposes. approve function approve(address, uint256) external virtual Method is disabled, kept only for interface compatibility purposes. mint function mint(address to, uint256 tokenId, bytes data) external _Safely mints `tokenId` and transfers it to `to`. Requirements: needs to pass validation of `_beforeTokenTransfer()`. `tokenId` must not exist. If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event._ transferFrom function transferFrom(address from, address to, uint256 tokenId) external Need to fulfill all the requirements of `_transfer()` safeTransferFrom function safeTransferFrom(address from, address to, uint256 tokenId) public Need to fulfill all the requirements of `_transfer()` safeTransferFrom function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) public Need to fulfill all the requirements of `_transfer()` supportsInterface function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._ balanceOf function balanceOf(address owner) public view returns (uint256) The rental count calculations get offloaded to the Metahub ownerOf function ownerOf(uint256 tokenId) public view returns (address) The ownership is dependant on the rental status - metahub is responsible for tracking the state: - NONE: revert with an error - AVAILABLE: means, that the token is not currently rented. Metahub is the owner. - RENTED: Use the Warpers internal ownership constructs getApproved function getApproved(uint256 tokenId) public view returns (address) _Returns the account approved for `tokenId` token. Requirements: `tokenId` must exist._ isApprovedForAll function isApprovedForAll(address, address operator) public view returns (bool) _Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}_ _validateOriginal function _validateOriginal(address original) internal virtual Validates the original NFT. _beforeTokenTransfer function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal _ONLY THE METAHUB CAN CALL THIS METHOD. This validates every single transfer that the warper can perform. Metahub can be the only source of transfers, so it can properly synchronise the rental agreement ownership. Hook that is called before any token transfer. This includes minting and burning. Calling conditions: When `from` and `to` are both non-zero, ``from``'s `tokenId` will be transferred to `to`. When `from` is zero, `tokenId` will be minted for `to`. When `to` is zero, ``from``'s `tokenId` will be burned. `from` and `to` are never both zero._ _safeTransfer function _safeTransfer(address from, address to, uint256 tokenId, bytes data) internal _Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. `data` is additional data, it has no specified format and it is sent in call to `to`. This internal function is equivalent to {safeTransferFrom}, and can be used to e.g. implement alternative mechanisms to perform token transfer, such as signature-based. Requirements: Needs to fulfill all the requirements of `_transfer()` `from` cannot be the zero address. `to` cannot be the zero address. `tokenId` token must exist and be owned by `from`. If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event._ _transfer function _transfer(address from, address to, uint256 tokenId) internal _Transfers `tokenId` from `from` to `to`. Requirements: `to` cannot be the zero address. needs to pass validation of `_beforeTokenTransfer()`. Emits a {Transfer} event._ _exists function _exists(uint256 tokenId) internal view returns (bool) _Returns whether `tokenId` exists. Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}. Tokens start existing when they are minted (` mint`), and stop existing when they are burned (`_burn`). _warperController function _warperController() internal view returns (contract IERC721WarperController) Get the associated warper controller. _checkOnERC721Received function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes data) private returns (bool) Internal function to invoke {IERC721Receiver-onERC721Received} on a target address. The call is not executed if the target address is not a contract. Name Type Description from address address representing the previous owner of the given token ID to address target address that will receive the tokens tokenId uint256 uint256 ID of the token to be transferred data bytes bytes optional data to send along with the call Name Type Description [0] bool bool whether the call correctly returned the expected magic value _getWarperRentalStatus function _getWarperRentalStatus(uint256 tokenId) private view returns (enum Rentings.RentalStatus) Get the rental status of a token.","title":"ERC721Warper"},{"location":"warper/ERC721/ERC721Warper/#erc721warper","text":"","title":"ERC721Warper"},{"location":"warper/ERC721/ERC721Warper/#_owners","text":"mapping(uint256 &#x3D;&gt; address) _owners Mapping from token ID to owner address","title":"_owners"},{"location":"warper/ERC721/ERC721Warper/#__assetclass","text":"function __assetClass() external pure returns (bytes4) Returns the warper asset class ID.","title":"__assetClass"},{"location":"warper/ERC721/ERC721Warper/#setapprovalforall","text":"function setApprovalForAll(address, bool) external virtual Method is disabled, kept only for interface compatibility purposes.","title":"setApprovalForAll"},{"location":"warper/ERC721/ERC721Warper/#approve","text":"function approve(address, uint256) external virtual Method is disabled, kept only for interface compatibility purposes.","title":"approve"},{"location":"warper/ERC721/ERC721Warper/#mint","text":"function mint(address to, uint256 tokenId, bytes data) external _Safely mints `tokenId` and transfers it to `to`. Requirements: needs to pass validation of `_beforeTokenTransfer()`. `tokenId` must not exist. If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event._","title":"mint"},{"location":"warper/ERC721/ERC721Warper/#transferfrom","text":"function transferFrom(address from, address to, uint256 tokenId) external Need to fulfill all the requirements of `_transfer()`","title":"transferFrom"},{"location":"warper/ERC721/ERC721Warper/#safetransferfrom","text":"function safeTransferFrom(address from, address to, uint256 tokenId) public Need to fulfill all the requirements of `_transfer()`","title":"safeTransferFrom"},{"location":"warper/ERC721/ERC721Warper/#safetransferfrom_1","text":"function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) public Need to fulfill all the requirements of `_transfer()`","title":"safeTransferFrom"},{"location":"warper/ERC721/ERC721Warper/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._","title":"supportsInterface"},{"location":"warper/ERC721/ERC721Warper/#balanceof","text":"function balanceOf(address owner) public view returns (uint256) The rental count calculations get offloaded to the Metahub","title":"balanceOf"},{"location":"warper/ERC721/ERC721Warper/#ownerof","text":"function ownerOf(uint256 tokenId) public view returns (address) The ownership is dependant on the rental status - metahub is responsible for tracking the state: - NONE: revert with an error - AVAILABLE: means, that the token is not currently rented. Metahub is the owner. - RENTED: Use the Warpers internal ownership constructs","title":"ownerOf"},{"location":"warper/ERC721/ERC721Warper/#getapproved","text":"function getApproved(uint256 tokenId) public view returns (address) _Returns the account approved for `tokenId` token. Requirements: `tokenId` must exist._","title":"getApproved"},{"location":"warper/ERC721/ERC721Warper/#isapprovedforall","text":"function isApprovedForAll(address, address operator) public view returns (bool) _Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}_","title":"isApprovedForAll"},{"location":"warper/ERC721/ERC721Warper/#_validateoriginal","text":"function _validateOriginal(address original) internal virtual Validates the original NFT.","title":"_validateOriginal"},{"location":"warper/ERC721/ERC721Warper/#_beforetokentransfer","text":"function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal _ONLY THE METAHUB CAN CALL THIS METHOD. This validates every single transfer that the warper can perform. Metahub can be the only source of transfers, so it can properly synchronise the rental agreement ownership. Hook that is called before any token transfer. This includes minting and burning. Calling conditions: When `from` and `to` are both non-zero, ``from``'s `tokenId` will be transferred to `to`. When `from` is zero, `tokenId` will be minted for `to`. When `to` is zero, ``from``'s `tokenId` will be burned. `from` and `to` are never both zero._","title":"_beforeTokenTransfer"},{"location":"warper/ERC721/ERC721Warper/#_safetransfer","text":"function _safeTransfer(address from, address to, uint256 tokenId, bytes data) internal _Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. `data` is additional data, it has no specified format and it is sent in call to `to`. This internal function is equivalent to {safeTransferFrom}, and can be used to e.g. implement alternative mechanisms to perform token transfer, such as signature-based. Requirements: Needs to fulfill all the requirements of `_transfer()` `from` cannot be the zero address. `to` cannot be the zero address. `tokenId` token must exist and be owned by `from`. If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event._","title":"_safeTransfer"},{"location":"warper/ERC721/ERC721Warper/#_transfer","text":"function _transfer(address from, address to, uint256 tokenId) internal _Transfers `tokenId` from `from` to `to`. Requirements: `to` cannot be the zero address. needs to pass validation of `_beforeTokenTransfer()`. Emits a {Transfer} event._","title":"_transfer"},{"location":"warper/ERC721/ERC721Warper/#_exists","text":"function _exists(uint256 tokenId) internal view returns (bool) _Returns whether `tokenId` exists. Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}. Tokens start existing when they are minted (` mint`), and stop existing when they are burned (`_burn`).","title":"_exists"},{"location":"warper/ERC721/ERC721Warper/#_warpercontroller","text":"function _warperController() internal view returns (contract IERC721WarperController) Get the associated warper controller.","title":"_warperController"},{"location":"warper/ERC721/ERC721Warper/#_checkonerc721received","text":"function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes data) private returns (bool) Internal function to invoke {IERC721Receiver-onERC721Received} on a target address. The call is not executed if the target address is not a contract. Name Type Description from address address representing the previous owner of the given token ID to address target address that will receive the tokens tokenId uint256 uint256 ID of the token to be transferred data bytes bytes optional data to send along with the call Name Type Description [0] bool bool whether the call correctly returned the expected magic value","title":"_checkOnERC721Received"},{"location":"warper/ERC721/ERC721Warper/#_getwarperrentalstatus","text":"function _getWarperRentalStatus(uint256 tokenId) private view returns (enum Rentings.RentalStatus) Get the rental status of a token.","title":"_getWarperRentalStatus"},{"location":"warper/ERC721/ERC721WarperController/","text":"ERC721WarperController warp function warp(struct Assets.Asset asset, address warper, address to) external returns (bytes32 warpedCollectionId, struct Assets.Asset warpedAsset) Needs to be called with `delegatecall` from Metahub, otherwise warpers will reject the call. Name Type Description asset struct Assets.Asset The asset that must be warped. warper address Warper contract to used for warping. to address The account which will receive the warped asset. Name Type Description warpedCollectionId bytes32 Warped collection ID. warpedAsset struct Assets.Asset Warper asset structure. executeRentingHooks function executeRentingHooks(uint256 rentalId, struct Rentings.Agreement rentalAgreement, struct Accounts.RentalEarnings rentalEarnings) external Executes warper rental hook. Name Type Description rentalId uint256 Rental agreement ID. rentalAgreement struct Rentings.Agreement Newly registered rental agreement details. rentalEarnings struct Accounts.RentalEarnings The rental earnings breakdown. checkCompatibleWarper function checkCompatibleWarper(address warper) external view Reverts if provided warper is not compatible with the controller. validateRentingParams function validateRentingParams(struct Assets.Asset asset, struct Rentings.Params rentingParams) external view Validates renting params taking into account various warper mechanics. Throws an error if the specified asset cannot be rented with particular renting parameters. Name Type Description asset struct Assets.Asset Asset being rented. rentingParams struct Rentings.Params Renting parameters. calculatePremiums function calculatePremiums(struct Assets.Asset asset, struct Rentings.Params rentingParams, uint256 universeFee, uint256 listerFee) external view virtual returns (uint256 universePremium, uint256 listerPremium) Calculates the universe and/or lister premiums. Those are extra amounts that should be added the the resulting rental fee paid by renter. Name Type Description asset struct Assets.Asset Asset being rented. rentingParams struct Rentings.Params Renting parameters. universeFee uint256 The current value of the universe fee component. listerFee uint256 The current value of the lister fee component. Name Type Description universePremium uint256 The universe premium amount. listerPremium uint256 The lister premium amount. rentalBalance function rentalBalance(address metahub, address warper, address renter) external view returns (uint256) Get the active rental balance for a given warper and a renter. Used in Warper->Metahub communication. Name Type Description metahub address Address of the metahub. warper address Address of the warper. renter address Address of the renter whose active rental counts we need to fetch. supportsInterface function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._ isCompatibleWarper function isCompatibleWarper(address warper) public view returns (bool) Validates that the warper interface is supported by the current WarperController. Name Type Description warper address Warper whose interface we must validate. Name Type Description [0] bool bool - `true` if warper is supported. rentalStatus function rentalStatus(address metahub, address warper, uint256 tokenId) public view returns (enum Rentings.RentalStatus) Get the rental status of a specific token. Used in Warper->Metahub communication. Name Type Description metahub address Address of the metahub. warper address Address of the warper. tokenId uint256 The token ID to be checked for status.","title":"ERC721WarperController"},{"location":"warper/ERC721/ERC721WarperController/#erc721warpercontroller","text":"","title":"ERC721WarperController"},{"location":"warper/ERC721/ERC721WarperController/#warp","text":"function warp(struct Assets.Asset asset, address warper, address to) external returns (bytes32 warpedCollectionId, struct Assets.Asset warpedAsset) Needs to be called with `delegatecall` from Metahub, otherwise warpers will reject the call. Name Type Description asset struct Assets.Asset The asset that must be warped. warper address Warper contract to used for warping. to address The account which will receive the warped asset. Name Type Description warpedCollectionId bytes32 Warped collection ID. warpedAsset struct Assets.Asset Warper asset structure.","title":"warp"},{"location":"warper/ERC721/ERC721WarperController/#executerentinghooks","text":"function executeRentingHooks(uint256 rentalId, struct Rentings.Agreement rentalAgreement, struct Accounts.RentalEarnings rentalEarnings) external Executes warper rental hook. Name Type Description rentalId uint256 Rental agreement ID. rentalAgreement struct Rentings.Agreement Newly registered rental agreement details. rentalEarnings struct Accounts.RentalEarnings The rental earnings breakdown.","title":"executeRentingHooks"},{"location":"warper/ERC721/ERC721WarperController/#checkcompatiblewarper","text":"function checkCompatibleWarper(address warper) external view Reverts if provided warper is not compatible with the controller.","title":"checkCompatibleWarper"},{"location":"warper/ERC721/ERC721WarperController/#validaterentingparams","text":"function validateRentingParams(struct Assets.Asset asset, struct Rentings.Params rentingParams) external view Validates renting params taking into account various warper mechanics. Throws an error if the specified asset cannot be rented with particular renting parameters. Name Type Description asset struct Assets.Asset Asset being rented. rentingParams struct Rentings.Params Renting parameters.","title":"validateRentingParams"},{"location":"warper/ERC721/ERC721WarperController/#calculatepremiums","text":"function calculatePremiums(struct Assets.Asset asset, struct Rentings.Params rentingParams, uint256 universeFee, uint256 listerFee) external view virtual returns (uint256 universePremium, uint256 listerPremium) Calculates the universe and/or lister premiums. Those are extra amounts that should be added the the resulting rental fee paid by renter. Name Type Description asset struct Assets.Asset Asset being rented. rentingParams struct Rentings.Params Renting parameters. universeFee uint256 The current value of the universe fee component. listerFee uint256 The current value of the lister fee component. Name Type Description universePremium uint256 The universe premium amount. listerPremium uint256 The lister premium amount.","title":"calculatePremiums"},{"location":"warper/ERC721/ERC721WarperController/#rentalbalance","text":"function rentalBalance(address metahub, address warper, address renter) external view returns (uint256) Get the active rental balance for a given warper and a renter. Used in Warper->Metahub communication. Name Type Description metahub address Address of the metahub. warper address Address of the warper. renter address Address of the renter whose active rental counts we need to fetch.","title":"rentalBalance"},{"location":"warper/ERC721/ERC721WarperController/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._","title":"supportsInterface"},{"location":"warper/ERC721/ERC721WarperController/#iscompatiblewarper","text":"function isCompatibleWarper(address warper) public view returns (bool) Validates that the warper interface is supported by the current WarperController. Name Type Description warper address Warper whose interface we must validate. Name Type Description [0] bool bool - `true` if warper is supported.","title":"isCompatibleWarper"},{"location":"warper/ERC721/ERC721WarperController/#rentalstatus","text":"function rentalStatus(address metahub, address warper, uint256 tokenId) public view returns (enum Rentings.RentalStatus) Get the rental status of a specific token. Used in Warper->Metahub communication. Name Type Description metahub address Address of the metahub. warper address Address of the warper. tokenId uint256 The token ID to be checked for status.","title":"rentalStatus"},{"location":"warper/ERC721/IERC721Warper/","text":"IERC721Warper BalanceQueryForZeroAddress error BalanceQueryForZeroAddress() Thrown when querying token balance for address(0) OwnerQueryForNonexistentToken error OwnerQueryForNonexistentToken(uint256 tokenId) Thrown when querying for the owner of a token that has not been minted yet. OperatorQueryForNonexistentToken error OperatorQueryForNonexistentToken(uint256 tokenId) Thrown when querying for the operator of a token that has not been minted yet. TransferToNonERC721ReceiverImplementer error TransferToNonERC721ReceiverImplementer(address to) Thrown when attempting to safeTransfer to a contract that cannot handle ERC721 tokens. MintToTheZeroAddress error MintToTheZeroAddress() Thrown when minting to the address(0). TokenIsAlreadyMinted error TokenIsAlreadyMinted(uint256 tokenId) Thrown when minting a token that already exists. TransferToTheZeroAddress error TransferToTheZeroAddress() Thrown transferring a token to the address(0). MethodNotAllowed error MethodNotAllowed() Thrown when calling a method that has been purposely disabled. mint function mint(address to, uint256 tokenId, bytes data) external Mint new tokens. Name Type Description to address The address to mint the token to. tokenId uint256 The ID of the token to mint. data bytes The data to send over to the receiver if it supports `onERC721Received` hook.","title":"IERC721Warper"},{"location":"warper/ERC721/IERC721Warper/#ierc721warper","text":"","title":"IERC721Warper"},{"location":"warper/ERC721/IERC721Warper/#balancequeryforzeroaddress","text":"error BalanceQueryForZeroAddress() Thrown when querying token balance for address(0)","title":"BalanceQueryForZeroAddress"},{"location":"warper/ERC721/IERC721Warper/#ownerqueryfornonexistenttoken","text":"error OwnerQueryForNonexistentToken(uint256 tokenId) Thrown when querying for the owner of a token that has not been minted yet.","title":"OwnerQueryForNonexistentToken"},{"location":"warper/ERC721/IERC721Warper/#operatorqueryfornonexistenttoken","text":"error OperatorQueryForNonexistentToken(uint256 tokenId) Thrown when querying for the operator of a token that has not been minted yet.","title":"OperatorQueryForNonexistentToken"},{"location":"warper/ERC721/IERC721Warper/#transfertononerc721receiverimplementer","text":"error TransferToNonERC721ReceiverImplementer(address to) Thrown when attempting to safeTransfer to a contract that cannot handle ERC721 tokens.","title":"TransferToNonERC721ReceiverImplementer"},{"location":"warper/ERC721/IERC721Warper/#minttothezeroaddress","text":"error MintToTheZeroAddress() Thrown when minting to the address(0).","title":"MintToTheZeroAddress"},{"location":"warper/ERC721/IERC721Warper/#tokenisalreadyminted","text":"error TokenIsAlreadyMinted(uint256 tokenId) Thrown when minting a token that already exists.","title":"TokenIsAlreadyMinted"},{"location":"warper/ERC721/IERC721Warper/#transfertothezeroaddress","text":"error TransferToTheZeroAddress() Thrown transferring a token to the address(0).","title":"TransferToTheZeroAddress"},{"location":"warper/ERC721/IERC721Warper/#methodnotallowed","text":"error MethodNotAllowed() Thrown when calling a method that has been purposely disabled.","title":"MethodNotAllowed"},{"location":"warper/ERC721/IERC721Warper/#mint","text":"function mint(address to, uint256 tokenId, bytes data) external Mint new tokens. Name Type Description to address The address to mint the token to. tokenId uint256 The ID of the token to mint. data bytes The data to send over to the receiver if it supports `onERC721Received` hook.","title":"mint"},{"location":"warper/ERC721/IERC721WarperController/","text":"IERC721WarperController rentalBalance function rentalBalance(address metahub, address warper, address renter) external view returns (uint256) Get the active rental balance for a given warper and a renter. Used in Warper->Metahub communication. Name Type Description metahub address Address of the metahub. warper address Address of the warper. renter address Address of the renter whose active rental counts we need to fetch. rentalStatus function rentalStatus(address metahub, address warper, uint256 tokenId) external view returns (enum Rentings.RentalStatus) Get the rental status of a specific token. Used in Warper->Metahub communication. Name Type Description metahub address Address of the metahub. warper address Address of the warper. tokenId uint256 The token ID to be checked for status.","title":"IERC721WarperController"},{"location":"warper/ERC721/IERC721WarperController/#ierc721warpercontroller","text":"","title":"IERC721WarperController"},{"location":"warper/ERC721/IERC721WarperController/#rentalbalance","text":"function rentalBalance(address metahub, address warper, address renter) external view returns (uint256) Get the active rental balance for a given warper and a renter. Used in Warper->Metahub communication. Name Type Description metahub address Address of the metahub. warper address Address of the warper. renter address Address of the renter whose active rental counts we need to fetch.","title":"rentalBalance"},{"location":"warper/ERC721/IERC721WarperController/#rentalstatus","text":"function rentalStatus(address metahub, address warper, uint256 tokenId) external view returns (enum Rentings.RentalStatus) Get the rental status of a specific token. Used in Warper->Metahub communication. Name Type Description metahub address Address of the metahub. warper address Address of the warper. tokenId uint256 The token ID to be checked for status.","title":"rentalStatus"},{"location":"warper/ERC721/presets/ERC721PresetConfigurable/","text":"ERC721PresetConfigurable __initialize function __initialize(bytes config) public virtual Warper generic initialization method. Name Type Description config bytes Warper configuration parameters. supportsInterface function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._ _validateOriginal function _validateOriginal(address original) internal virtual Validates the original NFT.","title":"ERC721PresetConfigurable"},{"location":"warper/ERC721/presets/ERC721PresetConfigurable/#erc721presetconfigurable","text":"","title":"ERC721PresetConfigurable"},{"location":"warper/ERC721/presets/ERC721PresetConfigurable/#__initialize","text":"function __initialize(bytes config) public virtual Warper generic initialization method. Name Type Description config bytes Warper configuration parameters.","title":"__initialize"},{"location":"warper/ERC721/presets/ERC721PresetConfigurable/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) _Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas._","title":"supportsInterface"},{"location":"warper/ERC721/presets/ERC721PresetConfigurable/#_validateoriginal","text":"function _validateOriginal(address original) internal virtual Validates the original NFT.","title":"_validateOriginal"},{"location":"warper/mechanics/asset-rentability/IAssetRentabilityMechanics/","text":"IAssetRentabilityMechanics AssetIsNotRentable error AssetIsNotRentable(string reason) Thrown when the asset renting is rejected by warper due to the `reason`. __isRentableAsset function __isRentableAsset(address renter, uint256 tokenId, uint256 amount) external view returns (bool isRentable, string errorMessage) Returns information if an asset is rentable. Name Type Description renter address The address of the renter. tokenId uint256 The token ID. amount uint256 The token amount. Name Type Description isRentable bool True if asset is rentable. errorMessage string The reason of the asset not being rentable.","title":"IAssetRentabilityMechanics"},{"location":"warper/mechanics/asset-rentability/IAssetRentabilityMechanics/#iassetrentabilitymechanics","text":"","title":"IAssetRentabilityMechanics"},{"location":"warper/mechanics/asset-rentability/IAssetRentabilityMechanics/#assetisnotrentable","text":"error AssetIsNotRentable(string reason) Thrown when the asset renting is rejected by warper due to the `reason`.","title":"AssetIsNotRentable"},{"location":"warper/mechanics/asset-rentability/IAssetRentabilityMechanics/#__isrentableasset","text":"function __isRentableAsset(address renter, uint256 tokenId, uint256 amount) external view returns (bool isRentable, string errorMessage) Returns information if an asset is rentable. Name Type Description renter address The address of the renter. tokenId uint256 The token ID. amount uint256 The token amount. Name Type Description isRentable bool True if asset is rentable. errorMessage string The reason of the asset not being rentable.","title":"__isRentableAsset"},{"location":"warper/mechanics/availability-period/ConfigurableAvailabilityPeriodExtension/","text":"ConfigurableAvailabilityPeriodExtension _AVAILABILITY_PERIOD_SLOT bytes32 _AVAILABILITY_PERIOD_SLOT Warper availability period. _MAX_PERIOD_MASK uint256 _MAX_PERIOD_MASK _MIN_PERIOD_MASK uint256 _MIN_PERIOD_MASK _MAX_PERIOD_BITSHIFT uint256 _MAX_PERIOD_BITSHIFT _MIN_PERIOD_BITSHIFT uint256 _MIN_PERIOD_BITSHIFT _ConfigurableAvailabilityPeriodExtension_init function _ConfigurableAvailabilityPeriodExtension_init() internal Extension initializer. __setAvailabilityPeriodStart function __setAvailabilityPeriodStart(uint32 availabilityPeriodStart) external virtual Sets warper availability period starting time. Name Type Description availabilityPeriodStart uint32 Unix timestamp after which the warper is rentable. __setAvailabilityPeriodEnd function __setAvailabilityPeriodEnd(uint32 availabilityPeriodEnd) external virtual Sets warper availability period ending time. Name Type Description availabilityPeriodEnd uint32 Unix timestamp after which the warper is NOT rentable. __availabilityPeriodStart function __availabilityPeriodStart() external view virtual returns (uint32) Returns warper availability period starting time. Name Type Description [0] uint32 Unix timestamp after which the warper is rentable. __availabilityPeriodEnd function __availabilityPeriodEnd() external view virtual returns (uint32) Returns warper availability period ending time. Name Type Description [0] uint32 Unix timestamp after which the warper is NOT rentable. __availabilityPeriodRange function __availabilityPeriodRange() external view virtual returns (uint32 availabilityPeriodStart, uint32 availabilityPeriodEnd) Returns warper availability period. Name Type Description availabilityPeriodStart uint32 Unix timestamp after which the warper is rentable. availabilityPeriodEnd uint32 Unix timestamp after which the warper is NOT rentable. supportsInterface function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) _setAvailabilityPeriods function _setAvailabilityPeriods(uint32 availabilityPeriodStart, uint32 availabilityPeriodEnd) internal Stores warper availability period. _availabilityPeriods function _availabilityPeriods() internal view returns (uint32 availabilityPeriodStart, uint32 availabilityPeriodEnd) Returns warper availability period.","title":"ConfigurableAvailabilityPeriodExtension"},{"location":"warper/mechanics/availability-period/ConfigurableAvailabilityPeriodExtension/#configurableavailabilityperiodextension","text":"","title":"ConfigurableAvailabilityPeriodExtension"},{"location":"warper/mechanics/availability-period/ConfigurableAvailabilityPeriodExtension/#_availability_period_slot","text":"bytes32 _AVAILABILITY_PERIOD_SLOT Warper availability period.","title":"_AVAILABILITY_PERIOD_SLOT"},{"location":"warper/mechanics/availability-period/ConfigurableAvailabilityPeriodExtension/#_max_period_mask","text":"uint256 _MAX_PERIOD_MASK","title":"_MAX_PERIOD_MASK"},{"location":"warper/mechanics/availability-period/ConfigurableAvailabilityPeriodExtension/#_min_period_mask","text":"uint256 _MIN_PERIOD_MASK","title":"_MIN_PERIOD_MASK"},{"location":"warper/mechanics/availability-period/ConfigurableAvailabilityPeriodExtension/#_max_period_bitshift","text":"uint256 _MAX_PERIOD_BITSHIFT","title":"_MAX_PERIOD_BITSHIFT"},{"location":"warper/mechanics/availability-period/ConfigurableAvailabilityPeriodExtension/#_min_period_bitshift","text":"uint256 _MIN_PERIOD_BITSHIFT","title":"_MIN_PERIOD_BITSHIFT"},{"location":"warper/mechanics/availability-period/ConfigurableAvailabilityPeriodExtension/#_configurableavailabilityperiodextension_init","text":"function _ConfigurableAvailabilityPeriodExtension_init() internal Extension initializer.","title":"_ConfigurableAvailabilityPeriodExtension_init"},{"location":"warper/mechanics/availability-period/ConfigurableAvailabilityPeriodExtension/#__setavailabilityperiodstart","text":"function __setAvailabilityPeriodStart(uint32 availabilityPeriodStart) external virtual Sets warper availability period starting time. Name Type Description availabilityPeriodStart uint32 Unix timestamp after which the warper is rentable.","title":"__setAvailabilityPeriodStart"},{"location":"warper/mechanics/availability-period/ConfigurableAvailabilityPeriodExtension/#__setavailabilityperiodend","text":"function __setAvailabilityPeriodEnd(uint32 availabilityPeriodEnd) external virtual Sets warper availability period ending time. Name Type Description availabilityPeriodEnd uint32 Unix timestamp after which the warper is NOT rentable.","title":"__setAvailabilityPeriodEnd"},{"location":"warper/mechanics/availability-period/ConfigurableAvailabilityPeriodExtension/#__availabilityperiodstart","text":"function __availabilityPeriodStart() external view virtual returns (uint32) Returns warper availability period starting time. Name Type Description [0] uint32 Unix timestamp after which the warper is rentable.","title":"__availabilityPeriodStart"},{"location":"warper/mechanics/availability-period/ConfigurableAvailabilityPeriodExtension/#__availabilityperiodend","text":"function __availabilityPeriodEnd() external view virtual returns (uint32) Returns warper availability period ending time. Name Type Description [0] uint32 Unix timestamp after which the warper is NOT rentable.","title":"__availabilityPeriodEnd"},{"location":"warper/mechanics/availability-period/ConfigurableAvailabilityPeriodExtension/#__availabilityperiodrange","text":"function __availabilityPeriodRange() external view virtual returns (uint32 availabilityPeriodStart, uint32 availabilityPeriodEnd) Returns warper availability period. Name Type Description availabilityPeriodStart uint32 Unix timestamp after which the warper is rentable. availabilityPeriodEnd uint32 Unix timestamp after which the warper is NOT rentable.","title":"__availabilityPeriodRange"},{"location":"warper/mechanics/availability-period/ConfigurableAvailabilityPeriodExtension/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) public view virtual returns (bool)","title":"supportsInterface"},{"location":"warper/mechanics/availability-period/ConfigurableAvailabilityPeriodExtension/#_setavailabilityperiods","text":"function _setAvailabilityPeriods(uint32 availabilityPeriodStart, uint32 availabilityPeriodEnd) internal Stores warper availability period.","title":"_setAvailabilityPeriods"},{"location":"warper/mechanics/availability-period/ConfigurableAvailabilityPeriodExtension/#_availabilityperiods","text":"function _availabilityPeriods() internal view returns (uint32 availabilityPeriodStart, uint32 availabilityPeriodEnd) Returns warper availability period.","title":"_availabilityPeriods"},{"location":"warper/mechanics/availability-period/IAvailabilityPeriodMechanics/","text":"IAvailabilityPeriodMechanics WarperIsNotAvailableForRenting error WarperIsNotAvailableForRenting(uint256 currentTime, uint32 availabilityPeriodStart, uint32 availabilityPeriodEnd) Thrown when the current time is not withing the warper availability period. __availabilityPeriodStart function __availabilityPeriodStart() external view returns (uint32) Returns warper availability period starting time. Name Type Description [0] uint32 Unix timestamp after which the warper is rentable. __availabilityPeriodEnd function __availabilityPeriodEnd() external view returns (uint32) Returns warper availability period ending time. Name Type Description [0] uint32 Unix timestamp after which the warper is NOT rentable. __availabilityPeriodRange function __availabilityPeriodRange() external view returns (uint32 availabilityPeriodStart, uint32 availabilityPeriodEnd) Returns warper availability period. Name Type Description availabilityPeriodStart uint32 Unix timestamp after which the warper is rentable. availabilityPeriodEnd uint32 Unix timestamp after which the warper is NOT rentable.","title":"IAvailabilityPeriodMechanics"},{"location":"warper/mechanics/availability-period/IAvailabilityPeriodMechanics/#iavailabilityperiodmechanics","text":"","title":"IAvailabilityPeriodMechanics"},{"location":"warper/mechanics/availability-period/IAvailabilityPeriodMechanics/#warperisnotavailableforrenting","text":"error WarperIsNotAvailableForRenting(uint256 currentTime, uint32 availabilityPeriodStart, uint32 availabilityPeriodEnd) Thrown when the current time is not withing the warper availability period.","title":"WarperIsNotAvailableForRenting"},{"location":"warper/mechanics/availability-period/IAvailabilityPeriodMechanics/#__availabilityperiodstart","text":"function __availabilityPeriodStart() external view returns (uint32) Returns warper availability period starting time. Name Type Description [0] uint32 Unix timestamp after which the warper is rentable.","title":"__availabilityPeriodStart"},{"location":"warper/mechanics/availability-period/IAvailabilityPeriodMechanics/#__availabilityperiodend","text":"function __availabilityPeriodEnd() external view returns (uint32) Returns warper availability period ending time. Name Type Description [0] uint32 Unix timestamp after which the warper is NOT rentable.","title":"__availabilityPeriodEnd"},{"location":"warper/mechanics/availability-period/IAvailabilityPeriodMechanics/#__availabilityperiodrange","text":"function __availabilityPeriodRange() external view returns (uint32 availabilityPeriodStart, uint32 availabilityPeriodEnd) Returns warper availability period. Name Type Description availabilityPeriodStart uint32 Unix timestamp after which the warper is rentable. availabilityPeriodEnd uint32 Unix timestamp after which the warper is NOT rentable.","title":"__availabilityPeriodRange"},{"location":"warper/mechanics/availability-period/IConfigurableAvailabilityPeriodExtension/","text":"IConfigurableAvailabilityPeriodExtension InvalidAvailabilityPeriodStart error InvalidAvailabilityPeriodStart() Thrown when the availability period start time is not strictly lesser than the end time InvalidAvailabilityPeriodEnd error InvalidAvailabilityPeriodEnd() Thrown when the availability period end time is not greater or equal than the start time __setAvailabilityPeriodStart function __setAvailabilityPeriodStart(uint32 availabilityPeriodStart) external Sets warper availability period starting time. Name Type Description availabilityPeriodStart uint32 Unix timestamp after which the warper is rentable. __setAvailabilityPeriodEnd function __setAvailabilityPeriodEnd(uint32 availabilityPeriodEnd) external Sets warper availability period ending time. Name Type Description availabilityPeriodEnd uint32 Unix timestamp after which the warper is NOT rentable.","title":"IConfigurableAvailabilityPeriodExtension"},{"location":"warper/mechanics/availability-period/IConfigurableAvailabilityPeriodExtension/#iconfigurableavailabilityperiodextension","text":"","title":"IConfigurableAvailabilityPeriodExtension"},{"location":"warper/mechanics/availability-period/IConfigurableAvailabilityPeriodExtension/#invalidavailabilityperiodstart","text":"error InvalidAvailabilityPeriodStart() Thrown when the availability period start time is not strictly lesser than the end time","title":"InvalidAvailabilityPeriodStart"},{"location":"warper/mechanics/availability-period/IConfigurableAvailabilityPeriodExtension/#invalidavailabilityperiodend","text":"error InvalidAvailabilityPeriodEnd() Thrown when the availability period end time is not greater or equal than the start time","title":"InvalidAvailabilityPeriodEnd"},{"location":"warper/mechanics/availability-period/IConfigurableAvailabilityPeriodExtension/#__setavailabilityperiodstart","text":"function __setAvailabilityPeriodStart(uint32 availabilityPeriodStart) external Sets warper availability period starting time. Name Type Description availabilityPeriodStart uint32 Unix timestamp after which the warper is rentable.","title":"__setAvailabilityPeriodStart"},{"location":"warper/mechanics/availability-period/IConfigurableAvailabilityPeriodExtension/#__setavailabilityperiodend","text":"function __setAvailabilityPeriodEnd(uint32 availabilityPeriodEnd) external Sets warper availability period ending time. Name Type Description availabilityPeriodEnd uint32 Unix timestamp after which the warper is NOT rentable.","title":"__setAvailabilityPeriodEnd"},{"location":"warper/mechanics/rental-fee-premium/IRentalFeePremiumMechanics/","text":"IRentalFeePremiumMechanics __calculatePremiums function __calculatePremiums(address renter, uint256 tokenId, uint256 amount, uint32 rentalPeriod, uint256 universeFee, uint256 listerFee) external view returns (uint256 universePremium, uint256 listerPremium) Calculate extra premiums. Name Type Description renter address The renter address. tokenId uint256 The token ID to calculate the extra premium for. amount uint256 The token amount. rentalPeriod uint32 The rental period in seconds. universeFee uint256 The current universe fee. listerFee uint256 The current lister fee. Name Type Description universePremium uint256 The universe premium price to add. listerPremium uint256 The lister premium price to add.","title":"IRentalFeePremiumMechanics"},{"location":"warper/mechanics/rental-fee-premium/IRentalFeePremiumMechanics/#irentalfeepremiummechanics","text":"","title":"IRentalFeePremiumMechanics"},{"location":"warper/mechanics/rental-fee-premium/IRentalFeePremiumMechanics/#__calculatepremiums","text":"function __calculatePremiums(address renter, uint256 tokenId, uint256 amount, uint32 rentalPeriod, uint256 universeFee, uint256 listerFee) external view returns (uint256 universePremium, uint256 listerPremium) Calculate extra premiums. Name Type Description renter address The renter address. tokenId uint256 The token ID to calculate the extra premium for. amount uint256 The token amount. rentalPeriod uint32 The rental period in seconds. universeFee uint256 The current universe fee. listerFee uint256 The current lister fee. Name Type Description universePremium uint256 The universe premium price to add. listerPremium uint256 The lister premium price to add.","title":"__calculatePremiums"},{"location":"warper/mechanics/rental-period/ConfigurableRentalPeriodExtension/","text":"ConfigurableRentalPeriodExtension _RENTAL_PERIOD_SLOT bytes32 _RENTAL_PERIOD_SLOT Warper rental period. It contains both - the min and max values (uint32) - in a concatenated form. _MAX_PERIOD_MASK uint256 _MAX_PERIOD_MASK _MIN_PERIOD_MASK uint256 _MIN_PERIOD_MASK _MAX_PERIOD_BITSHIFT uint256 _MAX_PERIOD_BITSHIFT _MIN_PERIOD_BITSHIFT uint256 _MIN_PERIOD_BITSHIFT _ConfigurableRentalPeriodExtension_init function _ConfigurableRentalPeriodExtension_init() internal Extension initializer. supportsInterface function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) __setMinRentalPeriod function __setMinRentalPeriod(uint32 minRentalPeriod) external virtual Sets warper min rental period. Name Type Description minRentalPeriod uint32 New min rental period value. __setMaxRentalPeriod function __setMaxRentalPeriod(uint32 maxRentalPeriod) external virtual Sets warper max rental period. Name Type Description maxRentalPeriod uint32 New max rental period value. __minRentalPeriod function __minRentalPeriod() external view virtual returns (uint32) Returns warper minimal rental period. Name Type Description [0] uint32 Time is seconds. __maxRentalPeriod function __maxRentalPeriod() external view virtual returns (uint32) Returns warper maximal rental period. Name Type Description [0] uint32 Time is seconds. __rentalPeriodRange function __rentalPeriodRange() external view returns (uint32 minRentalPeriod, uint32 maxRentalPeriod) Returns warper rental period range. Name Type Description minRentalPeriod uint32 The minimal amount of time the warper can be rented for. maxRentalPeriod uint32 The maximal amount of time the warper can be rented for. _setRentalPeriods function _setRentalPeriods(uint32 minRentalPeriod, uint32 maxRentalPeriod) internal Stores warper rental period. _rentalPeriods function _rentalPeriods() internal view returns (uint32 minRentalPeriod, uint32 maxRentalPeriod) Returns warper rental periods.","title":"ConfigurableRentalPeriodExtension"},{"location":"warper/mechanics/rental-period/ConfigurableRentalPeriodExtension/#configurablerentalperiodextension","text":"","title":"ConfigurableRentalPeriodExtension"},{"location":"warper/mechanics/rental-period/ConfigurableRentalPeriodExtension/#_rental_period_slot","text":"bytes32 _RENTAL_PERIOD_SLOT Warper rental period. It contains both - the min and max values (uint32) - in a concatenated form.","title":"_RENTAL_PERIOD_SLOT"},{"location":"warper/mechanics/rental-period/ConfigurableRentalPeriodExtension/#_max_period_mask","text":"uint256 _MAX_PERIOD_MASK","title":"_MAX_PERIOD_MASK"},{"location":"warper/mechanics/rental-period/ConfigurableRentalPeriodExtension/#_min_period_mask","text":"uint256 _MIN_PERIOD_MASK","title":"_MIN_PERIOD_MASK"},{"location":"warper/mechanics/rental-period/ConfigurableRentalPeriodExtension/#_max_period_bitshift","text":"uint256 _MAX_PERIOD_BITSHIFT","title":"_MAX_PERIOD_BITSHIFT"},{"location":"warper/mechanics/rental-period/ConfigurableRentalPeriodExtension/#_min_period_bitshift","text":"uint256 _MIN_PERIOD_BITSHIFT","title":"_MIN_PERIOD_BITSHIFT"},{"location":"warper/mechanics/rental-period/ConfigurableRentalPeriodExtension/#_configurablerentalperiodextension_init","text":"function _ConfigurableRentalPeriodExtension_init() internal Extension initializer.","title":"_ConfigurableRentalPeriodExtension_init"},{"location":"warper/mechanics/rental-period/ConfigurableRentalPeriodExtension/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) public view virtual returns (bool)","title":"supportsInterface"},{"location":"warper/mechanics/rental-period/ConfigurableRentalPeriodExtension/#__setminrentalperiod","text":"function __setMinRentalPeriod(uint32 minRentalPeriod) external virtual Sets warper min rental period. Name Type Description minRentalPeriod uint32 New min rental period value.","title":"__setMinRentalPeriod"},{"location":"warper/mechanics/rental-period/ConfigurableRentalPeriodExtension/#__setmaxrentalperiod","text":"function __setMaxRentalPeriod(uint32 maxRentalPeriod) external virtual Sets warper max rental period. Name Type Description maxRentalPeriod uint32 New max rental period value.","title":"__setMaxRentalPeriod"},{"location":"warper/mechanics/rental-period/ConfigurableRentalPeriodExtension/#__minrentalperiod","text":"function __minRentalPeriod() external view virtual returns (uint32) Returns warper minimal rental period. Name Type Description [0] uint32 Time is seconds.","title":"__minRentalPeriod"},{"location":"warper/mechanics/rental-period/ConfigurableRentalPeriodExtension/#__maxrentalperiod","text":"function __maxRentalPeriod() external view virtual returns (uint32) Returns warper maximal rental period. Name Type Description [0] uint32 Time is seconds.","title":"__maxRentalPeriod"},{"location":"warper/mechanics/rental-period/ConfigurableRentalPeriodExtension/#__rentalperiodrange","text":"function __rentalPeriodRange() external view returns (uint32 minRentalPeriod, uint32 maxRentalPeriod) Returns warper rental period range. Name Type Description minRentalPeriod uint32 The minimal amount of time the warper can be rented for. maxRentalPeriod uint32 The maximal amount of time the warper can be rented for.","title":"__rentalPeriodRange"},{"location":"warper/mechanics/rental-period/ConfigurableRentalPeriodExtension/#_setrentalperiods","text":"function _setRentalPeriods(uint32 minRentalPeriod, uint32 maxRentalPeriod) internal Stores warper rental period.","title":"_setRentalPeriods"},{"location":"warper/mechanics/rental-period/ConfigurableRentalPeriodExtension/#_rentalperiods","text":"function _rentalPeriods() internal view returns (uint32 minRentalPeriod, uint32 maxRentalPeriod) Returns warper rental periods.","title":"_rentalPeriods"},{"location":"warper/mechanics/rental-period/IConfigurableRentalPeriodExtension/","text":"IConfigurableRentalPeriodExtension InvalidMinRentalPeriod error InvalidMinRentalPeriod() Thrown when the the min rental period is not strictly lesser than max rental period InvalidMaxRentalPeriod error InvalidMaxRentalPeriod() Thrown when the max rental period is not greater or equal than min rental period __setMinRentalPeriod function __setMinRentalPeriod(uint32 minRentalPeriod) external Sets warper min rental period. Name Type Description minRentalPeriod uint32 New min rental period value. __setMaxRentalPeriod function __setMaxRentalPeriod(uint32 maxRentalPeriod) external Sets warper max rental period. Name Type Description maxRentalPeriod uint32 New max rental period value.","title":"IConfigurableRentalPeriodExtension"},{"location":"warper/mechanics/rental-period/IConfigurableRentalPeriodExtension/#iconfigurablerentalperiodextension","text":"","title":"IConfigurableRentalPeriodExtension"},{"location":"warper/mechanics/rental-period/IConfigurableRentalPeriodExtension/#invalidminrentalperiod","text":"error InvalidMinRentalPeriod() Thrown when the the min rental period is not strictly lesser than max rental period","title":"InvalidMinRentalPeriod"},{"location":"warper/mechanics/rental-period/IConfigurableRentalPeriodExtension/#invalidmaxrentalperiod","text":"error InvalidMaxRentalPeriod() Thrown when the max rental period is not greater or equal than min rental period","title":"InvalidMaxRentalPeriod"},{"location":"warper/mechanics/rental-period/IConfigurableRentalPeriodExtension/#__setminrentalperiod","text":"function __setMinRentalPeriod(uint32 minRentalPeriod) external Sets warper min rental period. Name Type Description minRentalPeriod uint32 New min rental period value.","title":"__setMinRentalPeriod"},{"location":"warper/mechanics/rental-period/IConfigurableRentalPeriodExtension/#__setmaxrentalperiod","text":"function __setMaxRentalPeriod(uint32 maxRentalPeriod) external Sets warper max rental period. Name Type Description maxRentalPeriod uint32 New max rental period value.","title":"__setMaxRentalPeriod"},{"location":"warper/mechanics/rental-period/IRentalPeriodMechanics/","text":"IRentalPeriodMechanics WarperRentalPeriodIsOutOfRange error WarperRentalPeriodIsOutOfRange(uint32 requestedRentalPeriod, uint32 minRentalPeriod, uint32 maxRentalPeriod) Thrown when the requested rental period is not withing the warper allowed rental period range. __minRentalPeriod function __minRentalPeriod() external view returns (uint32) Returns warper minimal rental period. Name Type Description [0] uint32 Time is seconds. __maxRentalPeriod function __maxRentalPeriod() external view returns (uint32) Returns warper maximal rental period. Name Type Description [0] uint32 Time is seconds. __rentalPeriodRange function __rentalPeriodRange() external view returns (uint32 minRentalPeriod, uint32 maxRentalPeriod) Returns warper rental period range. Name Type Description minRentalPeriod uint32 The minimal amount of time the warper can be rented for. maxRentalPeriod uint32 The maximal amount of time the warper can be rented for.","title":"IRentalPeriodMechanics"},{"location":"warper/mechanics/rental-period/IRentalPeriodMechanics/#irentalperiodmechanics","text":"","title":"IRentalPeriodMechanics"},{"location":"warper/mechanics/rental-period/IRentalPeriodMechanics/#warperrentalperiodisoutofrange","text":"error WarperRentalPeriodIsOutOfRange(uint32 requestedRentalPeriod, uint32 minRentalPeriod, uint32 maxRentalPeriod) Thrown when the requested rental period is not withing the warper allowed rental period range.","title":"WarperRentalPeriodIsOutOfRange"},{"location":"warper/mechanics/rental-period/IRentalPeriodMechanics/#__minrentalperiod","text":"function __minRentalPeriod() external view returns (uint32) Returns warper minimal rental period. Name Type Description [0] uint32 Time is seconds.","title":"__minRentalPeriod"},{"location":"warper/mechanics/rental-period/IRentalPeriodMechanics/#__maxrentalperiod","text":"function __maxRentalPeriod() external view returns (uint32) Returns warper maximal rental period. Name Type Description [0] uint32 Time is seconds.","title":"__maxRentalPeriod"},{"location":"warper/mechanics/rental-period/IRentalPeriodMechanics/#__rentalperiodrange","text":"function __rentalPeriodRange() external view returns (uint32 minRentalPeriod, uint32 maxRentalPeriod) Returns warper rental period range. Name Type Description minRentalPeriod uint32 The minimal amount of time the warper can be rented for. maxRentalPeriod uint32 The maximal amount of time the warper can be rented for.","title":"__rentalPeriodRange"},{"location":"warper/mechanics/renting-hook/IRentingHookMechanics/","text":"IRentingHookMechanics RentingHookError error RentingHookError(string reason) Thrown when the renting hook execution failed due to the `reason`. __onRent function __onRent(uint256 rentalId, uint256 tokenId, uint256 amount, struct Rentings.Agreement rentalAgreement, struct Accounts.RentalEarnings rentalEarnings) external returns (bool success, string errorMessage) Executes arbitrary logic after successful renting. NOTE: This function should not revert directly and must set correct `success` value instead. Name Type Description rentalId uint256 Rental agreement ID. tokenId uint256 The token ID. amount uint256 The token amount. rentalAgreement struct Rentings.Agreement Newly registered rental agreement details. rentalEarnings struct Accounts.RentalEarnings The rental earnings breakdown. Name Type Description success bool True if hook was executed successfully. errorMessage string The reason of the hook execution failure.","title":"IRentingHookMechanics"},{"location":"warper/mechanics/renting-hook/IRentingHookMechanics/#irentinghookmechanics","text":"","title":"IRentingHookMechanics"},{"location":"warper/mechanics/renting-hook/IRentingHookMechanics/#rentinghookerror","text":"error RentingHookError(string reason) Thrown when the renting hook execution failed due to the `reason`.","title":"RentingHookError"},{"location":"warper/mechanics/renting-hook/IRentingHookMechanics/#__onrent","text":"function __onRent(uint256 rentalId, uint256 tokenId, uint256 amount, struct Rentings.Agreement rentalAgreement, struct Accounts.RentalEarnings rentalEarnings) external returns (bool success, string errorMessage) Executes arbitrary logic after successful renting. NOTE: This function should not revert directly and must set correct `success` value instead. Name Type Description rentalId uint256 Rental agreement ID. tokenId uint256 The token ID. amount uint256 The token amount. rentalAgreement struct Rentings.Agreement Newly registered rental agreement details. rentalEarnings struct Accounts.RentalEarnings The rental earnings breakdown. Name Type Description success bool True if hook was executed successfully. errorMessage string The reason of the hook execution failure.","title":"__onRent"},{"location":"warper/utils/CallForwarder/","text":"CallForwarder CallForwardToZeroAddress error CallForwardToZeroAddress() Thrown when a call is forwarded to a zero address. _forward function _forward(address target) internal Forwards the current call to `target`.","title":"CallForwarder"},{"location":"warper/utils/CallForwarder/#callforwarder","text":"","title":"CallForwarder"},{"location":"warper/utils/CallForwarder/#callforwardtozeroaddress","text":"error CallForwardToZeroAddress() Thrown when a call is forwarded to a zero address.","title":"CallForwardToZeroAddress"},{"location":"warper/utils/CallForwarder/#_forward","text":"function _forward(address target) internal Forwards the current call to `target`.","title":"_forward"},{"location":"warper/utils/InitializationContext/","text":"InitializationContext ContractIsAlreadyInitialized error ContractIsAlreadyInitialized() Thrown upon attempt to initialize a contract again. ContractIsNotInitializing error ContractIsNotInitializing() Thrown when a function is invoked outside of initialization transaction. _INITIALIZED_SLOT bytes32 _INITIALIZED_SLOT Indicates that the contract has been initialized. _INITIALIZING_SLOT bytes32 _INITIALIZING_SLOT Indicates that the contract is in the process of being initialized. warperInitializer modifier warperInitializer() Modifier to protect an initializer function from being invoked twice. onlyInitializingWarper modifier onlyInitializingWarper() Modifier to protect an initialization function so that it can only be invoked by functions with the {initializer} modifier, directly or indirectly. _isConstructor function _isConstructor() private view returns (bool)","title":"InitializationContext"},{"location":"warper/utils/InitializationContext/#initializationcontext","text":"","title":"InitializationContext"},{"location":"warper/utils/InitializationContext/#contractisalreadyinitialized","text":"error ContractIsAlreadyInitialized() Thrown upon attempt to initialize a contract again.","title":"ContractIsAlreadyInitialized"},{"location":"warper/utils/InitializationContext/#contractisnotinitializing","text":"error ContractIsNotInitializing() Thrown when a function is invoked outside of initialization transaction.","title":"ContractIsNotInitializing"},{"location":"warper/utils/InitializationContext/#_initialized_slot","text":"bytes32 _INITIALIZED_SLOT Indicates that the contract has been initialized.","title":"_INITIALIZED_SLOT"},{"location":"warper/utils/InitializationContext/#_initializing_slot","text":"bytes32 _INITIALIZING_SLOT Indicates that the contract is in the process of being initialized.","title":"_INITIALIZING_SLOT"},{"location":"warper/utils/InitializationContext/#warperinitializer","text":"modifier warperInitializer() Modifier to protect an initializer function from being invoked twice.","title":"warperInitializer"},{"location":"warper/utils/InitializationContext/#onlyinitializingwarper","text":"modifier onlyInitializingWarper() Modifier to protect an initialization function so that it can only be invoked by functions with the {initializer} modifier, directly or indirectly.","title":"onlyInitializingWarper"},{"location":"warper/utils/InitializationContext/#_isconstructor","text":"function _isConstructor() private view returns (bool)","title":"_isConstructor"},{"location":"warper/utils/WarperContext/","text":"WarperContext CallerIsNotMetahub error CallerIsNotMetahub() Thrown when the message sender doesn't match the Metahub address. CallerIsNotWarperAdmin error CallerIsNotWarperAdmin() Thrown when the message sender doesn't match the warper admin address. _METAHUB_SLOT bytes32 _METAHUB_SLOT Metahub address slot. _ORIGINAL_SLOT bytes32 _ORIGINAL_SLOT Original asset address slot. onlyMetahub modifier onlyMetahub() Modifier to make a function callable only by the metahub contract. onlyWarperAdmin modifier onlyWarperAdmin() Modifier to make a function callable only by the warper admin. _setOriginal function _setOriginal(address original) internal Sets warper original asset address. _setMetahub function _setMetahub(address metahub) internal Sets warper metahub address. _original function _original() internal view returns (address) Returns warper original asset address. _metahub function _metahub() internal view returns (address) warper metahub address.","title":"WarperContext"},{"location":"warper/utils/WarperContext/#warpercontext","text":"","title":"WarperContext"},{"location":"warper/utils/WarperContext/#callerisnotmetahub","text":"error CallerIsNotMetahub() Thrown when the message sender doesn't match the Metahub address.","title":"CallerIsNotMetahub"},{"location":"warper/utils/WarperContext/#callerisnotwarperadmin","text":"error CallerIsNotWarperAdmin() Thrown when the message sender doesn't match the warper admin address.","title":"CallerIsNotWarperAdmin"},{"location":"warper/utils/WarperContext/#_metahub_slot","text":"bytes32 _METAHUB_SLOT Metahub address slot.","title":"_METAHUB_SLOT"},{"location":"warper/utils/WarperContext/#_original_slot","text":"bytes32 _ORIGINAL_SLOT Original asset address slot.","title":"_ORIGINAL_SLOT"},{"location":"warper/utils/WarperContext/#onlymetahub","text":"modifier onlyMetahub() Modifier to make a function callable only by the metahub contract.","title":"onlyMetahub"},{"location":"warper/utils/WarperContext/#onlywarperadmin","text":"modifier onlyWarperAdmin() Modifier to make a function callable only by the warper admin.","title":"onlyWarperAdmin"},{"location":"warper/utils/WarperContext/#_setoriginal","text":"function _setOriginal(address original) internal Sets warper original asset address.","title":"_setOriginal"},{"location":"warper/utils/WarperContext/#_setmetahub","text":"function _setMetahub(address metahub) internal Sets warper metahub address.","title":"_setMetahub"},{"location":"warper/utils/WarperContext/#_original","text":"function _original() internal view returns (address) Returns warper original asset address.","title":"_original"},{"location":"warper/utils/WarperContext/#_metahub","text":"function _metahub() internal view returns (address) warper metahub address.","title":"_metahub"}]}