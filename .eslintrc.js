module.exports = {
  env: {
    browser: false,
    es2021: true,
    mocha: true,
    node: true,
  },
  plugins: ['@typescript-eslint', '@fintechstudios/eslint-plugin-chai-as-promised'],
  extends: [
    'eslint:recommended',
    'plugin:@fintechstudios/chai-as-promised/recommended',
    'plugin:@typescript-eslint/eslint-recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:import/recommended',
    'plugin:import/typescript',
    'plugin:node/recommended',
    'plugin:prettier/recommended',
  ],
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaVersion: 12,
    project: './tsconfig.json',
  },
  rules: {
    'require-await': 'error',
    '@fintechstudios/chai-as-promised/no-unhandled-promises': 'error',
    '@fintechstudios/chai-as-promised/no-await-in-condition': 'error',
    'node/no-unsupported-features/es-syntax': ['error', { ignores: ['modules'] }],
    'no-empty-function': 'off',
    '@typescript-eslint/no-empty-function': 'off',
    'node/no-unpublished-import': 'off',
    'node/no-missing-import': 'off',
  },
  overrides: [
    {
      files: ['*.ts'],
      extends: [
        'eslint:recommended',
        'plugin:@typescript-eslint/eslint-recommended',
        'plugin:@typescript-eslint/recommended',
        'plugin:@typescript-eslint/recommended-requiring-type-checking',
        'plugin:sonarjs/recommended',
        'plugin:import/typescript',
        'plugin:prettier/recommended',
        'plugin:filenames-simple/recommended',
      ],
      rules: {
        '@typescript-eslint/member-ordering': 'error',
        '@typescript-eslint/naming-convention': [
          'error',
          {
            selector: 'variableLike',
            format: ['camelCase', 'UPPER_CASE'],
            leadingUnderscore: 'forbid',
            trailingUnderscore: 'forbid',
          },
        ],
        '@typescript-eslint/no-floating-promises': 'error',
        '@typescript-eslint/no-throw-literal': 'error',
        '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
        '@typescript-eslint/no-unnecessary-condition': 'error',
        '@typescript-eslint/no-unused-vars': 'error',
        '@typescript-eslint/prefer-for-of': 'error',
        '@typescript-eslint/prefer-nullish-coalescing': 'error',
        '@typescript-eslint/prefer-optional-chain': 'error',
        '@typescript-eslint/prefer-readonly': 'error',
        '@typescript-eslint/promise-function-async': 'error',
        '@typescript-eslint/restrict-plus-operands': [
          'error',
          {
            checkCompoundAssignments: true,
          },
        ],
        '@typescript-eslint/restrict-template-expressions': [
          'error',
          {
            allowAny: true,
          },
        ],
        '@typescript-eslint/switch-exhaustiveness-check': 'error',
        '@typescript-eslint/unified-signatures': 'error',
        '@typescript-eslint/return-await': 'error',
        '@typescript-eslint/no-useless-constructor': 'error',
        '@typescript-eslint/no-unsafe-member-access': 'error',
        '@typescript-eslint/no-unsafe-return': 'error',
        '@typescript-eslint/no-unsafe-assignment': 'error',
        '@typescript-eslint/explicit-function-return-type': [
          'error',
          {
            allowExpressions: true,
            allowTypedFunctionExpressions: true,
          },
        ],
        '@typescript-eslint/no-empty-function': [
          'error',
          {
            allow: ['private-constructors'],
          },
        ],
        // eslint:recommended additional rules & best practices
        'no-template-curly-in-string': 'error',
        'require-atomic-updates': 'error',
        'consistent-return': 'error',
        'default-case': 'error',
        'dot-notation': 'error',
        eqeqeq: 'error',
        'grouped-accessor-pairs': 'error',
        'guard-for-in': 'error',
        'no-else-return': 'error',
        'no-eval': 'error',
        'no-extend-native': 'error',
        'no-floating-decimal': 'error',
        'no-implicit-coercion': 'error',
        'no-new-func': 'error',
        'no-new-wrappers': 'error',
        'no-self-compare': 'error',
        'no-unused-expressions': 'error',
        'no-useless-call': 'error',
        'no-useless-concat': 'error',
        'prefer-promise-reject-errors': 'error',
        'prefer-regex-literals': 'error',
        radix: 'error',
        'func-style': ['error', 'expression'],
        'max-depth': ['error', 3],
        'multiline-ternary': ['error', 'never'],
        'no-lonely-if': 'error',
        'no-nested-ternary': 'error',
        'no-unneeded-ternary': 'error',
        'no-useless-computed-key': 'error',
        'filenames-simple/naming-convention': [
          'error',
          {
            rule: 'kebab-case',
          },
        ],
        'filenames-simple/named-export': 'off',
      },
    },
    {
      files: ['*.test.ts', '*.behaviour.ts', './test/unit/**'],
      rules: {
        'sonarjs/no-duplicate-string': 'off',
        'sonarjs/no-identical-functions': 'off',
        'func-style': 'off',
      },
    },
  ],
};
